
bcr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000cfc  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000087e  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  78:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:
// Initialises SPI chip select pins and shutdown pins. Sets initial I/O directions.
void init (void)
{

	// Set MSRT and SPE pin high
	SPCR = 0x50;
  80:	80 e5       	ldi	r24, 0x50	; 80
  82:	8c bd       	out	0x2c, r24	; 44

	// Set SPI chip selects as outputs, initialise to high
	DDRB  |= DAC_CS | ADC_A_CS | ADC_B_CS;
  84:	84 b1       	in	r24, 0x04	; 4
  86:	87 60       	ori	r24, 0x07	; 7
  88:	84 b9       	out	0x04, r24	; 4
	PORTB |= DAC_CS | ADC_A_CS | ADC_B_CS;
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	87 60       	ori	r24, 0x07	; 7
  8e:	85 b9       	out	0x05, r24	; 5

	// Set BCR shutdown pins as outputs, initialise to low
	DDRD  |=   SHDN_XP | SHDN_YP | SHDN_ZP | SHDN_XN | SHDN_YN | SHDN_ZN;
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8c 6f       	ori	r24, 0xFC	; 252
  94:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(SHDN_XP | SHDN_YP | SHDN_ZP | SHDN_XN | SHDN_YN | SHDN_ZN);
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	83 70       	andi	r24, 0x03	; 3
  9a:	8b b9       	out	0x0b, r24	; 11

	// Set MOSI and SCK as outputs
	DDRB |= MOSI | SCK;
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	88 62       	ori	r24, 0x28	; 40
  a0:	84 b9       	out	0x04, r24	; 4

	// Set MISO as input
	DDRB &= ~MISO;
  a2:	24 98       	cbi	0x04, 4	; 4
	// Set reset switch as input
	// DDRC  &= ~RESET;
	// PORTC |=  RESET;

	return;
}
  a4:	08 95       	ret

000000a6 <setDAC>:

// Sends 10 bit data value to addressed channel of LTC1660 D/A converter
void setDAC (uint8_t address, uint16_t value)
{
	uint16_t dacWord = (value << 2) | (((uint16_t) address) << 12);
  a6:	38 2f       	mov	r19, r24
  a8:	32 95       	swap	r19
  aa:	30 7f       	andi	r19, 0xF0	; 240
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	66 0f       	add	r22, r22
  b0:	77 1f       	adc	r23, r23
  b2:	66 0f       	add	r22, r22
  b4:	77 1f       	adc	r23, r23
  b6:	62 2b       	or	r22, r18
  b8:	73 2b       	or	r23, r19

	// Pull chip select low
	PORTB &= ~(DAC_CS);
  ba:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <setDAC+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <setDAC+0x1e>
	
	_delay_us (1);

	// Send word	
	SPDR = (uint8_t) (dacWord >> 8);
  c4:	7e bd       	out	0x2e, r23	; 46
	while (!(SPSR & (1 << SPIF)))
  c6:	0d b4       	in	r0, 0x2d	; 45
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <setDAC+0x20>
		;
	
	SPDR = (uint8_t) dacWord;
  cc:	6e bd       	out	0x2e, r22	; 46
	while (!(SPSR & (1 << SPIF)))
  ce:	0d b4       	in	r0, 0x2d	; 45
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <setDAC+0x28>
		;

	// Pull chip select high
	PORTB |= DAC_CS;
  d4:	28 9a       	sbi	0x05, 0	; 5
	
	return;
}
  d6:	08 95       	ret

000000d8 <main>:

#include "bcr.h"

int main (void)
{
	init ();
  d8:	0e 94 40 00 	call	0x80	; 0x80 <init>
	
	while (1)
	{
		setDAC (DAC_ALL, 1023);
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	6f ef       	ldi	r22, 0xFF	; 255
  e0:	73 e0       	ldi	r23, 0x03	; 3
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <setDAC>
		setDAC(DAC_A,0);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <setDAC>
		setDAC(DAC_B,500);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	64 ef       	ldi	r22, 0xF4	; 244
  f4:	71 e0       	ldi	r23, 0x01	; 1
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <setDAC>
		setDAC(DAC_C, 1023);
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	6f ef       	ldi	r22, 0xFF	; 255
  fe:	73 e0       	ldi	r23, 0x03	; 3
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <setDAC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f ec       	ldi	r24, 0xCF	; 207
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x30>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x36>
 10e:	00 00       	nop
 110:	e5 cf       	rjmp	.-54     	; 0xdc <main+0x4>

00000112 <readADC>:
uint16_t readADC (uint8_t adc, uint8_t channel)
{
	uint16_t retVal = 0xFFFF;
	
	// Send channel address
	SPDR = channel;
 112:	6e bd       	out	0x2e, r22	; 46
	while (!(SPSR & (1 << SPIF)))
 114:	0d b4       	in	r0, 0x2d	; 45
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <readADC+0x2>
		;

	// Pull chip select low
	PORTB &= (adc == ADC_A) ? ~ADC_A_CS : ~ADC_B_CS;
 11a:	25 b1       	in	r18, 0x05	; 5
 11c:	88 23       	and	r24, r24
 11e:	11 f4       	brne	.+4      	; 0x124 <readADC+0x12>
 120:	9d ef       	ldi	r25, 0xFD	; 253
 122:	01 c0       	rjmp	.+2      	; 0x126 <readADC+0x14>
 124:	9b ef       	ldi	r25, 0xFB	; 251
 126:	92 23       	and	r25, r18
 128:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	92 e0       	ldi	r25, 0x02	; 2
 12c:	9a 95       	dec	r25
 12e:	f1 f7       	brne	.-4      	; 0x12c <readADC+0x1a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <readADC+0x20>

	_delay_us(1);

	// Sent dummy byte
	SPDR = 0xFF;
 132:	9f ef       	ldi	r25, 0xFF	; 255
 134:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1 << SPIF)))
 136:	0d b4       	in	r0, 0x2d	; 45
 138:	07 fe       	sbrs	r0, 7
 13a:	fd cf       	rjmp	.-6      	; 0x136 <readADC+0x24>
		;

	retVal |= ((uint16_t) (SPDR & 0x1F)) << 8;
 13c:	9e b5       	in	r25, 0x2e	; 46

	// Send dummy byte	
	SPDR = 0xFF;
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1 << SPIF)))
 142:	0d b4       	in	r0, 0x2d	; 45
 144:	07 fe       	sbrs	r0, 7
 146:	fd cf       	rjmp	.-6      	; 0x142 <readADC+0x30>
		;

	retVal |= (uint16_t) SPDR;
 148:	9e b5       	in	r25, 0x2e	; 46

	// Pull chip select high
	PORTB |= (adc == ADC_A) ? ADC_A_CS : ADC_B_CS;
 14a:	95 b1       	in	r25, 0x05	; 5
 14c:	88 23       	and	r24, r24
 14e:	11 f4       	brne	.+4      	; 0x154 <readADC+0x42>
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	01 c0       	rjmp	.+2      	; 0x156 <readADC+0x44>
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	89 2b       	or	r24, r25
 158:	85 b9       	out	0x05, r24	; 5

	retVal = retVal >> 1;

	return retVal;
}
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	9f e7       	ldi	r25, 0x7F	; 127
 15e:	08 95       	ret

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
