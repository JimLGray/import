
BLUESAT_BCR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00802000  00001c8c  00001d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  0080210a  0080210a  00001e2a  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003e0  00000000  00000000  00002cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007969  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cf3  00000000  00000000  0000aa11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005ec7  00000000  00000000  0000c704  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b8  00000000  00000000  000125cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002558  00000000  00000000  00012f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002938  00000000  00000000  000154dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 0019aa02  00000000  00000000  00017e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000248  00000000  00000000  001b2818  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	10 c1       	rjmp	.+544    	; 0x226 <__bad_interrupt>
       6:	00 00       	nop
       8:	0e c1       	rjmp	.+540    	; 0x226 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c c1       	rjmp	.+536    	; 0x226 <__bad_interrupt>
       e:	00 00       	nop
      10:	0a c1       	rjmp	.+532    	; 0x226 <__bad_interrupt>
      12:	00 00       	nop
      14:	08 c1       	rjmp	.+528    	; 0x226 <__bad_interrupt>
      16:	00 00       	nop
      18:	06 c1       	rjmp	.+524    	; 0x226 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	04 c1       	rjmp	.+520    	; 0x226 <__bad_interrupt>
      1e:	00 00       	nop
      20:	02 c1       	rjmp	.+516    	; 0x226 <__bad_interrupt>
      22:	00 00       	nop
      24:	00 c1       	rjmp	.+512    	; 0x226 <__bad_interrupt>
      26:	00 00       	nop
      28:	fe c0       	rjmp	.+508    	; 0x226 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fc c0       	rjmp	.+504    	; 0x226 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fa c0       	rjmp	.+500    	; 0x226 <__bad_interrupt>
      32:	00 00       	nop
      34:	f8 c0       	rjmp	.+496    	; 0x226 <__bad_interrupt>
      36:	00 00       	nop
      38:	f6 c0       	rjmp	.+492    	; 0x226 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f4 c0       	rjmp	.+488    	; 0x226 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f2 c0       	rjmp	.+484    	; 0x226 <__bad_interrupt>
      42:	00 00       	nop
      44:	f0 c0       	rjmp	.+480    	; 0x226 <__bad_interrupt>
      46:	00 00       	nop
      48:	ee c0       	rjmp	.+476    	; 0x226 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ec c0       	rjmp	.+472    	; 0x226 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ea c0       	rjmp	.+468    	; 0x226 <__bad_interrupt>
      52:	00 00       	nop
      54:	e8 c0       	rjmp	.+464    	; 0x226 <__bad_interrupt>
      56:	00 00       	nop
      58:	e6 c0       	rjmp	.+460    	; 0x226 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e4 c0       	rjmp	.+456    	; 0x226 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e2 c0       	rjmp	.+452    	; 0x226 <__bad_interrupt>
      62:	00 00       	nop
      64:	e0 c0       	rjmp	.+448    	; 0x226 <__bad_interrupt>
      66:	00 00       	nop
      68:	de c0       	rjmp	.+444    	; 0x226 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	dc c0       	rjmp	.+440    	; 0x226 <__bad_interrupt>
      6e:	00 00       	nop
      70:	da c0       	rjmp	.+436    	; 0x226 <__bad_interrupt>
      72:	00 00       	nop
      74:	d8 c0       	rjmp	.+432    	; 0x226 <__bad_interrupt>
      76:	00 00       	nop
      78:	d6 c0       	rjmp	.+428    	; 0x226 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d4 c0       	rjmp	.+424    	; 0x226 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d2 c0       	rjmp	.+420    	; 0x226 <__bad_interrupt>
      82:	00 00       	nop
      84:	d0 c0       	rjmp	.+416    	; 0x226 <__bad_interrupt>
      86:	00 00       	nop
      88:	ce c0       	rjmp	.+412    	; 0x226 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cc c0       	rjmp	.+408    	; 0x226 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ca c0       	rjmp	.+404    	; 0x226 <__bad_interrupt>
      92:	00 00       	nop
      94:	c8 c0       	rjmp	.+400    	; 0x226 <__bad_interrupt>
      96:	00 00       	nop
      98:	c6 c0       	rjmp	.+396    	; 0x226 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	b9 c4       	rjmp	.+2418   	; 0xa10 <__vector_39>
      9e:	00 00       	nop
      a0:	e9 c4       	rjmp	.+2514   	; 0xa74 <__vector_40>
      a2:	00 00       	nop
      a4:	19 c5       	rjmp	.+2610   	; 0xad8 <__vector_41>
      a6:	00 00       	nop
      a8:	49 c5       	rjmp	.+2706   	; 0xb3c <__vector_42>
      aa:	00 00       	nop
      ac:	bc c0       	rjmp	.+376    	; 0x226 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ba c0       	rjmp	.+372    	; 0x226 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b8 c0       	rjmp	.+368    	; 0x226 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b6 c0       	rjmp	.+364    	; 0x226 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b4 c0       	rjmp	.+360    	; 0x226 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b2 c0       	rjmp	.+356    	; 0x226 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b0 c0       	rjmp	.+352    	; 0x226 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ae c0       	rjmp	.+348    	; 0x226 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ac c0       	rjmp	.+344    	; 0x226 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	aa c0       	rjmp	.+340    	; 0x226 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a8 c0       	rjmp	.+336    	; 0x226 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a6 c0       	rjmp	.+332    	; 0x226 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a4 c0       	rjmp	.+328    	; 0x226 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a2 c0       	rjmp	.+324    	; 0x226 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a0 c0       	rjmp	.+320    	; 0x226 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9e c0       	rjmp	.+316    	; 0x226 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	9c c0       	rjmp	.+312    	; 0x226 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	9a c0       	rjmp	.+308    	; 0x226 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	98 c0       	rjmp	.+304    	; 0x226 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	96 c0       	rjmp	.+300    	; 0x226 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	94 c0       	rjmp	.+296    	; 0x226 <__bad_interrupt>
      fe:	00 00       	nop
     100:	92 c0       	rjmp	.+292    	; 0x226 <__bad_interrupt>
     102:	00 00       	nop
     104:	90 c0       	rjmp	.+288    	; 0x226 <__bad_interrupt>
     106:	00 00       	nop
     108:	8e c0       	rjmp	.+284    	; 0x226 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	8c c0       	rjmp	.+280    	; 0x226 <__bad_interrupt>
     10e:	00 00       	nop
     110:	8a c0       	rjmp	.+276    	; 0x226 <__bad_interrupt>
     112:	00 00       	nop
     114:	88 c0       	rjmp	.+272    	; 0x226 <__bad_interrupt>
     116:	00 00       	nop
     118:	86 c0       	rjmp	.+268    	; 0x226 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b1 c3       	rjmp	.+1890   	; 0x880 <__vector_71>
     11e:	00 00       	nop
     120:	e1 c3       	rjmp	.+1986   	; 0x8e4 <__vector_72>
     122:	00 00       	nop
     124:	11 c4       	rjmp	.+2082   	; 0x948 <__vector_73>
     126:	00 00       	nop
     128:	41 c4       	rjmp	.+2178   	; 0x9ac <__vector_74>
     12a:	00 00       	nop
     12c:	7c c0       	rjmp	.+248    	; 0x226 <__bad_interrupt>
     12e:	00 00       	nop
     130:	7a c0       	rjmp	.+244    	; 0x226 <__bad_interrupt>
     132:	00 00       	nop
     134:	78 c0       	rjmp	.+240    	; 0x226 <__bad_interrupt>
     136:	00 00       	nop
     138:	76 c0       	rjmp	.+236    	; 0x226 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	74 c0       	rjmp	.+232    	; 0x226 <__bad_interrupt>
     13e:	00 00       	nop
     140:	72 c0       	rjmp	.+228    	; 0x226 <__bad_interrupt>
     142:	00 00       	nop
     144:	70 c0       	rjmp	.+224    	; 0x226 <__bad_interrupt>
     146:	00 00       	nop
     148:	6e c0       	rjmp	.+220    	; 0x226 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	6c c0       	rjmp	.+216    	; 0x226 <__bad_interrupt>
     14e:	00 00       	nop
     150:	6a c0       	rjmp	.+212    	; 0x226 <__bad_interrupt>
     152:	00 00       	nop
     154:	68 c0       	rjmp	.+208    	; 0x226 <__bad_interrupt>
     156:	00 00       	nop
     158:	66 c0       	rjmp	.+204    	; 0x226 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	64 c0       	rjmp	.+200    	; 0x226 <__bad_interrupt>
     15e:	00 00       	nop
     160:	62 c0       	rjmp	.+196    	; 0x226 <__bad_interrupt>
     162:	00 00       	nop
     164:	60 c0       	rjmp	.+192    	; 0x226 <__bad_interrupt>
     166:	00 00       	nop
     168:	5e c0       	rjmp	.+188    	; 0x226 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	5c c0       	rjmp	.+184    	; 0x226 <__bad_interrupt>
     16e:	00 00       	nop
     170:	5a c0       	rjmp	.+180    	; 0x226 <__bad_interrupt>
     172:	00 00       	nop
     174:	58 c0       	rjmp	.+176    	; 0x226 <__bad_interrupt>
     176:	00 00       	nop
     178:	56 c0       	rjmp	.+172    	; 0x226 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	54 c0       	rjmp	.+168    	; 0x226 <__bad_interrupt>
     17e:	00 00       	nop
     180:	52 c0       	rjmp	.+164    	; 0x226 <__bad_interrupt>
     182:	00 00       	nop
     184:	50 c0       	rjmp	.+160    	; 0x226 <__bad_interrupt>
     186:	00 00       	nop
     188:	4e c0       	rjmp	.+156    	; 0x226 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	4c c0       	rjmp	.+152    	; 0x226 <__bad_interrupt>
     18e:	00 00       	nop
     190:	4a c0       	rjmp	.+148    	; 0x226 <__bad_interrupt>
     192:	00 00       	nop
     194:	48 c0       	rjmp	.+144    	; 0x226 <__bad_interrupt>
     196:	00 00       	nop
     198:	46 c0       	rjmp	.+140    	; 0x226 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	44 c0       	rjmp	.+136    	; 0x226 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	42 c0       	rjmp	.+132    	; 0x226 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	40 c0       	rjmp	.+128    	; 0x226 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	3e c0       	rjmp	.+124    	; 0x226 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3c c0       	rjmp	.+120    	; 0x226 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	3a c0       	rjmp	.+116    	; 0x226 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	38 c0       	rjmp	.+112    	; 0x226 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	36 c0       	rjmp	.+108    	; 0x226 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	34 c0       	rjmp	.+104    	; 0x226 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	32 c0       	rjmp	.+100    	; 0x226 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	30 c0       	rjmp	.+96     	; 0x226 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	2e c0       	rjmp	.+92     	; 0x226 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	2c c0       	rjmp	.+88     	; 0x226 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	2a c0       	rjmp	.+84     	; 0x226 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	28 c0       	rjmp	.+80     	; 0x226 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	26 c0       	rjmp	.+76     	; 0x226 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	24 c0       	rjmp	.+72     	; 0x226 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	22 c0       	rjmp	.+68     	; 0x226 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	20 c0       	rjmp	.+64     	; 0x226 <__bad_interrupt>
	...

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e2       	ldi	r29, 0x2F	; 47
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61

000001f4 <__do_copy_data>:
     1f4:	11 e2       	ldi	r17, 0x21	; 33
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b0 e2       	ldi	r27, 0x20	; 32
     1fa:	ec e8       	ldi	r30, 0x8C	; 140
     1fc:	fc e1       	ldi	r31, 0x1C	; 28
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	0b bf       	out	0x3b, r16	; 59
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
     204:	07 90       	elpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	aa 30       	cpi	r26, 0x0A	; 10
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>

0000020e <__do_clear_bss>:
     20e:	11 e2       	ldi	r17, 0x21	; 33
     210:	aa e0       	ldi	r26, 0x0A	; 10
     212:	b1 e2       	ldi	r27, 0x21	; 33
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a6 34       	cpi	r26, 0x46	; 70
     21a:	b1 07       	cpc	r27, r17
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 16 0b 	call	0x162c	; 0x162c <main>
     222:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <_exit>

00000226 <__bad_interrupt>:
     226:	ec ce       	rjmp	.-552    	; 0x0 <__vectors>

00000228 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     228:	8f ef       	ldi	r24, 0xFF	; 255
     22a:	80 93 70 00 	sts	0x0070, r24
     22e:	80 93 71 00 	sts	0x0071, r24
     232:	80 93 72 00 	sts	0x0072, r24
     236:	80 93 73 00 	sts	0x0073, r24
     23a:	80 93 74 00 	sts	0x0074, r24
     23e:	80 93 75 00 	sts	0x0075, r24
     242:	80 93 76 00 	sts	0x0076, r24
	irqflags_t flags;

	Assert(id == OSC_ID_XOSC);

#ifndef CONFIG_XOSC_32KHZ_LPM
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
     246:	e0 e5       	ldi	r30, 0x50	; 80
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	8b e4       	ldi	r24, 0x4B	; 75
     24c:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     24e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     250:	f8 94       	cli
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     252:	90 81       	ld	r25, Z
     254:	98 60       	ori	r25, 0x08	; 8
     256:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     258:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     25a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     25c:	83 ff       	sbrs	r24, 3
     25e:	fd cf       	rjmp	.-6      	; 0x25a <sysclk_init+0x32>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     260:	80 e4       	ldi	r24, 0x40	; 64
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	63 e0       	ldi	r22, 0x03	; 3
     266:	8f d5       	rcall	.+2846   	; 0xd86 <ccp_write_io>
     268:	8f b7       	in	r24, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     26a:	f8 94       	cli
	cpu_irq_disable();
     26c:	e0 e5       	ldi	r30, 0x50	; 80
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	90 81       	ld	r25, Z
     272:	9e 7f       	andi	r25, 0xFE	; 254
     274:	90 83       	st	Z, r25
     276:	8f bf       	out	0x3f, r24	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     278:	08 95       	ret

0000027a <sysclk_enable_module>:
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
	}
}
     27a:	2f b7       	in	r18, 0x3f	; 63
typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
	cpu_irq_disable();
     27c:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     27e:	fc 01       	movw	r30, r24
     280:	e0 59       	subi	r30, 0x90	; 144
     282:	ff 4f       	sbci	r31, 0xFF	; 255
     284:	60 95       	com	r22
     286:	80 81       	ld	r24, Z
     288:	68 23       	and	r22, r24
     28a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     28c:	2f bf       	out	0x3f, r18	; 63

	cpu_irq_restore(flags);
}
     28e:	08 95       	ret

00000290 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     290:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     292:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     294:	fc 01       	movw	r30, r24
     296:	e0 59       	subi	r30, 0x90	; 144
     298:	ff 4f       	sbci	r31, 0xFF	; 255
     29a:	80 81       	ld	r24, Z
     29c:	68 2b       	or	r22, r24
     29e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2a0:	2f bf       	out	0x3f, r18	; 63

	cpu_irq_restore(flags);
}
     2a2:	08 95       	ret

000002a4 <ioport_configure_port_pin>:
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	ec 01       	movw	r28, r24
     2aa:	fc 01       	movw	r30, r24
     2ac:	70 96       	adiw	r30, 0x10	; 16
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	a6 2f       	mov	r26, r22
     2b4:	b0 e0       	ldi	r27, 0x00	; 0
     2b6:	cd 01       	movw	r24, r26
     2b8:	02 2e       	mov	r0, r18
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <ioport_configure_port_pin+0x1c>
     2bc:	95 95       	asr	r25
     2be:	87 95       	ror	r24
     2c0:	0a 94       	dec	r0
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <ioport_configure_port_pin+0x18>
     2c4:	80 fd       	sbrc	r24, 0
     2c6:	50 83       	st	Z, r21
     2c8:	2f 5f       	subi	r18, 0xFF	; 255
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	31 96       	adiw	r30, 0x01	; 1
     2ce:	28 30       	cpi	r18, 0x08	; 8
     2d0:	31 05       	cpc	r19, r1
     2d2:	89 f7       	brne	.-30     	; 0x2b6 <ioport_configure_port_pin+0x12>
     2d4:	40 ff       	sbrs	r20, 0
     2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <ioport_configure_port_pin+0x42>
     2d8:	41 ff       	sbrs	r20, 1
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <ioport_configure_port_pin+0x3c>
     2dc:	6d 83       	std	Y+5, r22	; 0x05
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <ioport_configure_port_pin+0x3e>
     2e0:	6e 83       	std	Y+6, r22	; 0x06
     2e2:	69 83       	std	Y+1, r22	; 0x01
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <ioport_configure_port_pin+0x44>
     2e6:	6a 83       	std	Y+2, r22	; 0x02
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	ec 01       	movw	r28, r24
	if((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B,PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if((uint16_t)spi == (uint16_t)&SPIC) {
     2f4:	88 e0       	ldi	r24, 0x08	; 8
     2f6:	c0 3c       	cpi	r28, 0xC0	; 192
     2f8:	d8 07       	cpc	r29, r24
     2fa:	29 f4       	brne	.+10     	; 0x306 <spi_master_init+0x18>
		sysclk_enable_module(SYSCLK_PORT_C,PR_SPI_bm);
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	68 e0       	ldi	r22, 0x08	; 8
     302:	bb df       	rcall	.-138    	; 0x27a <sysclk_enable_module>
     304:	12 c0       	rjmp	.+36     	; 0x32a <spi_master_init+0x3c>
     306:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef SPID
	if((uint16_t)spi == (uint16_t)&SPID) {
     308:	c0 3c       	cpi	r28, 0xC0	; 192
     30a:	d8 07       	cpc	r29, r24
     30c:	29 f4       	brne	.+10     	; 0x318 <spi_master_init+0x2a>
     30e:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_D,PR_SPI_bm);
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	68 e0       	ldi	r22, 0x08	; 8
     314:	b2 df       	rcall	.-156    	; 0x27a <sysclk_enable_module>
     316:	11 c0       	rjmp	.+34     	; 0x33a <spi_master_init+0x4c>
     318:	8a e0       	ldi	r24, 0x0A	; 10
     31a:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPIE
	if((uint16_t)spi == (uint16_t)&SPIE) {
     31c:	d8 07       	cpc	r29, r24
     31e:	29 f4       	brne	.+10     	; 0x32a <spi_master_init+0x3c>
     320:	85 e0       	ldi	r24, 0x05	; 5
     322:	90 e0       	ldi	r25, 0x00	; 0
		sysclk_enable_module(SYSCLK_PORT_E,PR_SPI_bm);
     324:	68 e0       	ldi	r22, 0x08	; 8
     326:	a9 df       	rcall	.-174    	; 0x27a <sysclk_enable_module>
     328:	08 c0       	rjmp	.+16     	; 0x33a <spi_master_init+0x4c>
     32a:	8b e0       	ldi	r24, 0x0B	; 11
     32c:	c0 3c       	cpi	r28, 0xC0	; 192
     32e:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef SPIF
	if((uint16_t)spi == (uint16_t)&SPIF) {
     330:	21 f4       	brne	.+8      	; 0x33a <spi_master_init+0x4c>
     332:	86 e0       	ldi	r24, 0x06	; 6
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	68 e0       	ldi	r22, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_F,PR_SPI_bm);
     338:	a0 df       	rcall	.-192    	; 0x27a <sysclk_enable_module>
     33a:	88 81       	ld	r24, Y
     33c:	80 61       	ori	r24, 0x10	; 16
     33e:	88 83       	st	Y, r24
     340:	df 91       	pop	r29
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <spi_master_setup_device>:
     346:	ff 92       	push	r15
	}
#endif
	spi_enable_master_mode(spi);
}
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
     spi_flags_t flags, uint32_t baud_rate,
     board_spi_select_id_t sel_id)
{
     34e:	df 93       	push	r29
     350:	ec 01       	movw	r28, r24
     352:	f4 2e       	mov	r15, r20
     354:	b9 01       	movw	r22, r18
     356:	a8 01       	movw	r20, r16
	if(spi_xmega_set_baud_div(spi, baud_rate,sysclk_get_cpu_hz())<0)
     358:	00 e0       	ldi	r16, 0x00	; 0
     35a:	12 e1       	ldi	r17, 0x12	; 18
     35c:	2a e7       	ldi	r18, 0x7A	; 122
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	22 d5       	rcall	.+2628   	; 0xda6 <spi_xmega_set_baud_div>
     362:	88 81       	ld	r24, Y
	{
		//TODO Assert impossible baudrate
	}
	spi->CTRL|=(flags<<SPI_MODE_gp)&SPI_MODE_gm;
     364:	ff 0c       	add	r15, r15
     366:	ff 0c       	add	r15, r15
     368:	9c e0       	ldi	r25, 0x0C	; 12
     36a:	f9 22       	and	r15, r25
     36c:	f8 2a       	or	r15, r24
     36e:	f8 82       	st	Y, r15
     370:	df 91       	pop	r29
}
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	08 95       	ret

0000037c <spi_write_packet>:
     37c:	fc 01       	movw	r30, r24
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi,const uint8_t *data, size_t len)
{
	size_t i=0;
	while(len) {
     37e:	41 15       	cp	r20, r1
     380:	51 05       	cpc	r21, r1
     382:	51 f0       	breq	.+20     	; 0x398 <spi_write_packet+0x1c>
     384:	a6 2f       	mov	r26, r22
     386:	b7 2f       	mov	r27, r23
		spi_write_single(spi,*(data+i));
     388:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     38a:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     38c:	82 81       	ldd	r24, Z+2	; 0x02
		while(!spi_is_rx_full(spi));
     38e:	88 23       	and	r24, r24
     390:	ec f7       	brge	.-6      	; 0x38c <spi_write_packet+0x10>
		len--;
     392:	41 50       	subi	r20, 0x01	; 1
     394:	50 40       	sbci	r21, 0x00	; 0
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi,const uint8_t *data, size_t len)
{
	size_t i=0;
	while(len) {
     396:	c1 f7       	brne	.-16     	; 0x388 <spi_write_packet+0xc>
		while(!spi_is_rx_full(spi));
		len--;
		i++;
	}
	return STATUS_OK;
}
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	08 95       	ret

0000039e <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
     39e:	fb 01       	movw	r30, r22
     3a0:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static inline ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     3a2:	e8 2f       	mov	r30, r24
     3a4:	e6 95       	lsr	r30
     3a6:	e6 95       	lsr	r30
     3a8:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	f0 96       	adiw	r30, 0x30	; 48
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	e2 95       	swap	r30
     3b4:	f2 95       	swap	r31
     3b6:	f0 7f       	andi	r31, 0xF0	; 240
     3b8:	fe 27       	eor	r31, r30
     3ba:	e0 7f       	andi	r30, 0xF0	; 240
     3bc:	fe 27       	eor	r31, r30
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     3be:	87 70       	andi	r24, 0x07	; 7
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	a9 01       	movw	r20, r18
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <spi_select_device+0x2e>
     3c8:	44 0f       	add	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	8a 95       	dec	r24
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <spi_select_device+0x2a>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     3d0:	46 83       	std	Z+6, r20	; 0x06
}
     3d2:	08 95       	ret

000003d4 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
     3d4:	fb 01       	movw	r30, r22
     3d6:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static inline ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     3d8:	e8 2f       	mov	r30, r24
     3da:	e6 95       	lsr	r30
     3dc:	e6 95       	lsr	r30
     3de:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	f0 96       	adiw	r30, 0x30	; 48
     3e4:	ee 0f       	add	r30, r30
     3e6:	ff 1f       	adc	r31, r31
     3e8:	e2 95       	swap	r30
     3ea:	f2 95       	swap	r31
     3ec:	f0 7f       	andi	r31, 0xF0	; 240
     3ee:	fe 27       	eor	r31, r30
     3f0:	e0 7f       	andi	r30, 0xF0	; 240
     3f2:	fe 27       	eor	r31, r30
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     3f4:	87 70       	andi	r24, 0x07	; 7
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	a9 01       	movw	r20, r18
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <spi_deselect_device+0x2e>
     3fe:	44 0f       	add	r20, r20
     400:	55 1f       	adc	r21, r21
     402:	8a 95       	dec	r24
     404:	e2 f7       	brpl	.-8      	; 0x3fe <spi_deselect_device+0x2a>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     406:	45 83       	std	Z+5, r20	; 0x05
}
     408:	08 95       	ret

0000040a <bcr_init>:
 */ 
#include <asf.h>

static void uart_init(void);

void bcr_init(void) {
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	29 97       	sbiw	r28, 0x09	; 9
     414:	cd bf       	out	0x3d, r28	; 61
     416:	de bf       	out	0x3e, r29	; 62
	//Setup clock (8Mhz XOSC) and power control
	sysclk_init();
     418:	07 df       	rcall	.-498    	; 0x228 <sysclk_init>
     41a:	87 e0       	ldi	r24, 0x07	; 7
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
     41c:	e0 ea       	ldi	r30, 0xA0	; 160
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	82 83       	std	Z+2, r24	; 0x02
     422:	0b d1       	rcall	.+534    	; 0x63a <bcr_adc_init>
	pmic_init();
	
	//Start ADC sampling
	bcr_adc_init();
     424:	3c d1       	rcall	.+632    	; 0x69e <bcr_dac_init>
     426:	80 e0       	ldi	r24, 0x00	; 0
	
	//Setup DAC SPI
	bcr_dac_init();
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	80 93 1a 21 	sts	0x211A, r24
	
	//Default ISETs to 512
	bcr_dac.ISET_ZM = 512;
     42e:	90 93 1b 21 	sts	0x211B, r25
     432:	80 93 18 21 	sts	0x2118, r24
     436:	90 93 19 21 	sts	0x2119, r25
	bcr_dac.ISET_YM = 512;
     43a:	80 93 16 21 	sts	0x2116, r24
     43e:	90 93 17 21 	sts	0x2117, r25
	bcr_dac.ISET_XM = 512;
     442:	80 93 10 21 	sts	0x2110, r24
     446:	90 93 11 21 	sts	0x2111, r25
	bcr_dac.ISET_ZP = 512;
     44a:	80 93 0e 21 	sts	0x210E, r24
     44e:	90 93 0f 21 	sts	0x210F, r25
	bcr_dac.ISET_YP = 512;
     452:	80 93 0c 21 	sts	0x210C, r24
     456:	90 93 0d 21 	sts	0x210D, r25
	bcr_dac.ISET_XP = 512;
     45a:	5b d1       	rcall	.+694    	; 0x712 <bcr_dac_update>
     45c:	80 ea       	ldi	r24, 0xA0	; 160
     45e:	96 e0       	ldi	r25, 0x06	; 6
	bcr_dac_update();
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	41 e0       	ldi	r20, 0x01	; 1
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	1e df       	rcall	.-452    	; 0x2a4 <ioport_configure_port_pin>
     468:	80 ea       	ldi	r24, 0xA0	; 160
     46a:	96 e0       	ldi	r25, 0x06	; 6
     46c:	62 e0       	ldi	r22, 0x02	; 2
     46e:	41 e0       	ldi	r20, 0x01	; 1
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	18 df       	rcall	.-464    	; 0x2a4 <ioport_configure_port_pin>
     474:	80 ea       	ldi	r24, 0xA0	; 160
     476:	96 e0       	ldi	r25, 0x06	; 6
     478:	64 e0       	ldi	r22, 0x04	; 4
     47a:	41 e0       	ldi	r20, 0x01	; 1
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	12 df       	rcall	.-476    	; 0x2a4 <ioport_configure_port_pin>
     480:	80 ea       	ldi	r24, 0xA0	; 160
     482:	96 e0       	ldi	r25, 0x06	; 6
     484:	68 e0       	ldi	r22, 0x08	; 8
     486:	41 e0       	ldi	r20, 0x01	; 1
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	0c df       	rcall	.-488    	; 0x2a4 <ioport_configure_port_pin>
     48c:	80 ea       	ldi	r24, 0xA0	; 160
     48e:	96 e0       	ldi	r25, 0x06	; 6
     490:	60 e1       	ldi	r22, 0x10	; 16
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	06 df       	rcall	.-500    	; 0x2a4 <ioport_configure_port_pin>
     498:	80 ea       	ldi	r24, 0xA0	; 160
     49a:	96 e0       	ldi	r25, 0x06	; 6
     49c:	60 e2       	ldi	r22, 0x20	; 32
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	00 df       	rcall	.-512    	; 0x2a4 <ioport_configure_port_pin>
     4a4:	80 ea       	ldi	r24, 0xA0	; 160
     4a6:	96 e0       	ldi	r25, 0x06	; 6
     4a8:	60 e4       	ldi	r22, 0x40	; 64
     4aa:	43 e0       	ldi	r20, 0x03	; 3
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	fa de       	rcall	.-524    	; 0x2a4 <ioport_configure_port_pin>
     4b0:	80 e8       	ldi	r24, 0x80	; 128
     4b2:	96 e0       	ldi	r25, 0x06	; 6
     4b4:	68 e0       	ldi	r22, 0x08	; 8
     4b6:	43 e0       	ldi	r20, 0x03	; 3
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	f4 de       	rcall	.-536    	; 0x2a4 <ioport_configure_port_pin>
     4bc:	80 e8       	ldi	r24, 0x80	; 128
     4be:	96 e0       	ldi	r25, 0x06	; 6
     4c0:	64 e0       	ldi	r22, 0x04	; 4
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	ee de       	rcall	.-548    	; 0x2a4 <ioport_configure_port_pin>
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	8d 83       	std	Y+5, r24	; 0x05
     4ce:	9e 83       	std	Y+6, r25	; 0x06
     4d0:	1f 82       	std	Y+7, r1	; 0x07
     4d2:	18 86       	std	Y+8, r1	; 0x08
     4d4:	19 86       	std	Y+9, r1	; 0x09
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	92 ec       	ldi	r25, 0xC2	; 194
     4da:	a1 e0       	ldi	r26, 0x01	; 1
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	89 83       	std	Y+1, r24	; 0x01
     4e0:	9a 83       	std	Y+2, r25	; 0x02
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     4e2:	ab 83       	std	Y+3, r26	; 0x03
     4e4:	bc 83       	std	Y+4, r27	; 0x04
     4e6:	85 e0       	ldi	r24, 0x05	; 5
     4e8:	90 e0       	ldi	r25, 0x00	; 0
	usart_rs232_options.paritytype   = options->paritytype;
     4ea:	60 e1       	ldi	r22, 0x10	; 16
     4ec:	c6 de       	rcall	.-628    	; 0x27a <sysclk_enable_module>
	usart_rs232_options.stopbits     = options->stopbits;
     4ee:	80 ea       	ldi	r24, 0xA0	; 160
	usart_rs232_options.baudrate     = options->baudrate;
     4f0:	9a e0       	ldi	r25, 0x0A	; 10
     4f2:	be 01       	movw	r22, r28
     4f4:	6f 5f       	subi	r22, 0xFF	; 255
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	c3 d5       	rcall	.+2950   	; 0x1080 <usart_init_rs232>
     4fa:	29 96       	adiw	r28, 0x09	; 9
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <adc_setup>:
}

//Sets up ADC in 12-bit mode, with AREFA reference, manually triggered and with adc_handler as the interrupt callback
//Sets up ADC's CH0 to sample Pin0 in single ended mode with interrupts. 
static void adc_setup(ADC_t* adc)
{
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	2a 97       	sbiw	r28, 0x0a	; 10
     514:	cd bf       	out	0x3d, r28	; 61
     516:	de bf       	out	0x3e, r29	; 62
     518:	8c 01       	movw	r16, r24
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;

	adc_read_configuration(adc, &adc_conf);
     51a:	be 01       	movw	r22, r28
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	a1 d3       	rcall	.+1858   	; 0xc64 <adc_read_configuration>
     522:	8a 81       	ldd	r24, Y+2	; 0x02
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     524:	9b 81       	ldd	r25, Y+3	; 0x03
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     526:	9f 7c       	andi	r25, 0xCF	; 207
     528:	90 62       	ori	r25, 0x20	; 32
	conf->refctrl |= ref;
     52a:	9b 83       	std	Y+3, r25	; 0x03
     52c:	81 7e       	andi	r24, 0xE1	; 225
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     52e:	8a 83       	std	Y+2, r24	; 0x02
     530:	1c 82       	std	Y+4, r1	; 0x04
		conf->evctrl = ADC_EVACT_NONE_gc;
     532:	87 e0       	ldi	r24, 0x07	; 7
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     534:	8d 83       	std	Y+5, r24	; 0x05
     536:	c8 01       	movw	r24, r16
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_AREFA);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 5000UL);
	adc_set_callback(adc, &adc_handler);
     538:	6f eb       	ldi	r22, 0xBF	; 191
     53a:	72 e0       	ldi	r23, 0x02	; 2
     53c:	35 d1       	rcall	.+618    	; 0x7a8 <adc_set_callback>
     53e:	c8 01       	movw	r24, r16
     540:	be 01       	movw	r22, r28
	adc_write_configuration(adc, &adc_conf);
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	2c d3       	rcall	.+1624   	; 0xba0 <adc_write_configuration>
     548:	c8 01       	movw	r24, r16
     54a:	61 e0       	ldi	r22, 0x01	; 1
     54c:	ae 01       	movw	r20, r28
	
	//Setup CH0
	adcch_read_configuration(adc, ADC_CH0, &adcch_conf);
     54e:	48 5f       	subi	r20, 0xF8	; 248
     550:	5f 4f       	sbci	r21, 0xFF	; 255
     552:	e2 d3       	rcall	.+1988   	; 0xd18 <adcch_read_configuration>
     554:	8a 85       	ldd	r24, Y+10	; 0x0a
     556:	8c 7f       	andi	r24, 0xFC	; 252
     558:	81 60       	ori	r24, 0x01	; 1
     55a:	8a 87       	std	Y+10, r24	; 0x0a
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	88 87       	std	Y+8, r24	; 0x08
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
     560:	19 86       	std	Y+9, r1	; 0x09
     562:	c8 01       	movw	r24, r16

	/* Configure for single-ended measurement. */
	if (neg == ADCCH_NEG_NONE) {
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	ae 01       	movw	r20, r28
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     568:	48 5f       	subi	r20, 0xF8	; 248
	adcch_enable_interrupt(&adcch_conf);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(adc, ADC_CH0, &adcch_conf);
     56a:	5f 4f       	sbci	r21, 0xFF	; 255
     56c:	9e d3       	rcall	.+1852   	; 0xcaa <adcch_write_configuration>
     56e:	2a 96       	adiw	r28, 0x0a	; 10
     570:	cd bf       	out	0x3d, r28	; 61
     572:	de bf       	out	0x3e, r29	; 62
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
}
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <adc_handler>:
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28

//Interrupt handler for ADC samples
//Reads result into bcr_adc and starts sample on next pin on ADC.
//(We can't use DMA because we have to change input multiplexers on each sample)
static void adc_handler(ADC_t *adc, uint8_t ch_mask, adc_result_t result)
{
     588:	df 93       	push	r29
     58a:	00 d0       	rcall	.+0      	; 0x58c <adc_handler+0xe>
     58c:	0f 92       	push	r0
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	8c 01       	movw	r16, r24
     594:	7a 01       	movw	r14, r20
	struct adc_channel_config adcch_conf;
	uint8_t muxpos;
	uint16_t* result_store;
	
	//All ADC samples should be done on CH0 (This loses pipelining, but ADC speed isn't a worry)
	if ( ch_mask != ADC_CH0 )
     596:	61 30       	cpi	r22, 0x01	; 1
     598:	09 f0       	breq	.+2      	; 0x59c <adc_handler+0x1e>
     59a:	45 c0       	rjmp	.+138    	; 0x626 <adc_handler+0xa8>
		return;
		
	//Read sampled muxpos
	adcch_read_configuration(adc, ADC_CH0, &adcch_conf);
     59c:	ae 01       	movw	r20, r28
     59e:	4f 5f       	subi	r20, 0xFF	; 255
     5a0:	5f 4f       	sbci	r21, 0xFF	; 255
     5a2:	ba d3       	rcall	.+1908   	; 0xd18 <adcch_read_configuration>
     5a4:	4a 81       	ldd	r20, Y+2	; 0x02
	muxpos = (adcch_conf.muxctrl&ADC_CH_MUXPOS_gm) >> ADC_CH_MUXPOS_gp;
     5a6:	84 2f       	mov	r24, r20
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	88 77       	andi	r24, 0x78	; 120
     5ac:	90 70       	andi	r25, 0x00	; 0
     5ae:	95 95       	asr	r25
     5b0:	87 95       	ror	r24
     5b2:	95 95       	asr	r25
     5b4:	87 95       	ror	r24
     5b6:	95 95       	asr	r25
     5b8:	87 95       	ror	r24
     5ba:	92 e0       	ldi	r25, 0x02	; 2
	
	//Use pointer arithmetic to store result into bcr_adc
	if (adc == &ADCA) //ADCA0-ADCA7
     5bc:	00 30       	cpi	r16, 0x00	; 0
     5be:	19 07       	cpc	r17, r25
     5c0:	39 f4       	brne	.+14     	; 0x5d0 <adc_handler+0x52>
     5c2:	e8 2f       	mov	r30, r24
		result_store = ((uint16_t*)&bcr_adc) + muxpos;
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	e4 5e       	subi	r30, 0xE4	; 228
     5cc:	fe 4d       	sbci	r31, 0xDE	; 222
     5ce:	06 c0       	rjmp	.+12     	; 0x5dc <adc_handler+0x5e>
     5d0:	e8 2f       	mov	r30, r24
	else //ADCB0-ADCB7
		result_store = ((uint16_t*)&bcr_adc) + muxpos + 8;
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	e4 5d       	subi	r30, 0xD4	; 212
     5da:	fe 4d       	sbci	r31, 0xDE	; 222
     5dc:	e0 82       	st	Z, r14
	*result_store = result;
     5de:	f1 82       	std	Z+1, r15	; 0x01
     5e0:	88 23       	and	r24, r24
	if (muxpos != 0)
     5e2:	29 f0       	breq	.+10     	; 0x5ee <adc_handler+0x70>
     5e4:	97 01       	movw	r18, r14
		*result_store -= 188; // Subtract offset
     5e6:	2c 5b       	subi	r18, 0xBC	; 188
     5e8:	30 40       	sbci	r19, 0x00	; 0
     5ea:	20 83       	st	Z, r18
     5ec:	31 83       	std	Z+1, r19	; 0x01
     5ee:	90 e0       	ldi	r25, 0x00	; 0
	
	//Increment and store muxpos into CH0 config
	muxpos = (muxpos+1)%8;
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	68 e0       	ldi	r22, 0x08	; 8
	adcch_conf.muxctrl = (adcch_conf.muxctrl & ~ADC_CH_MUXPOS_gm) | (muxpos<<ADC_CH_MUXPOS_gp);
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__divmodhi4>
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	47 78       	andi	r20, 0x87	; 135
     608:	84 2b       	or	r24, r20
     60a:	8a 83       	std	Y+2, r24	; 0x02
     60c:	c8 01       	movw	r24, r16
	adcch_write_configuration(adc, ADC_CH0, &adcch_conf);
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	ae 01       	movw	r20, r28
     612:	4f 5f       	subi	r20, 0xFF	; 255
     614:	5f 4f       	sbci	r21, 0xFF	; 255
     616:	49 d3       	rcall	.+1682   	; 0xcaa <adcch_write_configuration>
     618:	8f b7       	in	r24, 0x3f	; 63
     61a:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     61c:	f8 01       	movw	r30, r16
	cpu_irq_disable();
     61e:	90 81       	ld	r25, Z
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     620:	94 60       	ori	r25, 0x04	; 4
     622:	90 83       	st	Z, r25
     624:	8f bf       	out	0x3f, r24	; 63
     626:	23 96       	adiw	r28, 0x03	; 3
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     628:	cd bf       	out	0x3d, r28	; 61
	
	//Start conversion on the next pin (will eventually trigger another adc_handler)
	adc_start_conversion(adc, ADC_CH0);
}
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	08 95       	ret

0000063a <bcr_adc_init>:
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	92 e0       	ldi	r25, 0x02	; 2
}

void bcr_adc_init(void)
{
	//Setup ADCs
	adc_setup(&ADCA);
     63e:	63 df       	rcall	.-314    	; 0x506 <adc_setup>
     640:	80 e4       	ldi	r24, 0x40	; 64
	adc_setup(&ADCB);
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	60 df       	rcall	.-320    	; 0x506 <adc_setup>
     646:	78 94       	sei
     648:	e0 e0       	ldi	r30, 0x00	; 0
	
	//Ensure interrupts are enabled
	cpu_irq_enable();
     64a:	f6 e0       	ldi	r31, 0x06	; 6
	
	//Disable Internal Pullups
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc;
     64c:	10 8a       	std	Z+16, r1	; 0x10
     64e:	11 8a       	std	Z+17, r1	; 0x11
     650:	12 8a       	std	Z+18, r1	; 0x12
	PORTA.PIN1CTRL = PORT_OPC_TOTEM_gc;
     652:	13 8a       	std	Z+19, r1	; 0x13
	PORTA.PIN2CTRL = PORT_OPC_TOTEM_gc;
     654:	14 8a       	std	Z+20, r1	; 0x14
	PORTA.PIN3CTRL = PORT_OPC_TOTEM_gc;
     656:	15 8a       	std	Z+21, r1	; 0x15
	PORTA.PIN4CTRL = PORT_OPC_TOTEM_gc;
     658:	16 8a       	std	Z+22, r1	; 0x16
	PORTA.PIN5CTRL = PORT_OPC_TOTEM_gc;
     65a:	17 8a       	std	Z+23, r1	; 0x17
	PORTA.PIN6CTRL = PORT_OPC_TOTEM_gc;
     65c:	e0 e2       	ldi	r30, 0x20	; 32
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc;
     65e:	f6 e0       	ldi	r31, 0x06	; 6
	PORTB.PIN0CTRL = PORT_OPC_TOTEM_gc;
     660:	10 8a       	std	Z+16, r1	; 0x10
     662:	11 8a       	std	Z+17, r1	; 0x11
     664:	12 8a       	std	Z+18, r1	; 0x12
	PORTB.PIN1CTRL = PORT_OPC_TOTEM_gc;
     666:	13 8a       	std	Z+19, r1	; 0x13
	PORTB.PIN2CTRL = PORT_OPC_TOTEM_gc;
     668:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN3CTRL = PORT_OPC_TOTEM_gc;
     66a:	15 8a       	std	Z+21, r1	; 0x15
	PORTB.PIN4CTRL = PORT_OPC_TOTEM_gc;
     66c:	16 8a       	std	Z+22, r1	; 0x16
	PORTB.PIN5CTRL = PORT_OPC_TOTEM_gc;
     66e:	17 8a       	std	Z+23, r1	; 0x17
	PORTB.PIN6CTRL = PORT_OPC_TOTEM_gc;
     670:	80 e0       	ldi	r24, 0x00	; 0
	PORTB.PIN7CTRL = PORT_OPC_TOTEM_gc;
     672:	92 e0       	ldi	r25, 0x02	; 2
	
	//Enable ADCs
	adc_enable(&ADCA);
     674:	ee d0       	rcall	.+476    	; 0x852 <adc_enable>
     676:	80 e4       	ldi	r24, 0x40	; 64
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	eb d0       	rcall	.+470    	; 0x852 <adc_enable>
	adc_enable(&ADCB);
     67c:	8f b7       	in	r24, 0x3f	; 63
     67e:	f8 94       	cli
     680:	e0 e0       	ldi	r30, 0x00	; 0
     682:	f2 e0       	ldi	r31, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     684:	90 81       	ld	r25, Z
	cpu_irq_disable();
     686:	94 60       	ori	r25, 0x04	; 4
     688:	90 83       	st	Z, r25
     68a:	8f bf       	out	0x3f, r24	; 63
     68c:	8f b7       	in	r24, 0x3f	; 63
     68e:	f8 94       	cli
     690:	e0 e4       	ldi	r30, 0x40	; 64
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     692:	f2 e0       	ldi	r31, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     694:	90 81       	ld	r25, Z
	cpu_irq_disable();
     696:	94 60       	ori	r25, 0x04	; 4
     698:	90 83       	st	Z, r25
     69a:	8f bf       	out	0x3f, r24	; 63
     69c:	08 95       	ret

0000069e <bcr_dac_init>:

static struct spi_device spi_device_conf = {
	.id = DAC_SS
};

void bcr_dac_init(void) {
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	80 e4       	ldi	r24, 0x40	; 64
     6ac:	96 e0       	ldi	r25, 0x06	; 6
     6ae:	60 e1       	ldi	r22, 0x10	; 16
     6b0:	43 e0       	ldi	r20, 0x03	; 3
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	f7 dd       	rcall	.-1042   	; 0x2a4 <ioport_configure_port_pin>
     6b6:	80 e4       	ldi	r24, 0x40	; 64
     6b8:	96 e0       	ldi	r25, 0x06	; 6
     6ba:	60 e2       	ldi	r22, 0x20	; 32
     6bc:	43 e0       	ldi	r20, 0x03	; 3
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	f1 dd       	rcall	.-1054   	; 0x2a4 <ioport_configure_port_pin>
     6c2:	80 e4       	ldi	r24, 0x40	; 64
     6c4:	96 e0       	ldi	r25, 0x06	; 6
     6c6:	60 e4       	ldi	r22, 0x40	; 64
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	eb dd       	rcall	.-1066   	; 0x2a4 <ioport_configure_port_pin>
     6ce:	80 e4       	ldi	r24, 0x40	; 64
     6d0:	96 e0       	ldi	r25, 0x06	; 6
     6d2:	60 e8       	ldi	r22, 0x80	; 128
     6d4:	43 e0       	ldi	r20, 0x03	; 3
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	e5 dd       	rcall	.-1078   	; 0x2a4 <ioport_configure_port_pin>
     6da:	80 ec       	ldi	r24, 0xC0	; 192
     6dc:	98 e0       	ldi	r25, 0x08	; 8
     6de:	07 de       	rcall	.-1010   	; 0x2ee <spi_master_init>
     6e0:	80 ec       	ldi	r24, 0xC0	; 192
	ioport_configure_pin(DAC_MOSI, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	ioport_configure_pin(DAC_MISO, IOPORT_DIR_INPUT);
	ioport_configure_pin(DAC_SCK, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	
	//Init module
	spi_master_init(&SPIC);
     6e2:	98 e0       	ldi	r25, 0x08	; 8
     6e4:	68 e0       	ldi	r22, 0x08	; 8
     6e6:	71 e2       	ldi	r23, 0x21	; 33
     6e8:	40 e0       	ldi	r20, 0x00	; 0
	spi_master_setup_device(&SPIC, &spi_device_conf, SPI_MODE_0, DAC_BAUD, 0);
     6ea:	00 e4       	ldi	r16, 0x40	; 64
     6ec:	12 e4       	ldi	r17, 0x42	; 66
     6ee:	2f e0       	ldi	r18, 0x0F	; 15
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	cc 24       	eor	r12, r12
     6f4:	dd 24       	eor	r13, r13
     6f6:	76 01       	movw	r14, r12
     6f8:	26 de       	rcall	.-948    	; 0x346 <spi_master_setup_device>
     6fa:	e0 ec       	ldi	r30, 0xC0	; 192
     6fc:	f8 e0       	ldi	r31, 0x08	; 8
     6fe:	80 81       	ld	r24, Z
     700:	80 64       	ori	r24, 0x40	; 64
     702:	80 83       	st	Z, r24
     704:	1f 91       	pop	r17
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
	spi_enable(&SPIC);
}
     710:	08 95       	ret

00000712 <bcr_dac_update>:
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
	spi_write_packet(&SPIC, spi_packet, 2);
	spi_deselect_device(&SPIC, &spi_device_conf);
}

//Updates all 8 DAC pins
void bcr_dac_update(void) {
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	00 d0       	rcall	.+0      	; 0x724 <bcr_dac_update+0x12>
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	0f 2e       	mov	r0, r31
     72a:	fc e0       	ldi	r31, 0x0C	; 12
     72c:	ef 2e       	mov	r14, r31
     72e:	f1 e2       	ldi	r31, 0x21	; 33
     730:	ff 2e       	mov	r15, r31
     732:	f0 2d       	mov	r31, r0
     734:	01 e0       	ldi	r16, 0x01	; 1
     736:	10 e0       	ldi	r17, 0x00	; 0
static void bcr_dac_update_pin(uint8_t pin, uint16_t value) {
	uint16_t dac_word = ((pin&0xF)<<12) | ((value&0x3FF)<<2);
	uint8_t spi_packet[2] = {(uint8_t)(dac_word>>8), (uint8_t)dac_word};
		
	//Write packet over spi
	spi_select_device(&SPIC, &spi_device_conf);
     738:	0f 2e       	mov	r0, r31
     73a:	f8 e0       	ldi	r31, 0x08	; 8
     73c:	cf 2e       	mov	r12, r31
     73e:	f1 e2       	ldi	r31, 0x21	; 33
     740:	df 2e       	mov	r13, r31
     742:	f0 2d       	mov	r31, r0

//Updates all 8 DAC pins
void bcr_dac_update(void) {
	for (uint16_t i=0; i<8; i++)
		//bcr_dac_update_pin(i+1, 255);
		bcr_dac_update_pin(i+1, *(((uint16_t*)&bcr_dac)+i));
     744:	f7 01       	movw	r30, r14
     746:	81 91       	ld	r24, Z+
     748:	91 91       	ld	r25, Z+
     74a:	7f 01       	movw	r14, r30

//Updates a single DAC pin
//V_OUTA -> pin=1
//V_OUTH -> pin=8
static void bcr_dac_update_pin(uint8_t pin, uint16_t value) {
	uint16_t dac_word = ((pin&0xF)<<12) | ((value&0x3FF)<<2);
     74c:	93 70       	andi	r25, 0x03	; 3
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	98 01       	movw	r18, r16
     758:	32 2f       	mov	r19, r18
     75a:	22 27       	eor	r18, r18
     75c:	32 95       	swap	r19
     75e:	30 7f       	andi	r19, 0xF0	; 240
     760:	82 2b       	or	r24, r18
     762:	93 2b       	or	r25, r19
	uint8_t spi_packet[2] = {(uint8_t)(dac_word>>8), (uint8_t)dac_word};
     764:	99 83       	std	Y+1, r25	; 0x01
     766:	8a 83       	std	Y+2, r24	; 0x02
		
	//Write packet over spi
	spi_select_device(&SPIC, &spi_device_conf);
     768:	80 ec       	ldi	r24, 0xC0	; 192
     76a:	98 e0       	ldi	r25, 0x08	; 8
     76c:	b6 01       	movw	r22, r12
     76e:	17 de       	rcall	.-978    	; 0x39e <spi_select_device>
     770:	80 ec       	ldi	r24, 0xC0	; 192
	spi_write_packet(&SPIC, spi_packet, 2);
     772:	98 e0       	ldi	r25, 0x08	; 8
     774:	be 01       	movw	r22, r28
     776:	6f 5f       	subi	r22, 0xFF	; 255
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	42 e0       	ldi	r20, 0x02	; 2
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	fe dd       	rcall	.-1028   	; 0x37c <spi_write_packet>
     780:	80 ec       	ldi	r24, 0xC0	; 192
     782:	98 e0       	ldi	r25, 0x08	; 8
	spi_deselect_device(&SPIC, &spi_device_conf);
     784:	b6 01       	movw	r22, r12
     786:	26 de       	rcall	.-948    	; 0x3d4 <spi_deselect_device>
     788:	0f 5f       	subi	r16, 0xFF	; 255
     78a:	1f 4f       	sbci	r17, 0xFF	; 255
     78c:	09 30       	cpi	r16, 0x09	; 9
     78e:	11 05       	cpc	r17, r1
     790:	c9 f6       	brne	.-78     	; 0x744 <bcr_dac_update+0x32>
}

//Updates all 8 DAC pins
void bcr_dac_update(void) {
	for (uint16_t i=0; i<8; i++)
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	df 91       	pop	r29
		//bcr_dac_update_pin(i+1, 255);
		bcr_dac_update_pin(i+1, *(((uint16_t*)&bcr_dac)+i));
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	ff 90       	pop	r15
     7a0:	ef 90       	pop	r14
     7a2:	df 90       	pop	r13
     7a4:	cf 90       	pop	r12
     7a6:	08 95       	ret

000007a8 <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7a8:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     7aa:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     7ac:	32 e0       	ldi	r19, 0x02	; 2
     7ae:	80 30       	cpi	r24, 0x00	; 0
     7b0:	93 07       	cpc	r25, r19
     7b2:	29 f4       	brne	.+10     	; 0x7be <adc_set_callback+0x16>
		adca_callback = callback;
     7b4:	60 93 44 21 	sts	0x2144, r22
     7b8:	70 93 45 21 	sts	0x2145, r23
     7bc:	08 c0       	rjmp	.+16     	; 0x7ce <adc_set_callback+0x26>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     7be:	32 e0       	ldi	r19, 0x02	; 2
     7c0:	80 34       	cpi	r24, 0x40	; 64
     7c2:	93 07       	cpc	r25, r19
     7c4:	21 f4       	brne	.+8      	; 0x7ce <adc_set_callback+0x26>
		adcb_callback = callback;
     7c6:	60 93 42 21 	sts	0x2142, r22
     7ca:	70 93 43 21 	sts	0x2143, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7ce:	2f bf       	out	0x3f, r18	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     7d0:	08 95       	ret

000007d2 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     7d2:	22 e0       	ldi	r18, 0x02	; 2
     7d4:	80 30       	cpi	r24, 0x00	; 0
     7d6:	92 07       	cpc	r25, r18
     7d8:	61 f4       	brne	.+24     	; 0x7f2 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     7da:	80 91 0a 21 	lds	r24, 0x210A
     7de:	98 2f       	mov	r25, r24
     7e0:	9f 5f       	subi	r25, 0xFF	; 255
     7e2:	90 93 0a 21 	sts	0x210A, r25
     7e6:	88 23       	and	r24, r24
     7e8:	a1 f4       	brne	.+40     	; 0x812 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	62 e0       	ldi	r22, 0x02	; 2
     7f0:	44 cd       	rjmp	.-1400   	; 0x27a <sysclk_enable_module>
     7f2:	22 e0       	ldi	r18, 0x02	; 2
     7f4:	80 34       	cpi	r24, 0x40	; 64
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     7f6:	92 07       	cpc	r25, r18
     7f8:	61 f4       	brne	.+24     	; 0x812 <adc_enable_clock+0x40>
     7fa:	80 91 0b 21 	lds	r24, 0x210B
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     7fe:	98 2f       	mov	r25, r24
     800:	9f 5f       	subi	r25, 0xFF	; 255
     802:	90 93 0b 21 	sts	0x210B, r25
     806:	88 23       	and	r24, r24
     808:	21 f4       	brne	.+8      	; 0x812 <adc_enable_clock+0x40>
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	90 e0       	ldi	r25, 0x00	; 0
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     80e:	62 e0       	ldi	r22, 0x02	; 2
     810:	34 cd       	rjmp	.-1432   	; 0x27a <sysclk_enable_module>
     812:	08 95       	ret

00000814 <adc_disable_clock>:
     814:	22 e0       	ldi	r18, 0x02	; 2
     816:	80 30       	cpi	r24, 0x00	; 0
     818:	92 07       	cpc	r25, r18
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     81a:	59 f4       	brne	.+22     	; 0x832 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     81c:	80 91 0a 21 	lds	r24, 0x210A
     820:	81 50       	subi	r24, 0x01	; 1
     822:	80 93 0a 21 	sts	0x210A, r24
     826:	88 23       	and	r24, r24
     828:	99 f4       	brne	.+38     	; 0x850 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	62 e0       	ldi	r22, 0x02	; 2
     830:	2f cd       	rjmp	.-1442   	; 0x290 <sysclk_disable_module>
     832:	22 e0       	ldi	r18, 0x02	; 2
     834:	80 34       	cpi	r24, 0x40	; 64
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     836:	92 07       	cpc	r25, r18
     838:	59 f4       	brne	.+22     	; 0x850 <adc_disable_clock+0x3c>
     83a:	80 91 0b 21 	lds	r24, 0x210B
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     83e:	81 50       	subi	r24, 0x01	; 1
     840:	80 93 0b 21 	sts	0x210B, r24
     844:	88 23       	and	r24, r24
     846:	21 f4       	brne	.+8      	; 0x850 <adc_disable_clock+0x3c>
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	90 e0       	ldi	r25, 0x00	; 0
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     84c:	62 e0       	ldi	r22, 0x02	; 2
     84e:	20 cd       	rjmp	.-1472   	; 0x290 <sysclk_disable_module>
     850:	08 95       	ret

00000852 <adc_enable>:
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     858:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     85a:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     85c:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     85e:	b9 df       	rcall	.-142    	; 0x7d2 <adc_enable_clock>
     860:	88 81       	ld	r24, Y
	adc->CTRLA |= ADC_ENABLE_bm;
     862:	81 60       	ori	r24, 0x01	; 1
     864:	88 83       	st	Y, r24
     866:	1f bf       	out	0x3f, r17	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     868:	8f b7       	in	r24, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     86a:	f8 94       	cli
	cpu_irq_disable();
     86c:	90 91 3d 21 	lds	r25, 0x213D
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     870:	9f 5f       	subi	r25, 0xFF	; 255
     872:	90 93 3d 21 	sts	0x213D, r25
     876:	8f bf       	out	0x3f, r24	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     878:	df 91       	pop	r29
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	08 95       	ret

00000880 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     880:	1f 92       	push	r1
     882:	0f 92       	push	r0
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	0f 92       	push	r0
     888:	0b b6       	in	r0, 0x3b	; 59
     88a:	0f 92       	push	r0
     88c:	11 24       	eor	r1, r1
     88e:	2f 93       	push	r18
     890:	3f 93       	push	r19
     892:	4f 93       	push	r20
     894:	5f 93       	push	r21
     896:	6f 93       	push	r22
     898:	7f 93       	push	r23
     89a:	8f 93       	push	r24
     89c:	9f 93       	push	r25
     89e:	af 93       	push	r26
     8a0:	bf 93       	push	r27
     8a2:	ef 93       	push	r30
     8a4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     8a6:	e0 e0       	ldi	r30, 0x00	; 0
     8a8:	f2 e0       	ldi	r31, 0x02	; 2
     8aa:	44 a1       	lds	r20, 0x44
     8ac:	55 a1       	lds	r21, 0x45
     8ae:	e0 91 44 21 	lds	r30, 0x2144
     8b2:	f0 91 45 21 	lds	r31, 0x2145
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	09 95       	icall
}
     8be:	ff 91       	pop	r31
     8c0:	ef 91       	pop	r30
     8c2:	bf 91       	pop	r27
     8c4:	af 91       	pop	r26
     8c6:	9f 91       	pop	r25
     8c8:	8f 91       	pop	r24
     8ca:	7f 91       	pop	r23
     8cc:	6f 91       	pop	r22
     8ce:	5f 91       	pop	r21
     8d0:	4f 91       	pop	r20
     8d2:	3f 91       	pop	r19
     8d4:	2f 91       	pop	r18
     8d6:	0f 90       	pop	r0
     8d8:	0b be       	out	0x3b, r0	; 59
     8da:	0f 90       	pop	r0
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	0f 90       	pop	r0
     8e0:	1f 90       	pop	r1
     8e2:	18 95       	reti

000008e4 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     8e4:	1f 92       	push	r1
     8e6:	0f 92       	push	r0
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	0f 92       	push	r0
     8ec:	0b b6       	in	r0, 0x3b	; 59
     8ee:	0f 92       	push	r0
     8f0:	11 24       	eor	r1, r1
     8f2:	2f 93       	push	r18
     8f4:	3f 93       	push	r19
     8f6:	4f 93       	push	r20
     8f8:	5f 93       	push	r21
     8fa:	6f 93       	push	r22
     8fc:	7f 93       	push	r23
     8fe:	8f 93       	push	r24
     900:	9f 93       	push	r25
     902:	af 93       	push	r26
     904:	bf 93       	push	r27
     906:	ef 93       	push	r30
     908:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     90a:	e0 e0       	ldi	r30, 0x00	; 0
     90c:	f2 e0       	ldi	r31, 0x02	; 2
     90e:	44 a5       	lds	r20, 0x64
     910:	55 a5       	lds	r21, 0x65
     912:	e0 91 44 21 	lds	r30, 0x2144
     916:	f0 91 45 21 	lds	r31, 0x2145
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	62 e0       	ldi	r22, 0x02	; 2
     920:	09 95       	icall
}
     922:	ff 91       	pop	r31
     924:	ef 91       	pop	r30
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	0f 90       	pop	r0
     93c:	0b be       	out	0x3b, r0	; 59
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	0b b6       	in	r0, 0x3b	; 59
     952:	0f 92       	push	r0
     954:	11 24       	eor	r1, r1
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     96e:	e0 e0       	ldi	r30, 0x00	; 0
     970:	f2 e0       	ldi	r31, 0x02	; 2
     972:	44 a9       	sts	0x44, r20
     974:	55 a9       	sts	0x45, r21
     976:	e0 91 44 21 	lds	r30, 0x2144
     97a:	f0 91 45 21 	lds	r31, 0x2145
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	64 e0       	ldi	r22, 0x04	; 4
     984:	09 95       	icall
}
     986:	ff 91       	pop	r31
     988:	ef 91       	pop	r30
     98a:	bf 91       	pop	r27
     98c:	af 91       	pop	r26
     98e:	9f 91       	pop	r25
     990:	8f 91       	pop	r24
     992:	7f 91       	pop	r23
     994:	6f 91       	pop	r22
     996:	5f 91       	pop	r21
     998:	4f 91       	pop	r20
     99a:	3f 91       	pop	r19
     99c:	2f 91       	pop	r18
     99e:	0f 90       	pop	r0
     9a0:	0b be       	out	0x3b, r0	; 59
     9a2:	0f 90       	pop	r0
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	0f 90       	pop	r0
     9a8:	1f 90       	pop	r1
     9aa:	18 95       	reti

000009ac <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	0b b6       	in	r0, 0x3b	; 59
     9b6:	0f 92       	push	r0
     9b8:	11 24       	eor	r1, r1
     9ba:	2f 93       	push	r18
     9bc:	3f 93       	push	r19
     9be:	4f 93       	push	r20
     9c0:	5f 93       	push	r21
     9c2:	6f 93       	push	r22
     9c4:	7f 93       	push	r23
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	af 93       	push	r26
     9cc:	bf 93       	push	r27
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     9d2:	e0 e0       	ldi	r30, 0x00	; 0
     9d4:	f2 e0       	ldi	r31, 0x02	; 2
     9d6:	44 ad       	sts	0x64, r20
     9d8:	55 ad       	sts	0x65, r21
     9da:	e0 91 44 21 	lds	r30, 0x2144
     9de:	f0 91 45 21 	lds	r31, 0x2145
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	68 e0       	ldi	r22, 0x08	; 8
     9e8:	09 95       	icall
}
     9ea:	ff 91       	pop	r31
     9ec:	ef 91       	pop	r30
     9ee:	bf 91       	pop	r27
     9f0:	af 91       	pop	r26
     9f2:	9f 91       	pop	r25
     9f4:	8f 91       	pop	r24
     9f6:	7f 91       	pop	r23
     9f8:	6f 91       	pop	r22
     9fa:	5f 91       	pop	r21
     9fc:	4f 91       	pop	r20
     9fe:	3f 91       	pop	r19
     a00:	2f 91       	pop	r18
     a02:	0f 90       	pop	r0
     a04:	0b be       	out	0x3b, r0	; 59
     a06:	0f 90       	pop	r0
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	0f 90       	pop	r0
     a0c:	1f 90       	pop	r1
     a0e:	18 95       	reti

00000a10 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     a10:	1f 92       	push	r1
     a12:	0f 92       	push	r0
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	0f 92       	push	r0
     a18:	0b b6       	in	r0, 0x3b	; 59
     a1a:	0f 92       	push	r0
     a1c:	11 24       	eor	r1, r1
     a1e:	2f 93       	push	r18
     a20:	3f 93       	push	r19
     a22:	4f 93       	push	r20
     a24:	5f 93       	push	r21
     a26:	6f 93       	push	r22
     a28:	7f 93       	push	r23
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	af 93       	push	r26
     a30:	bf 93       	push	r27
     a32:	ef 93       	push	r30
     a34:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     a36:	e0 e4       	ldi	r30, 0x40	; 64
     a38:	f2 e0       	ldi	r31, 0x02	; 2
     a3a:	44 a1       	lds	r20, 0x44
     a3c:	55 a1       	lds	r21, 0x45
     a3e:	e0 91 42 21 	lds	r30, 0x2142
     a42:	f0 91 43 21 	lds	r31, 0x2143
     a46:	80 e4       	ldi	r24, 0x40	; 64
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	09 95       	icall
}
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0b be       	out	0x3b, r0	; 59
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	0b b6       	in	r0, 0x3b	; 59
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     a9a:	e0 e4       	ldi	r30, 0x40	; 64
     a9c:	f2 e0       	ldi	r31, 0x02	; 2
     a9e:	44 a5       	lds	r20, 0x64
     aa0:	55 a5       	lds	r21, 0x65
     aa2:	e0 91 42 21 	lds	r30, 0x2142
     aa6:	f0 91 43 21 	lds	r31, 0x2143
     aaa:	80 e4       	ldi	r24, 0x40	; 64
     aac:	92 e0       	ldi	r25, 0x02	; 2
     aae:	62 e0       	ldi	r22, 0x02	; 2
     ab0:	09 95       	icall
}
     ab2:	ff 91       	pop	r31
     ab4:	ef 91       	pop	r30
     ab6:	bf 91       	pop	r27
     ab8:	af 91       	pop	r26
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	7f 91       	pop	r23
     ac0:	6f 91       	pop	r22
     ac2:	5f 91       	pop	r21
     ac4:	4f 91       	pop	r20
     ac6:	3f 91       	pop	r19
     ac8:	2f 91       	pop	r18
     aca:	0f 90       	pop	r0
     acc:	0b be       	out	0x3b, r0	; 59
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	0f 92       	push	r0
     ae0:	0b b6       	in	r0, 0x3b	; 59
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     afe:	e0 e4       	ldi	r30, 0x40	; 64
     b00:	f2 e0       	ldi	r31, 0x02	; 2
     b02:	44 a9       	sts	0x44, r20
     b04:	55 a9       	sts	0x45, r21
     b06:	e0 91 42 21 	lds	r30, 0x2142
     b0a:	f0 91 43 21 	lds	r31, 0x2143
     b0e:	80 e4       	ldi	r24, 0x40	; 64
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	64 e0       	ldi	r22, 0x04	; 4
     b14:	09 95       	icall
}
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	bf 91       	pop	r27
     b1c:	af 91       	pop	r26
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	7f 91       	pop	r23
     b24:	6f 91       	pop	r22
     b26:	5f 91       	pop	r21
     b28:	4f 91       	pop	r20
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0b be       	out	0x3b, r0	; 59
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0
     b38:	1f 90       	pop	r1
     b3a:	18 95       	reti

00000b3c <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     b3c:	1f 92       	push	r1
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	0f 92       	push	r0
     b44:	0b b6       	in	r0, 0x3b	; 59
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	2f 93       	push	r18
     b4c:	3f 93       	push	r19
     b4e:	4f 93       	push	r20
     b50:	5f 93       	push	r21
     b52:	6f 93       	push	r22
     b54:	7f 93       	push	r23
     b56:	8f 93       	push	r24
     b58:	9f 93       	push	r25
     b5a:	af 93       	push	r26
     b5c:	bf 93       	push	r27
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     b62:	e0 e4       	ldi	r30, 0x40	; 64
     b64:	f2 e0       	ldi	r31, 0x02	; 2
     b66:	44 ad       	sts	0x64, r20
     b68:	55 ad       	sts	0x65, r21
     b6a:	e0 91 42 21 	lds	r30, 0x2142
     b6e:	f0 91 43 21 	lds	r31, 0x2143
     b72:	80 e4       	ldi	r24, 0x40	; 64
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	68 e0       	ldi	r22, 0x08	; 8
     b78:	09 95       	icall
}
     b7a:	ff 91       	pop	r31
     b7c:	ef 91       	pop	r30
     b7e:	bf 91       	pop	r27
     b80:	af 91       	pop	r26
     b82:	9f 91       	pop	r25
     b84:	8f 91       	pop	r24
     b86:	7f 91       	pop	r23
     b88:	6f 91       	pop	r22
     b8a:	5f 91       	pop	r21
     b8c:	4f 91       	pop	r20
     b8e:	3f 91       	pop	r19
     b90:	2f 91       	pop	r18
     b92:	0f 90       	pop	r0
     b94:	0b be       	out	0x3b, r0	; 59
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	0f 90       	pop	r0
     b9c:	1f 90       	pop	r1
     b9e:	18 95       	reti

00000ba0 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     ba0:	df 92       	push	r13
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	8c 01       	movw	r16, r24
     bb0:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	00 30       	cpi	r16, 0x00	; 0
     bb6:	18 07       	cpc	r17, r24
     bb8:	81 f4       	brne	.+32     	; 0xbda <adc_write_configuration+0x3a>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	61 e2       	ldi	r22, 0x21	; 33
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	e8 d0       	rcall	.+464    	; 0xd92 <nvm_read_byte>
     bc2:	c8 2f       	mov	r28, r24
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	60 e2       	ldi	r22, 0x20	; 32
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	e3 d0       	rcall	.+454    	; 0xd92 <nvm_read_byte>
     bcc:	3c 2f       	mov	r19, r28
     bce:	20 e0       	ldi	r18, 0x00	; 0

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
		data <<= 8;
     bd0:	c8 2f       	mov	r28, r24
     bd2:	d0 e0       	ldi	r29, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCACAL0);
     bd4:	c2 2b       	or	r28, r18
     bd6:	d3 2b       	or	r29, r19
     bd8:	13 c0       	rjmp	.+38     	; 0xc00 <adc_write_configuration+0x60>
     bda:	e2 e0       	ldi	r30, 0x02	; 2
     bdc:	00 34       	cpi	r16, 0x40	; 64
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     bde:	1e 07       	cpc	r17, r30
     be0:	c9 f5       	brne	.+114    	; 0xc54 <adc_write_configuration+0xb4>
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	65 e2       	ldi	r22, 0x25	; 37
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	d4 d0       	rcall	.+424    	; 0xd92 <nvm_read_byte>
     bea:	c8 2f       	mov	r28, r24
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	64 e2       	ldi	r22, 0x24	; 36
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	cf d0       	rcall	.+414    	; 0xd92 <nvm_read_byte>
     bf4:	3c 2f       	mov	r19, r28
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	c8 2f       	mov	r28, r24
     bfa:	d0 e0       	ldi	r29, 0x00	; 0
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
		data <<= 8;
     bfc:	c2 2b       	or	r28, r18
     bfe:	d3 2b       	or	r29, r19
		data |= nvm_read_production_signature_row(ADCBCAL0);
     c00:	df b6       	in	r13, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	c8 01       	movw	r24, r16
     c06:	e5 dd       	rcall	.-1078   	; 0x7d2 <adc_enable_clock>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     c08:	f8 01       	movw	r30, r16
	cpu_irq_disable();
     c0a:	20 81       	ld	r18, Z
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	80 83       	st	Z, r24
     c10:	c4 87       	std	Z+12, r28	; 0x0c
	enable = adc->CTRLA & ADC_ENABLE_bm;
     c12:	d5 87       	std	Z+13, r29	; 0x0d
     c14:	f7 01       	movw	r30, r14

	adc->CTRLA = ADC_FLUSH_bm;
     c16:	85 81       	ldd	r24, Z+5	; 0x05
     c18:	96 81       	ldd	r25, Z+6	; 0x06
	adc->CAL = cal;
     c1a:	f8 01       	movw	r30, r16
     c1c:	80 8f       	std	Z+24, r24	; 0x18
	adc->CMP = conf->cmp;
     c1e:	91 8f       	std	Z+25, r25	; 0x19
     c20:	f7 01       	movw	r30, r14
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	f8 01       	movw	r30, r16
     c26:	82 83       	std	Z+2, r24	; 0x02
     c28:	f7 01       	movw	r30, r14
	adc->REFCTRL = conf->refctrl;
     c2a:	84 81       	ldd	r24, Z+4	; 0x04
     c2c:	f8 01       	movw	r30, r16
     c2e:	84 83       	std	Z+4, r24	; 0x04
     c30:	f7 01       	movw	r30, r14
	adc->PRESCALER = conf->prescaler;
     c32:	83 81       	ldd	r24, Z+3	; 0x03
     c34:	f8 01       	movw	r30, r16
     c36:	83 83       	std	Z+3, r24	; 0x03
     c38:	f7 01       	movw	r30, r14
	adc->EVCTRL = conf->evctrl;
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	f8 01       	movw	r30, r16
     c3e:	81 83       	std	Z+1, r24	; 0x01
     c40:	82 2f       	mov	r24, r18
	adc->CTRLB = conf->ctrlb;
     c42:	81 70       	andi	r24, 0x01	; 1
     c44:	f7 01       	movw	r30, r14
     c46:	90 81       	ld	r25, Z
     c48:	89 2b       	or	r24, r25
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
     c4a:	f8 01       	movw	r30, r16
     c4c:	80 83       	st	Z, r24
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
     c4e:	c8 01       	movw	r24, r16
     c50:	e1 dd       	rcall	.-1086   	; 0x814 <adc_disable_clock>
     c52:	df be       	out	0x3f, r13	; 63
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28

	adc_disable_clock(adc);
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c5e:	ef 90       	pop	r14

	cpu_irq_restore(flags);
}
     c60:	df 90       	pop	r13
     c62:	08 95       	ret

00000c64 <adc_read_configuration>:
     c64:	ff 92       	push	r15
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	ec 01       	movw	r28, r24
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     c70:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     c72:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     c74:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     c76:	ad dd       	rcall	.-1190   	; 0x7d2 <adc_enable_clock>
     c78:	88 81       	ld	r24, Y

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     c7a:	80 7c       	andi	r24, 0xC0	; 192
     c7c:	f8 01       	movw	r30, r16
     c7e:	80 83       	st	Z, r24
     c80:	88 8d       	ldd	r24, Y+24	; 0x18

	conf->cmp = adc->CMP;
     c82:	99 8d       	ldd	r25, Y+25	; 0x19
     c84:	85 83       	std	Z+5, r24	; 0x05
     c86:	96 83       	std	Z+6, r25	; 0x06
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->refctrl = adc->REFCTRL;
     c8a:	82 83       	std	Z+2, r24	; 0x02
     c8c:	8c 81       	ldd	r24, Y+4	; 0x04
	conf->prescaler = adc->PRESCALER;
     c8e:	84 83       	std	Z+4, r24	; 0x04
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
	conf->evctrl = adc->EVCTRL;
     c92:	83 83       	std	Z+3, r24	; 0x03
     c94:	89 81       	ldd	r24, Y+1	; 0x01
	conf->ctrlb = adc->CTRLB;
     c96:	81 83       	std	Z+1, r24	; 0x01
     c98:	ce 01       	movw	r24, r28

	adc_disable_clock(adc);
     c9a:	bc dd       	rcall	.-1160   	; 0x814 <adc_disable_clock>
     c9c:	ff be       	out	0x3f, r15	; 63
     c9e:	df 91       	pop	r29
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ca0:	cf 91       	pop	r28

	cpu_irq_restore(flags);
}
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	08 95       	ret

00000caa <adcch_write_configuration>:
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	6c 01       	movw	r12, r24
     cba:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     cbc:	86 2f       	mov	r24, r22
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	83 70       	andi	r24, 0x03	; 3
     cc2:	90 70       	andi	r25, 0x00	; 0
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	21 f4       	brne	.+8      	; 0xcd0 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     cc8:	66 95       	lsr	r22
     cca:	66 95       	lsr	r22
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     ccc:	c2 e0       	ldi	r28, 0x02	; 2
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <adcch_write_configuration+0x28>
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     cd0:	c0 e0       	ldi	r28, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     cd2:	60 ff       	sbrs	r22, 0
		index++;
     cd4:	cf 5f       	subi	r28, 0xFF	; 255
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
     cd6:	c6 01       	movw	r24, r12
     cd8:	80 96       	adiw	r24, 0x20	; 32
     cda:	d0 e0       	ldi	r29, 0x00	; 0
     cdc:	cc 0f       	add	r28, r28
     cde:	dd 1f       	adc	r29, r29
     ce0:	cc 0f       	add	r28, r28
     ce2:	dd 1f       	adc	r29, r29
     ce4:	cc 0f       	add	r28, r28
     ce6:	dd 1f       	adc	r29, r29
     ce8:	c8 0f       	add	r28, r24
     cea:	d9 1f       	adc	r29, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     cec:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     cee:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     cf0:	c6 01       	movw	r24, r12
     cf2:	6f dd       	rcall	.-1314   	; 0x7d2 <adc_enable_clock>
     cf4:	f7 01       	movw	r30, r14
	adc_ch->CTRL = ch_conf->ctrl;
     cf6:	80 81       	ld	r24, Z
     cf8:	88 83       	st	Y, r24
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
	adc_ch->INTCTRL = ch_conf->intctrl;
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	81 81       	ldd	r24, Z+1	; 0x01
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	c6 01       	movw	r24, r12
	if (ch_mask & ADC_CH0) {
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
	}
#endif
	adc_disable_clock(adc);
     d04:	87 dd       	rcall	.-1266   	; 0x814 <adc_disable_clock>
     d06:	1f bf       	out	0x3f, r17	; 63
     d08:	df 91       	pop	r29
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d0a:	cf 91       	pop	r28

	cpu_irq_restore(flags);
}
     d0c:	1f 91       	pop	r17
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	df 90       	pop	r13
     d14:	cf 90       	pop	r12
     d16:	08 95       	ret

00000d18 <adcch_read_configuration>:
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	6c 01       	movw	r12, r24
     d28:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     d2a:	86 2f       	mov	r24, r22
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	83 70       	andi	r24, 0x03	; 3
     d30:	90 70       	andi	r25, 0x00	; 0
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	21 f4       	brne	.+8      	; 0xd3e <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     d36:	66 95       	lsr	r22
     d38:	66 95       	lsr	r22
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     d3a:	c2 e0       	ldi	r28, 0x02	; 2
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <adcch_read_configuration+0x28>
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     d3e:	c0 e0       	ldi	r28, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     d40:	60 ff       	sbrs	r22, 0
		index++;
     d42:	cf 5f       	subi	r28, 0xFF	; 255
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
     d44:	c6 01       	movw	r24, r12
     d46:	80 96       	adiw	r24, 0x20	; 32
     d48:	d0 e0       	ldi	r29, 0x00	; 0
     d4a:	cc 0f       	add	r28, r28
     d4c:	dd 1f       	adc	r29, r29
     d4e:	cc 0f       	add	r28, r28
     d50:	dd 1f       	adc	r29, r29
     d52:	cc 0f       	add	r28, r28
     d54:	dd 1f       	adc	r29, r29
     d56:	c8 0f       	add	r28, r24
     d58:	d9 1f       	adc	r29, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d5a:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     d5c:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     d5e:	c6 01       	movw	r24, r12
     d60:	38 dd       	rcall	.-1424   	; 0x7d2 <adc_enable_clock>
     d62:	88 81       	ld	r24, Y
	ch_conf->ctrl = adc_ch->CTRL;
     d64:	f7 01       	movw	r30, r14
     d66:	80 83       	st	Z, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
	ch_conf->intctrl = adc_ch->INTCTRL;
     d6a:	82 83       	std	Z+2, r24	; 0x02
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     d6e:	81 83       	std	Z+1, r24	; 0x01
     d70:	c6 01       	movw	r24, r12
	if (ch_mask & ADC_CH0) {
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
	}
#endif
	adc_disable_clock(adc);
     d72:	50 dd       	rcall	.-1376   	; 0x814 <adc_disable_clock>
     d74:	1f bf       	out	0x3f, r17	; 63
     d76:	df 91       	pop	r29
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d78:	cf 91       	pop	r28

	cpu_irq_restore(flags);
}
     d7a:	1f 91       	pop	r17
     d7c:	ff 90       	pop	r15
     d7e:	ef 90       	pop	r14
     d80:	df 90       	pop	r13
     d82:	cf 90       	pop	r12
     d84:	08 95       	ret

00000d86 <ccp_write_io>:
     d86:	1b be       	out	0x3b, r1	; 59
     d88:	fc 01       	movw	r30, r24
     d8a:	28 ed       	ldi	r18, 0xD8	; 216
     d8c:	24 bf       	out	0x34, r18	; 52
     d8e:	60 83       	st	Z, r22
     d90:	08 95       	ret

00000d92 <nvm_read_byte>:
     d92:	40 91 ca 01 	lds	r20, 0x01CA
     d96:	e6 2f       	mov	r30, r22
     d98:	f7 2f       	mov	r31, r23
     d9a:	80 93 ca 01 	sts	0x01CA, r24
     d9e:	84 91       	lpm	r24, Z
     da0:	40 93 ca 01 	sts	0x01CA, r20
     da4:	08 95       	ret

00000da6 <spi_xmega_set_baud_div>:
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ec 01       	movw	r28, r24
     db8:	6a 01       	movw	r12, r20
     dba:	7b 01       	movw	r14, r22
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	a1 09       	sbc	r26, r1
     dc4:	b1 09       	sbc	r27, r1
     dc6:	08 0f       	add	r16, r24
     dc8:	19 1f       	adc	r17, r25
     dca:	2a 1f       	adc	r18, r26
     dcc:	3b 1f       	adc	r19, r27
     dce:	c9 01       	movw	r24, r18
     dd0:	b8 01       	movw	r22, r16
     dd2:	a7 01       	movw	r20, r14
     dd4:	96 01       	movw	r18, r12
     dd6:	7a d4       	rcall	.+2292   	; 0x16cc <__udivmodsi4>
     dd8:	89 01       	movw	r16, r18
     dda:	9a 01       	movw	r18, r20
     ddc:	01 38       	cpi	r16, 0x81	; 129
     dde:	11 05       	cpc	r17, r1
     de0:	21 05       	cpc	r18, r1
     de2:	31 05       	cpc	r19, r1
     de4:	f8 f4       	brcc	.+62     	; 0xe24 <spi_xmega_set_baud_div+0x7e>
     de6:	01 34       	cpi	r16, 0x41	; 65
     de8:	60 f4       	brcc	.+24     	; 0xe02 <spi_xmega_set_baud_div+0x5c>
     dea:	01 32       	cpi	r16, 0x21	; 33
     dec:	60 f4       	brcc	.+24     	; 0xe06 <spi_xmega_set_baud_div+0x60>
     dee:	01 31       	cpi	r16, 0x11	; 17
     df0:	60 f4       	brcc	.+24     	; 0xe0a <spi_xmega_set_baud_div+0x64>
     df2:	09 30       	cpi	r16, 0x09	; 9
     df4:	60 f4       	brcc	.+24     	; 0xe0e <spi_xmega_set_baud_div+0x68>
     df6:	05 30       	cpi	r16, 0x05	; 5
     df8:	60 f4       	brcc	.+24     	; 0xe12 <spi_xmega_set_baud_div+0x6c>
     dfa:	03 30       	cpi	r16, 0x03	; 3
     dfc:	60 f0       	brcs	.+24     	; 0xe16 <spi_xmega_set_baud_div+0x70>
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0b c0       	rjmp	.+22     	; 0xe18 <spi_xmega_set_baud_div+0x72>
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	09 c0       	rjmp	.+18     	; 0xe18 <spi_xmega_set_baud_div+0x72>
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <spi_xmega_set_baud_div+0x72>
     e0a:	92 e8       	ldi	r25, 0x82	; 130
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <spi_xmega_set_baud_div+0x72>
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <spi_xmega_set_baud_div+0x72>
     e12:	91 e8       	ldi	r25, 0x81	; 129
     e14:	01 c0       	rjmp	.+2      	; 0xe18 <spi_xmega_set_baud_div+0x72>
     e16:	90 e8       	ldi	r25, 0x80	; 128
     e18:	88 81       	ld	r24, Y
     e1a:	8c 77       	andi	r24, 0x7C	; 124
     e1c:	89 2b       	or	r24, r25
     e1e:	88 83       	st	Y, r24
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <spi_xmega_set_baud_div+0x80>
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	08 95       	ret

00000e38 <usart_putchar>:
 * \param c The data to send.
 *
 * \return STATUS_OK
 */
enum status_code usart_putchar(USART_t *usart, uint8_t c)
{
     e38:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     e3a:	81 81       	ldd	r24, Z+1	; 0x01
	while (usart_data_register_is_empty(usart) == false) {
     e3c:	85 ff       	sbrs	r24, 5
     e3e:	fd cf       	rjmp	.-6      	; 0xe3a <usart_putchar+0x2>
	}
	
	(usart)->DATA = c;
     e40:	60 83       	st	Z, r22
	return STATUS_OK;
}
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	08 95       	ret

00000e48 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     e48:	6f 92       	push	r6
     e4a:	7f 92       	push	r7
     e4c:	8f 92       	push	r8
     e4e:	9f 92       	push	r9
     e50:	af 92       	push	r10
     e52:	bf 92       	push	r11
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	3c 01       	movw	r6, r24
     e64:	4a 01       	movw	r8, r20
     e66:	5b 01       	movw	r10, r22
     e68:	68 01       	movw	r12, r16
     e6a:	79 01       	movw	r14, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     e6c:	d9 01       	movw	r26, r18
     e6e:	c8 01       	movw	r24, r16
     e70:	68 94       	set
     e72:	12 f8       	bld	r1, 2
     e74:	b6 95       	lsr	r27
     e76:	a7 95       	ror	r26
     e78:	97 95       	ror	r25
     e7a:	87 95       	ror	r24
     e7c:	16 94       	lsr	r1
     e7e:	d1 f7       	brne	.-12     	; 0xe74 <usart_set_baudrate+0x2c>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     e80:	b9 01       	movw	r22, r18
     e82:	a8 01       	movw	r20, r16
     e84:	03 2e       	mov	r0, r19
     e86:	36 e1       	ldi	r19, 0x16	; 22
     e88:	76 95       	lsr	r23
     e8a:	67 95       	ror	r22
     e8c:	57 95       	ror	r21
     e8e:	47 95       	ror	r20
     e90:	3a 95       	dec	r19
     e92:	d1 f7       	brne	.-12     	; 0xe88 <usart_set_baudrate+0x40>
     e94:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     e96:	f3 01       	movw	r30, r6
     e98:	24 81       	ldd	r18, Z+4	; 0x04
     e9a:	22 fd       	sbrc	r18, 2
     e9c:	08 c0       	rjmp	.+16     	; 0xeae <usart_set_baudrate+0x66>
		max_rate /= 2;
     e9e:	b6 95       	lsr	r27
     ea0:	a7 95       	ror	r26
     ea2:	97 95       	ror	r25
     ea4:	87 95       	ror	r24
		min_rate /= 2;
     ea6:	76 95       	lsr	r23
     ea8:	67 95       	ror	r22
     eaa:	57 95       	ror	r21
     eac:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     eae:	88 15       	cp	r24, r8
     eb0:	99 05       	cpc	r25, r9
     eb2:	aa 05       	cpc	r26, r10
     eb4:	bb 05       	cpc	r27, r11
     eb6:	08 f4       	brcc	.+2      	; 0xeba <usart_set_baudrate+0x72>
     eb8:	be c0       	rjmp	.+380    	; 0x1036 <usart_set_baudrate+0x1ee>
     eba:	84 16       	cp	r8, r20
     ebc:	95 06       	cpc	r9, r21
     ebe:	a6 06       	cpc	r10, r22
     ec0:	b7 06       	cpc	r11, r23
     ec2:	08 f4       	brcc	.+2      	; 0xec6 <usart_set_baudrate+0x7e>
     ec4:	ba c0       	rjmp	.+372    	; 0x103a <usart_set_baudrate+0x1f2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     ec6:	d3 01       	movw	r26, r6
     ec8:	14 96       	adiw	r26, 0x04	; 4
     eca:	8c 91       	ld	r24, X
     ecc:	14 97       	sbiw	r26, 0x04	; 4
     ece:	82 fd       	sbrc	r24, 2
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <usart_set_baudrate+0x92>
		baud *= 2;
     ed2:	88 0c       	add	r8, r8
     ed4:	99 1c       	adc	r9, r9
     ed6:	aa 1c       	adc	r10, r10
     ed8:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     eda:	c7 01       	movw	r24, r14
     edc:	b6 01       	movw	r22, r12
     ede:	a5 01       	movw	r20, r10
     ee0:	94 01       	movw	r18, r8
     ee2:	f4 d3       	rcall	.+2024   	; 0x16cc <__udivmodsi4>
     ee4:	89 01       	movw	r16, r18
     ee6:	9a 01       	movw	r18, r20
     ee8:	0f 3f       	cpi	r16, 0xFF	; 255

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     eea:	11 05       	cpc	r17, r1
     eec:	21 05       	cpc	r18, r1
     eee:	31 05       	cpc	r19, r1
     ef0:	08 f4       	brcc	.+2      	; 0xef4 <usart_set_baudrate+0xac>
     ef2:	b2 c0       	rjmp	.+356    	; 0x1058 <usart_set_baudrate+0x210>
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	c9 ef       	ldi	r28, 0xF9	; 249
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     efe:	05 c0       	rjmp	.+10     	; 0xf0a <usart_set_baudrate+0xc2>
     f00:	08 17       	cp	r16, r24
		if (ratio < limit) {
     f02:	19 07       	cpc	r17, r25
     f04:	2a 07       	cpc	r18, r26
     f06:	3b 07       	cpc	r19, r27
     f08:	60 f0       	brcs	.+24     	; 0xf22 <usart_set_baudrate+0xda>
     f0a:	88 0f       	add	r24, r24
			break;
		}

		limit <<= 1;
     f0c:	99 1f       	adc	r25, r25
     f0e:	aa 1f       	adc	r26, r26
     f10:	bb 1f       	adc	r27, r27
     f12:	cd 3f       	cpi	r28, 0xFD	; 253

		if (exp < -3) {
     f14:	0c f4       	brge	.+2      	; 0xf18 <usart_set_baudrate+0xd0>
     f16:	81 60       	ori	r24, 0x01	; 1
			limit |= 1;
     f18:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     f1a:	c7 30       	cpi	r28, 0x07	; 7
     f1c:	89 f7       	brne	.-30     	; 0xf00 <usart_set_baudrate+0xb8>
     f1e:	2c 2f       	mov	r18, r28
     f20:	5b c0       	rjmp	.+182    	; 0xfd8 <usart_set_baudrate+0x190>
     f22:	2c 2f       	mov	r18, r28
     f24:	cc 23       	and	r28, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     f26:	0c f0       	brlt	.+2      	; 0xf2a <usart_set_baudrate+0xe2>
     f28:	57 c0       	rjmp	.+174    	; 0xfd8 <usart_set_baudrate+0x190>
     f2a:	d5 01       	movw	r26, r10
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     f2c:	c4 01       	movw	r24, r8
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	aa 1f       	adc	r26, r26
     f34:	bb 1f       	adc	r27, r27
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	aa 1f       	adc	r26, r26
     f3c:	bb 1f       	adc	r27, r27
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	aa 1f       	adc	r26, r26
     f44:	bb 1f       	adc	r27, r27
     f46:	c8 1a       	sub	r12, r24
     f48:	d9 0a       	sbc	r13, r25
     f4a:	ea 0a       	sbc	r14, r26
     f4c:	fb 0a       	sbc	r15, r27
     f4e:	ce 3f       	cpi	r28, 0xFE	; 254
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     f50:	2c f5       	brge	.+74     	; 0xf9c <usart_set_baudrate+0x154>
     f52:	8c 2f       	mov	r24, r28
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     f54:	99 27       	eor	r25, r25
     f56:	87 fd       	sbrc	r24, 7
     f58:	90 95       	com	r25
     f5a:	4d ef       	ldi	r20, 0xFD	; 253
     f5c:	5f ef       	ldi	r21, 0xFF	; 255
     f5e:	48 1b       	sub	r20, r24
     f60:	59 0b       	sbc	r21, r25
     f62:	d7 01       	movw	r26, r14
     f64:	c6 01       	movw	r24, r12
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <usart_set_baudrate+0x128>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	4a 95       	dec	r20
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <usart_set_baudrate+0x120>
     f74:	ac 01       	movw	r20, r24
     f76:	bd 01       	movw	r22, r26
     f78:	d5 01       	movw	r26, r10
     f7a:	c4 01       	movw	r24, r8
     f7c:	b6 95       	lsr	r27
     f7e:	a7 95       	ror	r26
     f80:	97 95       	ror	r25
     f82:	87 95       	ror	r24
     f84:	84 0f       	add	r24, r20
     f86:	95 1f       	adc	r25, r21
     f88:	a6 1f       	adc	r26, r22
     f8a:	b7 1f       	adc	r27, r23
     f8c:	bc 01       	movw	r22, r24
     f8e:	cd 01       	movw	r24, r26
     f90:	a5 01       	movw	r20, r10
     f92:	94 01       	movw	r18, r8
     f94:	9b d3       	rcall	.+1846   	; 0x16cc <__udivmodsi4>
     f96:	89 01       	movw	r16, r18
     f98:	9a 01       	movw	r18, r20
     f9a:	3f c0       	rjmp	.+126    	; 0x101a <usart_set_baudrate+0x1d2>
     f9c:	8c 2f       	mov	r24, r28
     f9e:	99 27       	eor	r25, r25
		} else {
			baud <<= exp + 3;
     fa0:	87 fd       	sbrc	r24, 7
     fa2:	90 95       	com	r25
     fa4:	03 96       	adiw	r24, 0x03	; 3
     fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <usart_set_baudrate+0x168>
     fa8:	88 0c       	add	r8, r8
     faa:	99 1c       	adc	r9, r9
     fac:	aa 1c       	adc	r10, r10
     fae:	bb 1c       	adc	r11, r11
     fb0:	8a 95       	dec	r24
     fb2:	d2 f7       	brpl	.-12     	; 0xfa8 <usart_set_baudrate+0x160>
     fb4:	b5 01       	movw	r22, r10
     fb6:	a4 01       	movw	r20, r8
			div = (cpu_hz + baud / 2) / baud;
     fb8:	76 95       	lsr	r23
     fba:	67 95       	ror	r22
     fbc:	57 95       	ror	r21
     fbe:	47 95       	ror	r20
     fc0:	cb 01       	movw	r24, r22
     fc2:	ba 01       	movw	r22, r20
     fc4:	6c 0d       	add	r22, r12
     fc6:	7d 1d       	adc	r23, r13
     fc8:	8e 1d       	adc	r24, r14
     fca:	9f 1d       	adc	r25, r15
     fcc:	a5 01       	movw	r20, r10
     fce:	94 01       	movw	r18, r8
     fd0:	7d d3       	rcall	.+1786   	; 0x16cc <__udivmodsi4>
     fd2:	89 01       	movw	r16, r18
     fd4:	9a 01       	movw	r18, r20
     fd6:	21 c0       	rjmp	.+66     	; 0x101a <usart_set_baudrate+0x1d2>
     fd8:	33 27       	eor	r19, r19
     fda:	27 fd       	sbrc	r18, 7
     fdc:	30 95       	com	r19
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     fde:	2d 5f       	subi	r18, 0xFD	; 253
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
     fe2:	d5 01       	movw	r26, r10
     fe4:	c4 01       	movw	r24, r8
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <usart_set_baudrate+0x1a8>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	aa 1f       	adc	r26, r26
     fee:	bb 1f       	adc	r27, r27
     ff0:	2a 95       	dec	r18
     ff2:	d2 f7       	brpl	.-12     	; 0xfe8 <usart_set_baudrate+0x1a0>
     ff4:	9c 01       	movw	r18, r24
     ff6:	ad 01       	movw	r20, r26
     ff8:	b6 95       	lsr	r27
     ffa:	a7 95       	ror	r26
     ffc:	97 95       	ror	r25
		div = (cpu_hz + baud / 2) / baud - 1;
     ffe:	87 95       	ror	r24
    1000:	c8 0e       	add	r12, r24
    1002:	d9 1e       	adc	r13, r25
    1004:	ea 1e       	adc	r14, r26
    1006:	fb 1e       	adc	r15, r27
    1008:	c7 01       	movw	r24, r14
    100a:	b6 01       	movw	r22, r12
    100c:	5f d3       	rcall	.+1726   	; 0x16cc <__udivmodsi4>
    100e:	89 01       	movw	r16, r18
    1010:	9a 01       	movw	r18, r20
    1012:	01 50       	subi	r16, 0x01	; 1
    1014:	10 40       	sbci	r17, 0x00	; 0
    1016:	20 40       	sbci	r18, 0x00	; 0
    1018:	30 40       	sbci	r19, 0x00	; 0
    101a:	81 2f       	mov	r24, r17
    101c:	8f 70       	andi	r24, 0x0F	; 15
    101e:	c2 95       	swap	r28
    1020:	c0 7f       	andi	r28, 0xF0	; 240
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1022:	c8 2b       	or	r28, r24
    1024:	d3 01       	movw	r26, r6
    1026:	17 96       	adiw	r26, 0x07	; 7
    1028:	cc 93       	st	X, r28
    102a:	17 97       	sbiw	r26, 0x07	; 7
    102c:	16 96       	adiw	r26, 0x06	; 6
    102e:	0c 93       	st	X, r16
    1030:	16 97       	sbiw	r26, 0x06	; 6
    1032:	81 e0       	ldi	r24, 0x01	; 1
	(usart)->BAUDCTRLA = (uint8_t)div;
    1034:	03 c0       	rjmp	.+6      	; 0x103c <usart_set_baudrate+0x1f4>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	01 c0       	rjmp	.+2      	; 0x103c <usart_set_baudrate+0x1f4>

	return true;
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	cf 91       	pop	r28
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	bf 90       	pop	r11
    104c:	af 90       	pop	r10
    104e:	9f 90       	pop	r9
    1050:	8f 90       	pop	r8
    1052:	7f 90       	pop	r7
    1054:	6f 90       	pop	r6
    1056:	08 95       	ret
    1058:	d5 01       	movw	r26, r10
    105a:	c4 01       	movw	r24, r8
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1060:	aa 1f       	adc	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	aa 1f       	adc	r26, r26
    106a:	bb 1f       	adc	r27, r27
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	aa 1f       	adc	r26, r26
    1072:	bb 1f       	adc	r27, r27
    1074:	c8 1a       	sub	r12, r24
    1076:	d9 0a       	sbc	r13, r25
    1078:	ea 0a       	sbc	r14, r26
    107a:	fb 0a       	sbc	r15, r27
    107c:	c9 ef       	ldi	r28, 0xF9	; 249
    107e:	69 cf       	rjmp	.-302    	; 0xf52 <usart_set_baudrate+0x10a>

00001080 <usart_init_rs232>:
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1088:	ec 01       	movw	r28, r24
    108a:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTC0
	if ((uintptr_t)usart == (uintptr_t)&USARTC0) {
    108c:	88 e0       	ldi	r24, 0x08	; 8
    108e:	c0 3a       	cpi	r28, 0xA0	; 160
    1090:	d8 07       	cpc	r29, r24
    1092:	29 f4       	brne	.+10     	; 0x109e <usart_init_rs232+0x1e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1094:	83 e0       	ldi	r24, 0x03	; 3
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	60 e1       	ldi	r22, 0x10	; 16
    109a:	ef d8       	rcall	.-3618   	; 0x27a <sysclk_enable_module>
    109c:	12 c0       	rjmp	.+36     	; 0x10c2 <usart_init_rs232+0x42>
    109e:	e8 e0       	ldi	r30, 0x08	; 8
	}
#endif
#ifdef USARTC1
	if ((uintptr_t)usart == (uintptr_t)&USARTC1) {
    10a0:	c0 3b       	cpi	r28, 0xB0	; 176
    10a2:	de 07       	cpc	r29, r30
    10a4:	29 f4       	brne	.+10     	; 0x10b0 <usart_init_rs232+0x30>
    10a6:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	60 e2       	ldi	r22, 0x20	; 32
    10ac:	e6 d8       	rcall	.-3636   	; 0x27a <sysclk_enable_module>
    10ae:	12 c0       	rjmp	.+36     	; 0x10d4 <usart_init_rs232+0x54>
    10b0:	f9 e0       	ldi	r31, 0x09	; 9
    10b2:	c0 3a       	cpi	r28, 0xA0	; 160
	}
#endif
#ifdef USARTD0
	if ((uintptr_t)usart == (uintptr_t)&USARTD0) {
    10b4:	df 07       	cpc	r29, r31
    10b6:	29 f4       	brne	.+10     	; 0x10c2 <usart_init_rs232+0x42>
    10b8:	84 e0       	ldi	r24, 0x04	; 4
    10ba:	90 e0       	ldi	r25, 0x00	; 0
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    10bc:	60 e1       	ldi	r22, 0x10	; 16
    10be:	dd d8       	rcall	.-3654   	; 0x27a <sysclk_enable_module>
    10c0:	12 c0       	rjmp	.+36     	; 0x10e6 <usart_init_rs232+0x66>
    10c2:	89 e0       	ldi	r24, 0x09	; 9
    10c4:	c0 3b       	cpi	r28, 0xB0	; 176
    10c6:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef USARTD1
	if ((uintptr_t)usart == (uintptr_t)&USARTD1) {
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <usart_init_rs232+0x54>
    10ca:	84 e0       	ldi	r24, 0x04	; 4
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    10d0:	d4 d8       	rcall	.-3672   	; 0x27a <sysclk_enable_module>
    10d2:	12 c0       	rjmp	.+36     	; 0x10f8 <usart_init_rs232+0x78>
    10d4:	ea e0       	ldi	r30, 0x0A	; 10
    10d6:	c0 3a       	cpi	r28, 0xA0	; 160
    10d8:	de 07       	cpc	r29, r30
    10da:	29 f4       	brne	.+10     	; 0x10e6 <usart_init_rs232+0x66>
	}
#endif
#ifdef USARTE0
	if ((uintptr_t)usart == (uintptr_t)&USARTE0) {
    10dc:	85 e0       	ldi	r24, 0x05	; 5
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	60 e1       	ldi	r22, 0x10	; 16
    10e2:	cb d8       	rcall	.-3690   	; 0x27a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    10e4:	12 c0       	rjmp	.+36     	; 0x110a <usart_init_rs232+0x8a>
    10e6:	fa e0       	ldi	r31, 0x0A	; 10
    10e8:	c0 3b       	cpi	r28, 0xB0	; 176
    10ea:	df 07       	cpc	r29, r31
    10ec:	29 f4       	brne	.+10     	; 0x10f8 <usart_init_rs232+0x78>
    10ee:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTE1
	if ((uintptr_t)usart == (uintptr_t)&USARTE1) {
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	60 e2       	ldi	r22, 0x20	; 32
    10f4:	c2 d8       	rcall	.-3708   	; 0x27a <sysclk_enable_module>
    10f6:	11 c0       	rjmp	.+34     	; 0x111a <usart_init_rs232+0x9a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    10f8:	8b e0       	ldi	r24, 0x0B	; 11
    10fa:	c0 3a       	cpi	r28, 0xA0	; 160
    10fc:	d8 07       	cpc	r29, r24
    10fe:	29 f4       	brne	.+10     	; 0x110a <usart_init_rs232+0x8a>
    1100:	86 e0       	ldi	r24, 0x06	; 6
    1102:	90 e0       	ldi	r25, 0x00	; 0
	}
#endif
#ifdef USARTF0
	if ((uintptr_t)usart == (uintptr_t)&USARTF0) {
    1104:	60 e1       	ldi	r22, 0x10	; 16
    1106:	b9 d8       	rcall	.-3726   	; 0x27a <sysclk_enable_module>
    1108:	08 c0       	rjmp	.+16     	; 0x111a <usart_init_rs232+0x9a>
    110a:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    110c:	c0 3b       	cpi	r28, 0xB0	; 176
    110e:	de 07       	cpc	r29, r30
    1110:	21 f4       	brne	.+8      	; 0x111a <usart_init_rs232+0x9a>
    1112:	86 e0       	ldi	r24, 0x06	; 6
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTF1
	if ((uintptr_t)usart == (uintptr_t)&USARTF1) {
    1118:	b0 d8       	rcall	.-3744   	; 0x27a <sysclk_enable_module>
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	8f 73       	andi	r24, 0x3F	; 63
    111e:	8d 83       	std	Y+5, r24	; 0x05
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1120:	f8 01       	movw	r30, r16
    1122:	96 81       	ldd	r25, Z+6	; 0x06
    1124:	84 81       	ldd	r24, Z+4	; 0x04
    1126:	89 2b       	or	r24, r25
    1128:	90 85       	ldd	r25, Z+8	; 0x08
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    112a:	99 23       	and	r25, r25
    112c:	11 f0       	breq	.+4      	; 0x1132 <usart_init_rs232+0xb2>
    112e:	98 e0       	ldi	r25, 0x08	; 8
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <usart_init_rs232+0xb4>
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	89 2b       	or	r24, r25
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	f8 01       	movw	r30, r16
    113a:	40 81       	ld	r20, Z
    113c:	51 81       	ldd	r21, Z+1	; 0x01
    113e:	62 81       	ldd	r22, Z+2	; 0x02
    1140:	73 81       	ldd	r23, Z+3	; 0x03
    1142:	ce 01       	movw	r24, r28
    1144:	00 e0       	ldi	r16, 0x00	; 0
    1146:	12 e1       	ldi	r17, 0x12	; 18
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1148:	2a e7       	ldi	r18, 0x7A	; 122
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	7d de       	rcall	.-774    	; 0xe48 <usart_set_baudrate>
    114e:	9c 81       	ldd	r25, Y+4	; 0x04
    1150:	98 60       	ori	r25, 0x08	; 8
    1152:	9c 83       	std	Y+4, r25	; 0x04
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	90 61       	ori	r25, 0x10	; 16
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1160:	0f 91       	pop	r16
    1162:	08 95       	ret

00001164 <usart_serial_write_string>:
	usart_serial_write_string(USART_SERIAL, msg);
}

//Neat function to write a null terminating string
status_code_t usart_serial_write_string(usart_if usart, char *str)
{
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	8c 01       	movw	r16, r24
    116e:	eb 01       	movw	r28, r22
	while (*str != '\0') {
    1170:	68 81       	ld	r22, Y
    1172:	66 23       	and	r22, r22
    1174:	31 f0       	breq	.+12     	; 0x1182 <usart_serial_write_string+0x1e>
	sprintf(msg, "ISENSE_LOAD=%umA\r\n", bcr_adc.ISENSE_LOAD>>1);
	usart_serial_write_string(USART_SERIAL, msg);
}

//Neat function to write a null terminating string
status_code_t usart_serial_write_string(usart_if usart, char *str)
    1176:	21 96       	adiw	r28, 0x01	; 1
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1178:	c8 01       	movw	r24, r16
    117a:	5e de       	rcall	.-836    	; 0xe38 <usart_putchar>
    117c:	69 91       	ld	r22, Y+
{
	while (*str != '\0') {
    117e:	66 23       	and	r22, r22
    1180:	d9 f7       	brne	.-10     	; 0x1178 <usart_serial_write_string+0x14>
    1182:	80 e0       	ldi	r24, 0x00	; 0
		usart_serial_putchar(usart, *str);
		str++;
	}
	return STATUS_OK;
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	08 95       	ret

00001190 <print_adc>:
    1190:	0f 93       	push	r16
	}	
}

// Test DAC and ADC
void print_adc (void)
{
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	a8 97       	sbiw	r28, 0x28	; 40
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	de bf       	out	0x3e, r29	; 62
	char msg[40];
		
	sprintf(msg, "VREF=%umV\r\n", bcr_adc.VREF>>1);
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <print_adc+0x14>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <print_adc+0x16>
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <print_adc+0x18>
    11a8:	ed b7       	in	r30, 0x3d	; 61
    11aa:	fe b7       	in	r31, 0x3e	; 62
    11ac:	31 96       	adiw	r30, 0x01	; 1
    11ae:	8e 01       	movw	r16, r28
    11b0:	0f 5f       	subi	r16, 0xFF	; 255
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	ad b7       	in	r26, 0x3d	; 61
    11b6:	be b7       	in	r27, 0x3e	; 62
    11b8:	11 96       	adiw	r26, 0x01	; 1
    11ba:	0d 93       	st	X+, r16
    11bc:	1c 93       	st	X, r17
    11be:	12 97       	sbiw	r26, 0x02	; 2
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e2       	ldi	r25, 0x20	; 32
    11c4:	82 83       	std	Z+2, r24	; 0x02
    11c6:	93 83       	std	Z+3, r25	; 0x03
    11c8:	80 91 1c 21 	lds	r24, 0x211C
    11cc:	90 91 1d 21 	lds	r25, 0x211D
    11d0:	96 95       	lsr	r25
    11d2:	87 95       	ror	r24
    11d4:	84 83       	std	Z+4, r24	; 0x04
    11d6:	95 83       	std	Z+5, r25	; 0x05
    11d8:	9b d2       	rcall	.+1334   	; 0x1710 <sprintf>
    11da:	8d b7       	in	r24, 0x3d	; 61
	usart_serial_write_string(USART_SERIAL, msg);
    11dc:	9e b7       	in	r25, 0x3e	; 62
    11de:	06 96       	adiw	r24, 0x06	; 6
    11e0:	8d bf       	out	0x3d, r24	; 61
    11e2:	9e bf       	out	0x3e, r25	; 62
    11e4:	80 ea       	ldi	r24, 0xA0	; 160
    11e6:	9a e0       	ldi	r25, 0x0A	; 10
    11e8:	b8 01       	movw	r22, r16
    11ea:	bc df       	rcall	.-136    	; 0x1164 <usart_serial_write_string>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <print_adc+0x5e>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <print_adc+0x60>
	sprintf(msg, "ISENSE_XP=%umA\r\n", bcr_adc.ISENSE_XP>>1);
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <print_adc+0x62>
    11f2:	ed b7       	in	r30, 0x3d	; 61
    11f4:	fe b7       	in	r31, 0x3e	; 62
    11f6:	31 96       	adiw	r30, 0x01	; 1
    11f8:	ad b7       	in	r26, 0x3d	; 61
    11fa:	be b7       	in	r27, 0x3e	; 62
    11fc:	11 96       	adiw	r26, 0x01	; 1
    11fe:	0d 93       	st	X+, r16
    1200:	1c 93       	st	X, r17
    1202:	12 97       	sbiw	r26, 0x02	; 2
    1204:	8c e0       	ldi	r24, 0x0C	; 12
    1206:	90 e2       	ldi	r25, 0x20	; 32
    1208:	82 83       	std	Z+2, r24	; 0x02
    120a:	93 83       	std	Z+3, r25	; 0x03
    120c:	80 91 1e 21 	lds	r24, 0x211E
    1210:	90 91 1f 21 	lds	r25, 0x211F
    1214:	96 95       	lsr	r25
    1216:	87 95       	ror	r24
    1218:	84 83       	std	Z+4, r24	; 0x04
    121a:	95 83       	std	Z+5, r25	; 0x05
    121c:	79 d2       	rcall	.+1266   	; 0x1710 <sprintf>
    121e:	8d b7       	in	r24, 0x3d	; 61
    1220:	9e b7       	in	r25, 0x3e	; 62
    1222:	06 96       	adiw	r24, 0x06	; 6
	usart_serial_write_string(USART_SERIAL, msg);
    1224:	8d bf       	out	0x3d, r24	; 61
    1226:	9e bf       	out	0x3e, r25	; 62
    1228:	80 ea       	ldi	r24, 0xA0	; 160
    122a:	9a e0       	ldi	r25, 0x0A	; 10
    122c:	b8 01       	movw	r22, r16
    122e:	9a df       	rcall	.-204    	; 0x1164 <usart_serial_write_string>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <print_adc+0xa2>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <print_adc+0xa4>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <print_adc+0xa6>
    1236:	ed b7       	in	r30, 0x3d	; 61
	sprintf(msg, "VSENSE_XP=%umV\r\n", (bcr_adc.VSENSE_XP>>1)*4);
    1238:	fe b7       	in	r31, 0x3e	; 62
    123a:	31 96       	adiw	r30, 0x01	; 1
    123c:	ad b7       	in	r26, 0x3d	; 61
    123e:	be b7       	in	r27, 0x3e	; 62
    1240:	11 96       	adiw	r26, 0x01	; 1
    1242:	0d 93       	st	X+, r16
    1244:	1c 93       	st	X, r17
    1246:	12 97       	sbiw	r26, 0x02	; 2
    1248:	8d e1       	ldi	r24, 0x1D	; 29
    124a:	90 e2       	ldi	r25, 0x20	; 32
    124c:	82 83       	std	Z+2, r24	; 0x02
    124e:	93 83       	std	Z+3, r25	; 0x03
    1250:	80 91 20 21 	lds	r24, 0x2120
    1254:	90 91 21 21 	lds	r25, 0x2121
    1258:	96 95       	lsr	r25
    125a:	87 95       	ror	r24
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	84 83       	std	Z+4, r24	; 0x04
    1266:	95 83       	std	Z+5, r25	; 0x05
    1268:	53 d2       	rcall	.+1190   	; 0x1710 <sprintf>
    126a:	8d b7       	in	r24, 0x3d	; 61
    126c:	9e b7       	in	r25, 0x3e	; 62
    126e:	06 96       	adiw	r24, 0x06	; 6
    1270:	8d bf       	out	0x3d, r24	; 61
    1272:	9e bf       	out	0x3e, r25	; 62
	usart_serial_write_string(USART_SERIAL, msg);
    1274:	80 ea       	ldi	r24, 0xA0	; 160
    1276:	9a e0       	ldi	r25, 0x0A	; 10
    1278:	b8 01       	movw	r22, r16
    127a:	74 df       	rcall	.-280    	; 0x1164 <usart_serial_write_string>
    127c:	00 d0       	rcall	.+0      	; 0x127e <print_adc+0xee>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <print_adc+0xf0>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <print_adc+0xf2>
    1282:	ed b7       	in	r30, 0x3d	; 61
    1284:	fe b7       	in	r31, 0x3e	; 62
    1286:	31 96       	adiw	r30, 0x01	; 1
	sprintf(msg, "ISENSE_YP=%umA\r\n", bcr_adc.ISENSE_YP>>1);
    1288:	ad b7       	in	r26, 0x3d	; 61
    128a:	be b7       	in	r27, 0x3e	; 62
    128c:	11 96       	adiw	r26, 0x01	; 1
    128e:	0d 93       	st	X+, r16
    1290:	1c 93       	st	X, r17
    1292:	12 97       	sbiw	r26, 0x02	; 2
    1294:	8e e2       	ldi	r24, 0x2E	; 46
    1296:	90 e2       	ldi	r25, 0x20	; 32
    1298:	82 83       	std	Z+2, r24	; 0x02
    129a:	93 83       	std	Z+3, r25	; 0x03
    129c:	80 91 22 21 	lds	r24, 0x2122
    12a0:	90 91 23 21 	lds	r25, 0x2123
    12a4:	96 95       	lsr	r25
    12a6:	87 95       	ror	r24
    12a8:	84 83       	std	Z+4, r24	; 0x04
    12aa:	95 83       	std	Z+5, r25	; 0x05
    12ac:	31 d2       	rcall	.+1122   	; 0x1710 <sprintf>
    12ae:	8d b7       	in	r24, 0x3d	; 61
    12b0:	9e b7       	in	r25, 0x3e	; 62
    12b2:	06 96       	adiw	r24, 0x06	; 6
    12b4:	8d bf       	out	0x3d, r24	; 61
    12b6:	9e bf       	out	0x3e, r25	; 62
    12b8:	80 ea       	ldi	r24, 0xA0	; 160
    12ba:	9a e0       	ldi	r25, 0x0A	; 10
	usart_serial_write_string(USART_SERIAL, msg);
    12bc:	b8 01       	movw	r22, r16
    12be:	52 df       	rcall	.-348    	; 0x1164 <usart_serial_write_string>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <print_adc+0x132>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <print_adc+0x134>
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <print_adc+0x136>
    12c6:	ed b7       	in	r30, 0x3d	; 61
    12c8:	fe b7       	in	r31, 0x3e	; 62
    12ca:	31 96       	adiw	r30, 0x01	; 1
    12cc:	ad b7       	in	r26, 0x3d	; 61
    12ce:	be b7       	in	r27, 0x3e	; 62
	sprintf(msg, "VSENSE_YP=%umV\r\n", (bcr_adc.VSENSE_YP>>1)*4);
    12d0:	11 96       	adiw	r26, 0x01	; 1
    12d2:	0d 93       	st	X+, r16
    12d4:	1c 93       	st	X, r17
    12d6:	12 97       	sbiw	r26, 0x02	; 2
    12d8:	8f e3       	ldi	r24, 0x3F	; 63
    12da:	90 e2       	ldi	r25, 0x20	; 32
    12dc:	82 83       	std	Z+2, r24	; 0x02
    12de:	93 83       	std	Z+3, r25	; 0x03
    12e0:	80 91 24 21 	lds	r24, 0x2124
    12e4:	90 91 25 21 	lds	r25, 0x2125
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	84 83       	std	Z+4, r24	; 0x04
    12f6:	95 83       	std	Z+5, r25	; 0x05
    12f8:	0b d2       	rcall	.+1046   	; 0x1710 <sprintf>
    12fa:	8d b7       	in	r24, 0x3d	; 61
    12fc:	9e b7       	in	r25, 0x3e	; 62
    12fe:	06 96       	adiw	r24, 0x06	; 6
    1300:	8d bf       	out	0x3d, r24	; 61
    1302:	9e bf       	out	0x3e, r25	; 62
    1304:	80 ea       	ldi	r24, 0xA0	; 160
    1306:	9a e0       	ldi	r25, 0x0A	; 10
    1308:	b8 01       	movw	r22, r16
    130a:	2c df       	rcall	.-424    	; 0x1164 <usart_serial_write_string>
	usart_serial_write_string(USART_SERIAL, msg);
    130c:	00 d0       	rcall	.+0      	; 0x130e <print_adc+0x17e>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <print_adc+0x180>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <print_adc+0x182>
    1312:	ed b7       	in	r30, 0x3d	; 61
    1314:	fe b7       	in	r31, 0x3e	; 62
    1316:	31 96       	adiw	r30, 0x01	; 1
    1318:	ad b7       	in	r26, 0x3d	; 61
    131a:	be b7       	in	r27, 0x3e	; 62
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	0d 93       	st	X+, r16
	sprintf(msg, "ISENSE_ZP=%umA\r\n", bcr_adc.ISENSE_ZP>>1);
    1320:	1c 93       	st	X, r17
    1322:	12 97       	sbiw	r26, 0x02	; 2
    1324:	80 e5       	ldi	r24, 0x50	; 80
    1326:	90 e2       	ldi	r25, 0x20	; 32
    1328:	82 83       	std	Z+2, r24	; 0x02
    132a:	93 83       	std	Z+3, r25	; 0x03
    132c:	80 91 26 21 	lds	r24, 0x2126
    1330:	90 91 27 21 	lds	r25, 0x2127
    1334:	96 95       	lsr	r25
    1336:	87 95       	ror	r24
    1338:	84 83       	std	Z+4, r24	; 0x04
    133a:	95 83       	std	Z+5, r25	; 0x05
    133c:	e9 d1       	rcall	.+978    	; 0x1710 <sprintf>
    133e:	8d b7       	in	r24, 0x3d	; 61
    1340:	9e b7       	in	r25, 0x3e	; 62
    1342:	06 96       	adiw	r24, 0x06	; 6
    1344:	8d bf       	out	0x3d, r24	; 61
    1346:	9e bf       	out	0x3e, r25	; 62
    1348:	80 ea       	ldi	r24, 0xA0	; 160
    134a:	9a e0       	ldi	r25, 0x0A	; 10
    134c:	b8 01       	movw	r22, r16
    134e:	0a df       	rcall	.-492    	; 0x1164 <usart_serial_write_string>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <print_adc+0x1c2>
    1352:	00 d0       	rcall	.+0      	; 0x1354 <print_adc+0x1c4>
	usart_serial_write_string(USART_SERIAL, msg);
    1354:	00 d0       	rcall	.+0      	; 0x1356 <print_adc+0x1c6>
    1356:	ed b7       	in	r30, 0x3d	; 61
    1358:	fe b7       	in	r31, 0x3e	; 62
    135a:	31 96       	adiw	r30, 0x01	; 1
    135c:	ad b7       	in	r26, 0x3d	; 61
    135e:	be b7       	in	r27, 0x3e	; 62
    1360:	11 96       	adiw	r26, 0x01	; 1
    1362:	0d 93       	st	X+, r16
    1364:	1c 93       	st	X, r17
    1366:	12 97       	sbiw	r26, 0x02	; 2
	sprintf(msg, "VSENSE_ZP=%umV\r\n", (bcr_adc.VSENSE_ZP>>1)*4);
    1368:	81 e6       	ldi	r24, 0x61	; 97
    136a:	90 e2       	ldi	r25, 0x20	; 32
    136c:	82 83       	std	Z+2, r24	; 0x02
    136e:	93 83       	std	Z+3, r25	; 0x03
    1370:	80 91 28 21 	lds	r24, 0x2128
    1374:	90 91 29 21 	lds	r25, 0x2129
    1378:	96 95       	lsr	r25
    137a:	87 95       	ror	r24
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	84 83       	std	Z+4, r24	; 0x04
    1386:	95 83       	std	Z+5, r25	; 0x05
    1388:	c3 d1       	rcall	.+902    	; 0x1710 <sprintf>
    138a:	8d b7       	in	r24, 0x3d	; 61
    138c:	9e b7       	in	r25, 0x3e	; 62
    138e:	06 96       	adiw	r24, 0x06	; 6
    1390:	8d bf       	out	0x3d, r24	; 61
    1392:	9e bf       	out	0x3e, r25	; 62
    1394:	80 ea       	ldi	r24, 0xA0	; 160
    1396:	9a e0       	ldi	r25, 0x0A	; 10
    1398:	b8 01       	movw	r22, r16
    139a:	e4 de       	rcall	.-568    	; 0x1164 <usart_serial_write_string>
    139c:	00 d0       	rcall	.+0      	; 0x139e <print_adc+0x20e>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <print_adc+0x210>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <print_adc+0x212>
    13a2:	ed b7       	in	r30, 0x3d	; 61
	usart_serial_write_string(USART_SERIAL, msg);
    13a4:	fe b7       	in	r31, 0x3e	; 62
    13a6:	31 96       	adiw	r30, 0x01	; 1
    13a8:	ad b7       	in	r26, 0x3d	; 61
    13aa:	be b7       	in	r27, 0x3e	; 62
    13ac:	11 96       	adiw	r26, 0x01	; 1
    13ae:	0d 93       	st	X+, r16
    13b0:	1c 93       	st	X, r17
    13b2:	12 97       	sbiw	r26, 0x02	; 2
    13b4:	82 e7       	ldi	r24, 0x72	; 114
    13b6:	90 e2       	ldi	r25, 0x20	; 32
	sprintf(msg, "ISENSE_XM=%umA\r\n", bcr_adc.ISENSE_XM>>1);
    13b8:	82 83       	std	Z+2, r24	; 0x02
    13ba:	93 83       	std	Z+3, r25	; 0x03
    13bc:	80 91 2a 21 	lds	r24, 0x212A
    13c0:	90 91 2b 21 	lds	r25, 0x212B
    13c4:	96 95       	lsr	r25
    13c6:	87 95       	ror	r24
    13c8:	84 83       	std	Z+4, r24	; 0x04
    13ca:	95 83       	std	Z+5, r25	; 0x05
    13cc:	a1 d1       	rcall	.+834    	; 0x1710 <sprintf>
    13ce:	8d b7       	in	r24, 0x3d	; 61
    13d0:	9e b7       	in	r25, 0x3e	; 62
    13d2:	06 96       	adiw	r24, 0x06	; 6
    13d4:	8d bf       	out	0x3d, r24	; 61
    13d6:	9e bf       	out	0x3e, r25	; 62
    13d8:	80 ea       	ldi	r24, 0xA0	; 160
    13da:	9a e0       	ldi	r25, 0x0A	; 10
    13dc:	b8 01       	movw	r22, r16
    13de:	c2 de       	rcall	.-636    	; 0x1164 <usart_serial_write_string>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <print_adc+0x252>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <print_adc+0x254>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <print_adc+0x256>
    13e6:	ed b7       	in	r30, 0x3d	; 61
    13e8:	fe b7       	in	r31, 0x3e	; 62
    13ea:	31 96       	adiw	r30, 0x01	; 1
	usart_serial_write_string(USART_SERIAL, msg);
    13ec:	ad b7       	in	r26, 0x3d	; 61
    13ee:	be b7       	in	r27, 0x3e	; 62
    13f0:	11 96       	adiw	r26, 0x01	; 1
    13f2:	0d 93       	st	X+, r16
    13f4:	1c 93       	st	X, r17
    13f6:	12 97       	sbiw	r26, 0x02	; 2
    13f8:	83 e8       	ldi	r24, 0x83	; 131
    13fa:	90 e2       	ldi	r25, 0x20	; 32
    13fc:	82 83       	std	Z+2, r24	; 0x02
    13fe:	93 83       	std	Z+3, r25	; 0x03
	sprintf(msg, "VSENSE_XM=%umV\r\n", (bcr_adc.VSENSE_XM>>1)*4);
    1400:	80 91 2c 21 	lds	r24, 0x212C
    1404:	90 91 2d 21 	lds	r25, 0x212D
    1408:	96 95       	lsr	r25
    140a:	87 95       	ror	r24
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	84 83       	std	Z+4, r24	; 0x04
    1416:	95 83       	std	Z+5, r25	; 0x05
    1418:	7b d1       	rcall	.+758    	; 0x1710 <sprintf>
    141a:	8d b7       	in	r24, 0x3d	; 61
    141c:	9e b7       	in	r25, 0x3e	; 62
    141e:	06 96       	adiw	r24, 0x06	; 6
    1420:	8d bf       	out	0x3d, r24	; 61
    1422:	9e bf       	out	0x3e, r25	; 62
    1424:	80 ea       	ldi	r24, 0xA0	; 160
    1426:	9a e0       	ldi	r25, 0x0A	; 10
    1428:	b8 01       	movw	r22, r16
    142a:	9c de       	rcall	.-712    	; 0x1164 <usart_serial_write_string>
    142c:	00 d0       	rcall	.+0      	; 0x142e <print_adc+0x29e>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <print_adc+0x2a0>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <print_adc+0x2a2>
    1432:	ed b7       	in	r30, 0x3d	; 61
    1434:	fe b7       	in	r31, 0x3e	; 62
    1436:	31 96       	adiw	r30, 0x01	; 1
    1438:	ad b7       	in	r26, 0x3d	; 61
    143a:	be b7       	in	r27, 0x3e	; 62
	usart_serial_write_string(USART_SERIAL, msg);
    143c:	11 96       	adiw	r26, 0x01	; 1
    143e:	0d 93       	st	X+, r16
    1440:	1c 93       	st	X, r17
    1442:	12 97       	sbiw	r26, 0x02	; 2
    1444:	84 e9       	ldi	r24, 0x94	; 148
    1446:	90 e2       	ldi	r25, 0x20	; 32
    1448:	82 83       	std	Z+2, r24	; 0x02
    144a:	93 83       	std	Z+3, r25	; 0x03
    144c:	80 91 2e 21 	lds	r24, 0x212E
	sprintf(msg, "ISENSE_YM=%umA\r\n", bcr_adc.ISENSE_YM>>1);
    1450:	90 91 2f 21 	lds	r25, 0x212F
    1454:	96 95       	lsr	r25
    1456:	87 95       	ror	r24
    1458:	84 83       	std	Z+4, r24	; 0x04
    145a:	95 83       	std	Z+5, r25	; 0x05
    145c:	59 d1       	rcall	.+690    	; 0x1710 <sprintf>
    145e:	8d b7       	in	r24, 0x3d	; 61
    1460:	9e b7       	in	r25, 0x3e	; 62
    1462:	06 96       	adiw	r24, 0x06	; 6
    1464:	8d bf       	out	0x3d, r24	; 61
    1466:	9e bf       	out	0x3e, r25	; 62
    1468:	80 ea       	ldi	r24, 0xA0	; 160
    146a:	9a e0       	ldi	r25, 0x0A	; 10
    146c:	b8 01       	movw	r22, r16
    146e:	7a de       	rcall	.-780    	; 0x1164 <usart_serial_write_string>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <print_adc+0x2e2>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <print_adc+0x2e4>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <print_adc+0x2e6>
    1476:	ed b7       	in	r30, 0x3d	; 61
    1478:	fe b7       	in	r31, 0x3e	; 62
    147a:	31 96       	adiw	r30, 0x01	; 1
    147c:	ad b7       	in	r26, 0x3d	; 61
    147e:	be b7       	in	r27, 0x3e	; 62
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	0d 93       	st	X+, r16
	usart_serial_write_string(USART_SERIAL, msg);
    1484:	1c 93       	st	X, r17
    1486:	12 97       	sbiw	r26, 0x02	; 2
    1488:	85 ea       	ldi	r24, 0xA5	; 165
    148a:	90 e2       	ldi	r25, 0x20	; 32
    148c:	82 83       	std	Z+2, r24	; 0x02
    148e:	93 83       	std	Z+3, r25	; 0x03
    1490:	80 91 30 21 	lds	r24, 0x2130
    1494:	90 91 31 21 	lds	r25, 0x2131
	sprintf(msg, "VSENSE_YM=%umV\r\n", (bcr_adc.VSENSE_YM>>1)*4);
    1498:	96 95       	lsr	r25
    149a:	87 95       	ror	r24
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	84 83       	std	Z+4, r24	; 0x04
    14a6:	95 83       	std	Z+5, r25	; 0x05
    14a8:	33 d1       	rcall	.+614    	; 0x1710 <sprintf>
    14aa:	8d b7       	in	r24, 0x3d	; 61
    14ac:	9e b7       	in	r25, 0x3e	; 62
    14ae:	06 96       	adiw	r24, 0x06	; 6
    14b0:	8d bf       	out	0x3d, r24	; 61
    14b2:	9e bf       	out	0x3e, r25	; 62
    14b4:	80 ea       	ldi	r24, 0xA0	; 160
    14b6:	9a e0       	ldi	r25, 0x0A	; 10
    14b8:	b8 01       	movw	r22, r16
    14ba:	54 de       	rcall	.-856    	; 0x1164 <usart_serial_write_string>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <print_adc+0x32e>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <print_adc+0x330>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <print_adc+0x332>
    14c2:	ed b7       	in	r30, 0x3d	; 61
    14c4:	fe b7       	in	r31, 0x3e	; 62
    14c6:	31 96       	adiw	r30, 0x01	; 1
    14c8:	ad b7       	in	r26, 0x3d	; 61
    14ca:	be b7       	in	r27, 0x3e	; 62
    14cc:	11 96       	adiw	r26, 0x01	; 1
    14ce:	0d 93       	st	X+, r16
    14d0:	1c 93       	st	X, r17
    14d2:	12 97       	sbiw	r26, 0x02	; 2
	usart_serial_write_string(USART_SERIAL, msg);
    14d4:	86 eb       	ldi	r24, 0xB6	; 182
    14d6:	90 e2       	ldi	r25, 0x20	; 32
    14d8:	82 83       	std	Z+2, r24	; 0x02
    14da:	93 83       	std	Z+3, r25	; 0x03
    14dc:	80 91 32 21 	lds	r24, 0x2132
    14e0:	90 91 33 21 	lds	r25, 0x2133
    14e4:	96 95       	lsr	r25
    14e6:	87 95       	ror	r24
	sprintf(msg, "ISENSE_ZM=%umA\r\n", bcr_adc.ISENSE_ZM>>1);
    14e8:	84 83       	std	Z+4, r24	; 0x04
    14ea:	95 83       	std	Z+5, r25	; 0x05
    14ec:	11 d1       	rcall	.+546    	; 0x1710 <sprintf>
    14ee:	8d b7       	in	r24, 0x3d	; 61
    14f0:	9e b7       	in	r25, 0x3e	; 62
    14f2:	06 96       	adiw	r24, 0x06	; 6
    14f4:	8d bf       	out	0x3d, r24	; 61
    14f6:	9e bf       	out	0x3e, r25	; 62
    14f8:	80 ea       	ldi	r24, 0xA0	; 160
    14fa:	9a e0       	ldi	r25, 0x0A	; 10
    14fc:	b8 01       	movw	r22, r16
    14fe:	32 de       	rcall	.-924    	; 0x1164 <usart_serial_write_string>
    1500:	00 d0       	rcall	.+0      	; 0x1502 <print_adc+0x372>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <print_adc+0x374>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <print_adc+0x376>
    1506:	ed b7       	in	r30, 0x3d	; 61
    1508:	fe b7       	in	r31, 0x3e	; 62
    150a:	31 96       	adiw	r30, 0x01	; 1
    150c:	ad b7       	in	r26, 0x3d	; 61
    150e:	be b7       	in	r27, 0x3e	; 62
    1510:	11 96       	adiw	r26, 0x01	; 1
    1512:	0d 93       	st	X+, r16
    1514:	1c 93       	st	X, r17
    1516:	12 97       	sbiw	r26, 0x02	; 2
    1518:	87 ec       	ldi	r24, 0xC7	; 199
    151a:	90 e2       	ldi	r25, 0x20	; 32
	usart_serial_write_string(USART_SERIAL, msg);
    151c:	82 83       	std	Z+2, r24	; 0x02
    151e:	93 83       	std	Z+3, r25	; 0x03
    1520:	80 91 34 21 	lds	r24, 0x2134
    1524:	90 91 35 21 	lds	r25, 0x2135
    1528:	96 95       	lsr	r25
    152a:	87 95       	ror	r24
    152c:	84 83       	std	Z+4, r24	; 0x04
    152e:	95 83       	std	Z+5, r25	; 0x05
	sprintf(msg, "VGNDREF=%umV\r\n", bcr_adc.VGNDREF>>1);
    1530:	ef d0       	rcall	.+478    	; 0x1710 <sprintf>
    1532:	8d b7       	in	r24, 0x3d	; 61
    1534:	9e b7       	in	r25, 0x3e	; 62
    1536:	06 96       	adiw	r24, 0x06	; 6
    1538:	8d bf       	out	0x3d, r24	; 61
    153a:	9e bf       	out	0x3e, r25	; 62
    153c:	80 ea       	ldi	r24, 0xA0	; 160
    153e:	9a e0       	ldi	r25, 0x0A	; 10
    1540:	b8 01       	movw	r22, r16
    1542:	10 de       	rcall	.-992    	; 0x1164 <usart_serial_write_string>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <print_adc+0x3b6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <print_adc+0x3b8>
    1548:	00 d0       	rcall	.+0      	; 0x154a <print_adc+0x3ba>
    154a:	ed b7       	in	r30, 0x3d	; 61
    154c:	fe b7       	in	r31, 0x3e	; 62
    154e:	31 96       	adiw	r30, 0x01	; 1
    1550:	ad b7       	in	r26, 0x3d	; 61
    1552:	be b7       	in	r27, 0x3e	; 62
    1554:	11 96       	adiw	r26, 0x01	; 1
    1556:	0d 93       	st	X+, r16
    1558:	1c 93       	st	X, r17
    155a:	12 97       	sbiw	r26, 0x02	; 2
    155c:	86 ed       	ldi	r24, 0xD6	; 214
    155e:	90 e2       	ldi	r25, 0x20	; 32
    1560:	82 83       	std	Z+2, r24	; 0x02
    1562:	93 83       	std	Z+3, r25	; 0x03
	usart_serial_write_string(USART_SERIAL, msg);
    1564:	80 91 36 21 	lds	r24, 0x2136
    1568:	90 91 37 21 	lds	r25, 0x2137
    156c:	96 95       	lsr	r25
    156e:	87 95       	ror	r24
    1570:	84 83       	std	Z+4, r24	; 0x04
    1572:	95 83       	std	Z+5, r25	; 0x05
    1574:	cd d0       	rcall	.+410    	; 0x1710 <sprintf>
    1576:	8d b7       	in	r24, 0x3d	; 61
	sprintf(msg, "ADCB5=%umA\r\n", bcr_adc.ADCB5>>1);
    1578:	9e b7       	in	r25, 0x3e	; 62
    157a:	06 96       	adiw	r24, 0x06	; 6
    157c:	8d bf       	out	0x3d, r24	; 61
    157e:	9e bf       	out	0x3e, r25	; 62
    1580:	80 ea       	ldi	r24, 0xA0	; 160
    1582:	9a e0       	ldi	r25, 0x0A	; 10
    1584:	b8 01       	movw	r22, r16
    1586:	ee dd       	rcall	.-1060   	; 0x1164 <usart_serial_write_string>
    1588:	00 d0       	rcall	.+0      	; 0x158a <print_adc+0x3fa>
    158a:	00 d0       	rcall	.+0      	; 0x158c <print_adc+0x3fc>
    158c:	00 d0       	rcall	.+0      	; 0x158e <print_adc+0x3fe>
    158e:	ed b7       	in	r30, 0x3d	; 61
    1590:	fe b7       	in	r31, 0x3e	; 62
    1592:	31 96       	adiw	r30, 0x01	; 1
    1594:	ad b7       	in	r26, 0x3d	; 61
    1596:	be b7       	in	r27, 0x3e	; 62
    1598:	11 96       	adiw	r26, 0x01	; 1
    159a:	0d 93       	st	X+, r16
    159c:	1c 93       	st	X, r17
    159e:	12 97       	sbiw	r26, 0x02	; 2
    15a0:	83 ee       	ldi	r24, 0xE3	; 227
    15a2:	90 e2       	ldi	r25, 0x20	; 32
    15a4:	82 83       	std	Z+2, r24	; 0x02
    15a6:	93 83       	std	Z+3, r25	; 0x03
    15a8:	80 91 38 21 	lds	r24, 0x2138
	usart_serial_write_string(USART_SERIAL, msg);
    15ac:	90 91 39 21 	lds	r25, 0x2139
    15b0:	96 95       	lsr	r25
    15b2:	87 95       	ror	r24
    15b4:	82 95       	swap	r24
    15b6:	92 95       	swap	r25
    15b8:	90 7f       	andi	r25, 0xF0	; 240
    15ba:	98 27       	eor	r25, r24
    15bc:	80 7f       	andi	r24, 0xF0	; 240
    15be:	98 27       	eor	r25, r24
	sprintf(msg, "VSENSE_BAT=%umV\r\n", (bcr_adc.VSENSE_BAT>>1)*16);
    15c0:	84 83       	std	Z+4, r24	; 0x04
    15c2:	95 83       	std	Z+5, r25	; 0x05
    15c4:	a5 d0       	rcall	.+330    	; 0x1710 <sprintf>
    15c6:	8d b7       	in	r24, 0x3d	; 61
    15c8:	9e b7       	in	r25, 0x3e	; 62
    15ca:	06 96       	adiw	r24, 0x06	; 6
    15cc:	8d bf       	out	0x3d, r24	; 61
    15ce:	9e bf       	out	0x3e, r25	; 62
    15d0:	80 ea       	ldi	r24, 0xA0	; 160
    15d2:	9a e0       	ldi	r25, 0x0A	; 10
    15d4:	b8 01       	movw	r22, r16
    15d6:	c6 dd       	rcall	.-1140   	; 0x1164 <usart_serial_write_string>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <print_adc+0x44a>
    15da:	00 d0       	rcall	.+0      	; 0x15dc <print_adc+0x44c>
    15dc:	00 d0       	rcall	.+0      	; 0x15de <print_adc+0x44e>
    15de:	ed b7       	in	r30, 0x3d	; 61
    15e0:	fe b7       	in	r31, 0x3e	; 62
    15e2:	31 96       	adiw	r30, 0x01	; 1
    15e4:	ad b7       	in	r26, 0x3d	; 61
    15e6:	be b7       	in	r27, 0x3e	; 62
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	0d 93       	st	X+, r16
    15ec:	1c 93       	st	X, r17
    15ee:	12 97       	sbiw	r26, 0x02	; 2
    15f0:	85 ef       	ldi	r24, 0xF5	; 245
    15f2:	90 e2       	ldi	r25, 0x20	; 32
    15f4:	82 83       	std	Z+2, r24	; 0x02
    15f6:	93 83       	std	Z+3, r25	; 0x03
    15f8:	80 91 3a 21 	lds	r24, 0x213A
    15fc:	90 91 3b 21 	lds	r25, 0x213B
	usart_serial_write_string(USART_SERIAL, msg);
    1600:	96 95       	lsr	r25
    1602:	87 95       	ror	r24
    1604:	84 83       	std	Z+4, r24	; 0x04
    1606:	95 83       	std	Z+5, r25	; 0x05
    1608:	83 d0       	rcall	.+262    	; 0x1710 <sprintf>
    160a:	8d b7       	in	r24, 0x3d	; 61
    160c:	9e b7       	in	r25, 0x3e	; 62
    160e:	06 96       	adiw	r24, 0x06	; 6
    1610:	8d bf       	out	0x3d, r24	; 61
    1612:	9e bf       	out	0x3e, r25	; 62
	sprintf(msg, "ISENSE_LOAD=%umA\r\n", bcr_adc.ISENSE_LOAD>>1);
    1614:	80 ea       	ldi	r24, 0xA0	; 160
    1616:	9a e0       	ldi	r25, 0x0A	; 10
    1618:	b8 01       	movw	r22, r16
    161a:	a4 dd       	rcall	.-1208   	; 0x1164 <usart_serial_write_string>
    161c:	a8 96       	adiw	r28, 0x28	; 40
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	08 95       	ret

0000162c <main>:
    162c:	0e 94 05 02 	call	0x40a	; 0x40a <bcr_init>
    1630:	e0 ea       	ldi	r30, 0xA0	; 160
    1632:	f6 e0       	ldi	r31, 0x06	; 6
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	85 83       	std	Z+5, r24	; 0x05
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	85 83       	std	Z+5, r24	; 0x05
    163c:	84 e0       	ldi	r24, 0x04	; 4
    163e:	85 83       	std	Z+5, r24	; 0x05
    1640:	88 e0       	ldi	r24, 0x08	; 8
    1642:	85 83       	std	Z+5, r24	; 0x05
    1644:	80 e1       	ldi	r24, 0x10	; 16
    1646:	85 83       	std	Z+5, r24	; 0x05
	usart_serial_write_string(USART_SERIAL, msg);
    1648:	80 e2       	ldi	r24, 0x20	; 32
    164a:	85 83       	std	Z+5, r24	; 0x05
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	93 e0       	ldi	r25, 0x03	; 3
    1650:	80 93 1a 21 	sts	0x211A, r24
    1654:	90 93 1b 21 	sts	0x211B, r25
    1658:	5c d8       	rcall	.-3912   	; 0x712 <bcr_dac_update>
    165a:	0f 2e       	mov	r0, r31
}
    165c:	fa e2       	ldi	r31, 0x2A	; 42
    165e:	cf 2e       	mov	r12, r31
    1660:	fc e2       	ldi	r31, 0x2C	; 44
    1662:	df 2e       	mov	r13, r31
    1664:	fa e0       	ldi	r31, 0x0A	; 10
    1666:	ef 2e       	mov	r14, r31
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	ff 2e       	mov	r15, r31
	//print_adc();
	
	while (1)
	{		
		//mppt_cycle();
		print_adc();			
    166c:	f0 2d       	mov	r31, r0
    166e:	90 dd       	rcall	.-1248   	; 0x1190 <print_adc>
    1670:	d7 01       	movw	r26, r14
    1672:	c6 01       	movw	r24, r12
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	a1 09       	sbc	r26, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1678:	b1 09       	sbc	r27, r1
    167a:	e1 f7       	brne	.-8      	; 0x1674 <main+0x48>
    167c:	f8 cf       	rjmp	.-16     	; 0x166e <main+0x42>

0000167e <__udivmodhi4>:
    167e:	aa 1b       	sub	r26, r26
    1680:	bb 1b       	sub	r27, r27
    1682:	51 e1       	ldi	r21, 0x11	; 17
    1684:	07 c0       	rjmp	.+14     	; 0x1694 <__udivmodhi4_ep>

00001686 <__udivmodhi4_loop>:
    1686:	aa 1f       	adc	r26, r26
    1688:	bb 1f       	adc	r27, r27
    168a:	a6 17       	cp	r26, r22
    168c:	b7 07       	cpc	r27, r23
    168e:	10 f0       	brcs	.+4      	; 0x1694 <__udivmodhi4_ep>
    1690:	a6 1b       	sub	r26, r22
    1692:	b7 0b       	sbc	r27, r23

00001694 <__udivmodhi4_ep>:
    1694:	88 1f       	adc	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	5a 95       	dec	r21
    169a:	a9 f7       	brne	.-22     	; 0x1686 <__udivmodhi4_loop>
    169c:	80 95       	com	r24
    169e:	90 95       	com	r25
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	08 95       	ret

000016a6 <__divmodhi4>:
    16a6:	97 fb       	bst	r25, 7
    16a8:	09 2e       	mov	r0, r25
    16aa:	07 26       	eor	r0, r23
    16ac:	0a d0       	rcall	.+20     	; 0x16c2 <__divmodhi4_neg1>
    16ae:	77 fd       	sbrc	r23, 7
    16b0:	04 d0       	rcall	.+8      	; 0x16ba <__divmodhi4_neg2>
    16b2:	e5 df       	rcall	.-54     	; 0x167e <__udivmodhi4>
    16b4:	06 d0       	rcall	.+12     	; 0x16c2 <__divmodhi4_neg1>
    16b6:	00 20       	and	r0, r0
    16b8:	1a f4       	brpl	.+6      	; 0x16c0 <__divmodhi4_exit>

000016ba <__divmodhi4_neg2>:
    16ba:	70 95       	com	r23
    16bc:	61 95       	neg	r22
    16be:	7f 4f       	sbci	r23, 0xFF	; 255

000016c0 <__divmodhi4_exit>:
    16c0:	08 95       	ret

000016c2 <__divmodhi4_neg1>:
    16c2:	f6 f7       	brtc	.-4      	; 0x16c0 <__divmodhi4_exit>
    16c4:	90 95       	com	r25
    16c6:	81 95       	neg	r24
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	08 95       	ret

000016cc <__udivmodsi4>:
    16cc:	a1 e2       	ldi	r26, 0x21	; 33
    16ce:	1a 2e       	mov	r1, r26
    16d0:	aa 1b       	sub	r26, r26
    16d2:	bb 1b       	sub	r27, r27
    16d4:	fd 01       	movw	r30, r26
    16d6:	0d c0       	rjmp	.+26     	; 0x16f2 <__udivmodsi4_ep>

000016d8 <__udivmodsi4_loop>:
    16d8:	aa 1f       	adc	r26, r26
    16da:	bb 1f       	adc	r27, r27
    16dc:	ee 1f       	adc	r30, r30
    16de:	ff 1f       	adc	r31, r31
    16e0:	a2 17       	cp	r26, r18
    16e2:	b3 07       	cpc	r27, r19
    16e4:	e4 07       	cpc	r30, r20
    16e6:	f5 07       	cpc	r31, r21
    16e8:	20 f0       	brcs	.+8      	; 0x16f2 <__udivmodsi4_ep>
    16ea:	a2 1b       	sub	r26, r18
    16ec:	b3 0b       	sbc	r27, r19
    16ee:	e4 0b       	sbc	r30, r20
    16f0:	f5 0b       	sbc	r31, r21

000016f2 <__udivmodsi4_ep>:
    16f2:	66 1f       	adc	r22, r22
    16f4:	77 1f       	adc	r23, r23
    16f6:	88 1f       	adc	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	1a 94       	dec	r1
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <__udivmodsi4_loop>
    16fe:	60 95       	com	r22
    1700:	70 95       	com	r23
    1702:	80 95       	com	r24
    1704:	90 95       	com	r25
    1706:	9b 01       	movw	r18, r22
    1708:	ac 01       	movw	r20, r24
    170a:	bd 01       	movw	r22, r26
    170c:	cf 01       	movw	r24, r30
    170e:	08 95       	ret

00001710 <sprintf>:
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	2e 97       	sbiw	r28, 0x0e	; 14
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0d 89       	ldd	r16, Y+21	; 0x15
    1724:	1e 89       	ldd	r17, Y+22	; 0x16
    1726:	86 e0       	ldi	r24, 0x06	; 6
    1728:	8c 83       	std	Y+4, r24	; 0x04
    172a:	09 83       	std	Y+1, r16	; 0x01
    172c:	1a 83       	std	Y+2, r17	; 0x02
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	9f e7       	ldi	r25, 0x7F	; 127
    1732:	8d 83       	std	Y+5, r24	; 0x05
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	ae 01       	movw	r20, r28
    1738:	47 5e       	subi	r20, 0xE7	; 231
    173a:	5f 4f       	sbci	r21, 0xFF	; 255
    173c:	ce 01       	movw	r24, r28
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	6f 89       	ldd	r22, Y+23	; 0x17
    1742:	78 8d       	ldd	r23, Y+24	; 0x18
    1744:	0d d0       	rcall	.+26     	; 0x1760 <vfprintf>
    1746:	ef 81       	ldd	r30, Y+7	; 0x07
    1748:	f8 85       	ldd	r31, Y+8	; 0x08
    174a:	e0 0f       	add	r30, r16
    174c:	f1 1f       	adc	r31, r17
    174e:	10 82       	st	Z, r1
    1750:	2e 96       	adiw	r28, 0x0e	; 14
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	08 95       	ret

00001760 <vfprintf>:
    1760:	2f 92       	push	r2
    1762:	3f 92       	push	r3
    1764:	4f 92       	push	r4
    1766:	5f 92       	push	r5
    1768:	6f 92       	push	r6
    176a:	7f 92       	push	r7
    176c:	8f 92       	push	r8
    176e:	9f 92       	push	r9
    1770:	af 92       	push	r10
    1772:	bf 92       	push	r11
    1774:	cf 92       	push	r12
    1776:	df 92       	push	r13
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	2d 97       	sbiw	r28, 0x0d	; 13
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	3c 01       	movw	r6, r24
    1790:	6c 87       	std	Y+12, r22	; 0x0c
    1792:	7d 87       	std	Y+13, r23	; 0x0d
    1794:	5a 01       	movw	r10, r20
    1796:	fc 01       	movw	r30, r24
    1798:	16 82       	std	Z+6, r1	; 0x06
    179a:	17 82       	std	Z+7, r1	; 0x07
    179c:	83 81       	ldd	r24, Z+3	; 0x03
    179e:	81 ff       	sbrs	r24, 1
    17a0:	bb c1       	rjmp	.+886    	; 0x1b18 <vfprintf+0x3b8>
    17a2:	2e 01       	movw	r4, r28
    17a4:	08 94       	sec
    17a6:	41 1c       	adc	r4, r1
    17a8:	51 1c       	adc	r5, r1
    17aa:	f3 01       	movw	r30, r6
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    17b0:	fd 85       	ldd	r31, Y+13	; 0x0d
    17b2:	93 fd       	sbrc	r25, 3
    17b4:	85 91       	lpm	r24, Z+
    17b6:	93 ff       	sbrs	r25, 3
    17b8:	81 91       	ld	r24, Z+
    17ba:	ec 87       	std	Y+12, r30	; 0x0c
    17bc:	fd 87       	std	Y+13, r31	; 0x0d
    17be:	88 23       	and	r24, r24
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <vfprintf+0x64>
    17c2:	a6 c1       	rjmp	.+844    	; 0x1b10 <vfprintf+0x3b0>
    17c4:	85 32       	cpi	r24, 0x25	; 37
    17c6:	41 f4       	brne	.+16     	; 0x17d8 <vfprintf+0x78>
    17c8:	93 fd       	sbrc	r25, 3
    17ca:	85 91       	lpm	r24, Z+
    17cc:	93 ff       	sbrs	r25, 3
    17ce:	81 91       	ld	r24, Z+
    17d0:	ec 87       	std	Y+12, r30	; 0x0c
    17d2:	fd 87       	std	Y+13, r31	; 0x0d
    17d4:	85 32       	cpi	r24, 0x25	; 37
    17d6:	21 f4       	brne	.+8      	; 0x17e0 <vfprintf+0x80>
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	b3 01       	movw	r22, r6
    17dc:	cb d1       	rcall	.+918    	; 0x1b74 <fputc>
    17de:	e5 cf       	rjmp	.-54     	; 0x17aa <vfprintf+0x4a>
    17e0:	ff 24       	eor	r15, r15
    17e2:	ee 24       	eor	r14, r14
    17e4:	10 e0       	ldi	r17, 0x00	; 0
    17e6:	10 32       	cpi	r17, 0x20	; 32
    17e8:	b0 f4       	brcc	.+44     	; 0x1816 <vfprintf+0xb6>
    17ea:	8b 32       	cpi	r24, 0x2B	; 43
    17ec:	69 f0       	breq	.+26     	; 0x1808 <vfprintf+0xa8>
    17ee:	8c 32       	cpi	r24, 0x2C	; 44
    17f0:	28 f4       	brcc	.+10     	; 0x17fc <vfprintf+0x9c>
    17f2:	80 32       	cpi	r24, 0x20	; 32
    17f4:	51 f0       	breq	.+20     	; 0x180a <vfprintf+0xaa>
    17f6:	83 32       	cpi	r24, 0x23	; 35
    17f8:	71 f4       	brne	.+28     	; 0x1816 <vfprintf+0xb6>
    17fa:	0b c0       	rjmp	.+22     	; 0x1812 <vfprintf+0xb2>
    17fc:	8d 32       	cpi	r24, 0x2D	; 45
    17fe:	39 f0       	breq	.+14     	; 0x180e <vfprintf+0xae>
    1800:	80 33       	cpi	r24, 0x30	; 48
    1802:	49 f4       	brne	.+18     	; 0x1816 <vfprintf+0xb6>
    1804:	11 60       	ori	r17, 0x01	; 1
    1806:	2c c0       	rjmp	.+88     	; 0x1860 <vfprintf+0x100>
    1808:	12 60       	ori	r17, 0x02	; 2
    180a:	14 60       	ori	r17, 0x04	; 4
    180c:	29 c0       	rjmp	.+82     	; 0x1860 <vfprintf+0x100>
    180e:	18 60       	ori	r17, 0x08	; 8
    1810:	27 c0       	rjmp	.+78     	; 0x1860 <vfprintf+0x100>
    1812:	10 61       	ori	r17, 0x10	; 16
    1814:	25 c0       	rjmp	.+74     	; 0x1860 <vfprintf+0x100>
    1816:	17 fd       	sbrc	r17, 7
    1818:	2e c0       	rjmp	.+92     	; 0x1876 <vfprintf+0x116>
    181a:	28 2f       	mov	r18, r24
    181c:	20 53       	subi	r18, 0x30	; 48
    181e:	2a 30       	cpi	r18, 0x0A	; 10
    1820:	98 f4       	brcc	.+38     	; 0x1848 <vfprintf+0xe8>
    1822:	16 ff       	sbrs	r17, 6
    1824:	08 c0       	rjmp	.+16     	; 0x1836 <vfprintf+0xd6>
    1826:	8f 2d       	mov	r24, r15
    1828:	88 0f       	add	r24, r24
    182a:	f8 2e       	mov	r15, r24
    182c:	ff 0c       	add	r15, r15
    182e:	ff 0c       	add	r15, r15
    1830:	f8 0e       	add	r15, r24
    1832:	f2 0e       	add	r15, r18
    1834:	15 c0       	rjmp	.+42     	; 0x1860 <vfprintf+0x100>
    1836:	8e 2d       	mov	r24, r14
    1838:	88 0f       	add	r24, r24
    183a:	e8 2e       	mov	r14, r24
    183c:	ee 0c       	add	r14, r14
    183e:	ee 0c       	add	r14, r14
    1840:	e8 0e       	add	r14, r24
    1842:	e2 0e       	add	r14, r18
    1844:	10 62       	ori	r17, 0x20	; 32
    1846:	0c c0       	rjmp	.+24     	; 0x1860 <vfprintf+0x100>
    1848:	8e 32       	cpi	r24, 0x2E	; 46
    184a:	21 f4       	brne	.+8      	; 0x1854 <vfprintf+0xf4>
    184c:	16 fd       	sbrc	r17, 6
    184e:	60 c1       	rjmp	.+704    	; 0x1b10 <vfprintf+0x3b0>
    1850:	10 64       	ori	r17, 0x40	; 64
    1852:	06 c0       	rjmp	.+12     	; 0x1860 <vfprintf+0x100>
    1854:	8c 36       	cpi	r24, 0x6C	; 108
    1856:	11 f4       	brne	.+4      	; 0x185c <vfprintf+0xfc>
    1858:	10 68       	ori	r17, 0x80	; 128
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <vfprintf+0x100>
    185c:	88 36       	cpi	r24, 0x68	; 104
    185e:	59 f4       	brne	.+22     	; 0x1876 <vfprintf+0x116>
    1860:	ec 85       	ldd	r30, Y+12	; 0x0c
    1862:	fd 85       	ldd	r31, Y+13	; 0x0d
    1864:	93 fd       	sbrc	r25, 3
    1866:	85 91       	lpm	r24, Z+
    1868:	93 ff       	sbrs	r25, 3
    186a:	81 91       	ld	r24, Z+
    186c:	ec 87       	std	Y+12, r30	; 0x0c
    186e:	fd 87       	std	Y+13, r31	; 0x0d
    1870:	88 23       	and	r24, r24
    1872:	09 f0       	breq	.+2      	; 0x1876 <vfprintf+0x116>
    1874:	b8 cf       	rjmp	.-144    	; 0x17e6 <vfprintf+0x86>
    1876:	98 2f       	mov	r25, r24
    1878:	95 54       	subi	r25, 0x45	; 69
    187a:	93 30       	cpi	r25, 0x03	; 3
    187c:	18 f0       	brcs	.+6      	; 0x1884 <vfprintf+0x124>
    187e:	90 52       	subi	r25, 0x20	; 32
    1880:	93 30       	cpi	r25, 0x03	; 3
    1882:	38 f4       	brcc	.+14     	; 0x1892 <vfprintf+0x132>
    1884:	24 e0       	ldi	r18, 0x04	; 4
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	a2 0e       	add	r10, r18
    188a:	b3 1e       	adc	r11, r19
    188c:	3f e3       	ldi	r19, 0x3F	; 63
    188e:	39 83       	std	Y+1, r19	; 0x01
    1890:	0f c0       	rjmp	.+30     	; 0x18b0 <vfprintf+0x150>
    1892:	83 36       	cpi	r24, 0x63	; 99
    1894:	31 f0       	breq	.+12     	; 0x18a2 <vfprintf+0x142>
    1896:	83 37       	cpi	r24, 0x73	; 115
    1898:	81 f0       	breq	.+32     	; 0x18ba <vfprintf+0x15a>
    189a:	83 35       	cpi	r24, 0x53	; 83
    189c:	09 f0       	breq	.+2      	; 0x18a0 <vfprintf+0x140>
    189e:	56 c0       	rjmp	.+172    	; 0x194c <vfprintf+0x1ec>
    18a0:	21 c0       	rjmp	.+66     	; 0x18e4 <vfprintf+0x184>
    18a2:	f5 01       	movw	r30, r10
    18a4:	80 81       	ld	r24, Z
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	22 e0       	ldi	r18, 0x02	; 2
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	a2 0e       	add	r10, r18
    18ae:	b3 1e       	adc	r11, r19
    18b0:	21 e0       	ldi	r18, 0x01	; 1
    18b2:	c2 2e       	mov	r12, r18
    18b4:	d1 2c       	mov	r13, r1
    18b6:	42 01       	movw	r8, r4
    18b8:	13 c0       	rjmp	.+38     	; 0x18e0 <vfprintf+0x180>
    18ba:	92 e0       	ldi	r25, 0x02	; 2
    18bc:	29 2e       	mov	r2, r25
    18be:	31 2c       	mov	r3, r1
    18c0:	2a 0c       	add	r2, r10
    18c2:	3b 1c       	adc	r3, r11
    18c4:	f5 01       	movw	r30, r10
    18c6:	80 80       	ld	r8, Z
    18c8:	91 80       	ldd	r9, Z+1	; 0x01
    18ca:	16 ff       	sbrs	r17, 6
    18cc:	03 c0       	rjmp	.+6      	; 0x18d4 <vfprintf+0x174>
    18ce:	6f 2d       	mov	r22, r15
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <vfprintf+0x178>
    18d4:	6f ef       	ldi	r22, 0xFF	; 255
    18d6:	7f ef       	ldi	r23, 0xFF	; 255
    18d8:	c4 01       	movw	r24, r8
    18da:	41 d1       	rcall	.+642    	; 0x1b5e <strnlen>
    18dc:	6c 01       	movw	r12, r24
    18de:	51 01       	movw	r10, r2
    18e0:	1f 77       	andi	r17, 0x7F	; 127
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <vfprintf+0x1ac>
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	28 2e       	mov	r2, r24
    18e8:	31 2c       	mov	r3, r1
    18ea:	2a 0c       	add	r2, r10
    18ec:	3b 1c       	adc	r3, r11
    18ee:	f5 01       	movw	r30, r10
    18f0:	80 80       	ld	r8, Z
    18f2:	91 80       	ldd	r9, Z+1	; 0x01
    18f4:	16 ff       	sbrs	r17, 6
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <vfprintf+0x19e>
    18f8:	6f 2d       	mov	r22, r15
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <vfprintf+0x1a2>
    18fe:	6f ef       	ldi	r22, 0xFF	; 255
    1900:	7f ef       	ldi	r23, 0xFF	; 255
    1902:	c4 01       	movw	r24, r8
    1904:	21 d1       	rcall	.+578    	; 0x1b48 <strnlen_P>
    1906:	6c 01       	movw	r12, r24
    1908:	10 68       	ori	r17, 0x80	; 128
    190a:	51 01       	movw	r10, r2
    190c:	13 fd       	sbrc	r17, 3
    190e:	1a c0       	rjmp	.+52     	; 0x1944 <vfprintf+0x1e4>
    1910:	05 c0       	rjmp	.+10     	; 0x191c <vfprintf+0x1bc>
    1912:	80 e2       	ldi	r24, 0x20	; 32
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	b3 01       	movw	r22, r6
    1918:	2d d1       	rcall	.+602    	; 0x1b74 <fputc>
    191a:	ea 94       	dec	r14
    191c:	8e 2d       	mov	r24, r14
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	c8 16       	cp	r12, r24
    1922:	d9 06       	cpc	r13, r25
    1924:	b0 f3       	brcs	.-20     	; 0x1912 <vfprintf+0x1b2>
    1926:	0e c0       	rjmp	.+28     	; 0x1944 <vfprintf+0x1e4>
    1928:	f4 01       	movw	r30, r8
    192a:	17 fd       	sbrc	r17, 7
    192c:	85 91       	lpm	r24, Z+
    192e:	17 ff       	sbrs	r17, 7
    1930:	81 91       	ld	r24, Z+
    1932:	4f 01       	movw	r8, r30
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	b3 01       	movw	r22, r6
    1938:	1d d1       	rcall	.+570    	; 0x1b74 <fputc>
    193a:	e1 10       	cpse	r14, r1
    193c:	ea 94       	dec	r14
    193e:	08 94       	sec
    1940:	c1 08       	sbc	r12, r1
    1942:	d1 08       	sbc	r13, r1
    1944:	c1 14       	cp	r12, r1
    1946:	d1 04       	cpc	r13, r1
    1948:	79 f7       	brne	.-34     	; 0x1928 <vfprintf+0x1c8>
    194a:	df c0       	rjmp	.+446    	; 0x1b0a <vfprintf+0x3aa>
    194c:	84 36       	cpi	r24, 0x64	; 100
    194e:	11 f0       	breq	.+4      	; 0x1954 <vfprintf+0x1f4>
    1950:	89 36       	cpi	r24, 0x69	; 105
    1952:	49 f5       	brne	.+82     	; 0x19a6 <vfprintf+0x246>
    1954:	f5 01       	movw	r30, r10
    1956:	17 ff       	sbrs	r17, 7
    1958:	07 c0       	rjmp	.+14     	; 0x1968 <vfprintf+0x208>
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	a2 81       	ldd	r26, Z+2	; 0x02
    1960:	b3 81       	ldd	r27, Z+3	; 0x03
    1962:	24 e0       	ldi	r18, 0x04	; 4
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	08 c0       	rjmp	.+16     	; 0x1978 <vfprintf+0x218>
    1968:	80 81       	ld	r24, Z
    196a:	91 81       	ldd	r25, Z+1	; 0x01
    196c:	aa 27       	eor	r26, r26
    196e:	97 fd       	sbrc	r25, 7
    1970:	a0 95       	com	r26
    1972:	ba 2f       	mov	r27, r26
    1974:	22 e0       	ldi	r18, 0x02	; 2
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	a2 0e       	add	r10, r18
    197a:	b3 1e       	adc	r11, r19
    197c:	01 2f       	mov	r16, r17
    197e:	0f 76       	andi	r16, 0x6F	; 111
    1980:	b7 ff       	sbrs	r27, 7
    1982:	08 c0       	rjmp	.+16     	; 0x1994 <vfprintf+0x234>
    1984:	b0 95       	com	r27
    1986:	a0 95       	com	r26
    1988:	90 95       	com	r25
    198a:	81 95       	neg	r24
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	af 4f       	sbci	r26, 0xFF	; 255
    1990:	bf 4f       	sbci	r27, 0xFF	; 255
    1992:	00 68       	ori	r16, 0x80	; 128
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	a2 01       	movw	r20, r4
    199a:	2a e0       	ldi	r18, 0x0A	; 10
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	16 d1       	rcall	.+556    	; 0x1bcc <__ultoa_invert>
    19a0:	d8 2e       	mov	r13, r24
    19a2:	d4 18       	sub	r13, r4
    19a4:	3e c0       	rjmp	.+124    	; 0x1a22 <vfprintf+0x2c2>
    19a6:	85 37       	cpi	r24, 0x75	; 117
    19a8:	21 f4       	brne	.+8      	; 0x19b2 <vfprintf+0x252>
    19aa:	1f 7e       	andi	r17, 0xEF	; 239
    19ac:	2a e0       	ldi	r18, 0x0A	; 10
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	20 c0       	rjmp	.+64     	; 0x19f2 <vfprintf+0x292>
    19b2:	19 7f       	andi	r17, 0xF9	; 249
    19b4:	8f 36       	cpi	r24, 0x6F	; 111
    19b6:	a9 f0       	breq	.+42     	; 0x19e2 <vfprintf+0x282>
    19b8:	80 37       	cpi	r24, 0x70	; 112
    19ba:	20 f4       	brcc	.+8      	; 0x19c4 <vfprintf+0x264>
    19bc:	88 35       	cpi	r24, 0x58	; 88
    19be:	09 f0       	breq	.+2      	; 0x19c2 <vfprintf+0x262>
    19c0:	a7 c0       	rjmp	.+334    	; 0x1b10 <vfprintf+0x3b0>
    19c2:	0b c0       	rjmp	.+22     	; 0x19da <vfprintf+0x27a>
    19c4:	80 37       	cpi	r24, 0x70	; 112
    19c6:	21 f0       	breq	.+8      	; 0x19d0 <vfprintf+0x270>
    19c8:	88 37       	cpi	r24, 0x78	; 120
    19ca:	09 f0       	breq	.+2      	; 0x19ce <vfprintf+0x26e>
    19cc:	a1 c0       	rjmp	.+322    	; 0x1b10 <vfprintf+0x3b0>
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <vfprintf+0x272>
    19d0:	10 61       	ori	r17, 0x10	; 16
    19d2:	14 ff       	sbrs	r17, 4
    19d4:	09 c0       	rjmp	.+18     	; 0x19e8 <vfprintf+0x288>
    19d6:	14 60       	ori	r17, 0x04	; 4
    19d8:	07 c0       	rjmp	.+14     	; 0x19e8 <vfprintf+0x288>
    19da:	14 ff       	sbrs	r17, 4
    19dc:	08 c0       	rjmp	.+16     	; 0x19ee <vfprintf+0x28e>
    19de:	16 60       	ori	r17, 0x06	; 6
    19e0:	06 c0       	rjmp	.+12     	; 0x19ee <vfprintf+0x28e>
    19e2:	28 e0       	ldi	r18, 0x08	; 8
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	05 c0       	rjmp	.+10     	; 0x19f2 <vfprintf+0x292>
    19e8:	20 e1       	ldi	r18, 0x10	; 16
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <vfprintf+0x292>
    19ee:	20 e1       	ldi	r18, 0x10	; 16
    19f0:	32 e0       	ldi	r19, 0x02	; 2
    19f2:	f5 01       	movw	r30, r10
    19f4:	17 ff       	sbrs	r17, 7
    19f6:	07 c0       	rjmp	.+14     	; 0x1a06 <vfprintf+0x2a6>
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	44 e0       	ldi	r20, 0x04	; 4
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	06 c0       	rjmp	.+12     	; 0x1a12 <vfprintf+0x2b2>
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	42 e0       	ldi	r20, 0x02	; 2
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	a4 0e       	add	r10, r20
    1a14:	b5 1e       	adc	r11, r21
    1a16:	a2 01       	movw	r20, r4
    1a18:	d9 d0       	rcall	.+434    	; 0x1bcc <__ultoa_invert>
    1a1a:	d8 2e       	mov	r13, r24
    1a1c:	d4 18       	sub	r13, r4
    1a1e:	01 2f       	mov	r16, r17
    1a20:	0f 77       	andi	r16, 0x7F	; 127
    1a22:	06 ff       	sbrs	r16, 6
    1a24:	09 c0       	rjmp	.+18     	; 0x1a38 <vfprintf+0x2d8>
    1a26:	0e 7f       	andi	r16, 0xFE	; 254
    1a28:	df 14       	cp	r13, r15
    1a2a:	30 f4       	brcc	.+12     	; 0x1a38 <vfprintf+0x2d8>
    1a2c:	04 ff       	sbrs	r16, 4
    1a2e:	06 c0       	rjmp	.+12     	; 0x1a3c <vfprintf+0x2dc>
    1a30:	02 fd       	sbrc	r16, 2
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <vfprintf+0x2dc>
    1a34:	0f 7e       	andi	r16, 0xEF	; 239
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <vfprintf+0x2dc>
    1a38:	1d 2d       	mov	r17, r13
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <vfprintf+0x2de>
    1a3c:	1f 2d       	mov	r17, r15
    1a3e:	80 2f       	mov	r24, r16
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	04 ff       	sbrs	r16, 4
    1a44:	0c c0       	rjmp	.+24     	; 0x1a5e <vfprintf+0x2fe>
    1a46:	fe 01       	movw	r30, r28
    1a48:	ed 0d       	add	r30, r13
    1a4a:	f1 1d       	adc	r31, r1
    1a4c:	20 81       	ld	r18, Z
    1a4e:	20 33       	cpi	r18, 0x30	; 48
    1a50:	11 f4       	brne	.+4      	; 0x1a56 <vfprintf+0x2f6>
    1a52:	09 7e       	andi	r16, 0xE9	; 233
    1a54:	09 c0       	rjmp	.+18     	; 0x1a68 <vfprintf+0x308>
    1a56:	02 ff       	sbrs	r16, 2
    1a58:	06 c0       	rjmp	.+12     	; 0x1a66 <vfprintf+0x306>
    1a5a:	1e 5f       	subi	r17, 0xFE	; 254
    1a5c:	05 c0       	rjmp	.+10     	; 0x1a68 <vfprintf+0x308>
    1a5e:	86 78       	andi	r24, 0x86	; 134
    1a60:	90 70       	andi	r25, 0x00	; 0
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <vfprintf+0x308>
    1a66:	1f 5f       	subi	r17, 0xFF	; 255
    1a68:	80 2e       	mov	r8, r16
    1a6a:	99 24       	eor	r9, r9
    1a6c:	03 fd       	sbrc	r16, 3
    1a6e:	11 c0       	rjmp	.+34     	; 0x1a92 <vfprintf+0x332>
    1a70:	00 ff       	sbrs	r16, 0
    1a72:	0c c0       	rjmp	.+24     	; 0x1a8c <vfprintf+0x32c>
    1a74:	fd 2c       	mov	r15, r13
    1a76:	1e 15       	cp	r17, r14
    1a78:	48 f4       	brcc	.+18     	; 0x1a8c <vfprintf+0x32c>
    1a7a:	fe 0c       	add	r15, r14
    1a7c:	f1 1a       	sub	r15, r17
    1a7e:	1e 2d       	mov	r17, r14
    1a80:	05 c0       	rjmp	.+10     	; 0x1a8c <vfprintf+0x32c>
    1a82:	80 e2       	ldi	r24, 0x20	; 32
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	b3 01       	movw	r22, r6
    1a88:	75 d0       	rcall	.+234    	; 0x1b74 <fputc>
    1a8a:	1f 5f       	subi	r17, 0xFF	; 255
    1a8c:	1e 15       	cp	r17, r14
    1a8e:	c8 f3       	brcs	.-14     	; 0x1a82 <vfprintf+0x322>
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <vfprintf+0x33a>
    1a92:	1e 15       	cp	r17, r14
    1a94:	10 f4       	brcc	.+4      	; 0x1a9a <vfprintf+0x33a>
    1a96:	e1 1a       	sub	r14, r17
    1a98:	01 c0       	rjmp	.+2      	; 0x1a9c <vfprintf+0x33c>
    1a9a:	ee 24       	eor	r14, r14
    1a9c:	84 fe       	sbrs	r8, 4
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <vfprintf+0x35c>
    1aa0:	80 e3       	ldi	r24, 0x30	; 48
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	b3 01       	movw	r22, r6
    1aa6:	66 d0       	rcall	.+204    	; 0x1b74 <fputc>
    1aa8:	82 fe       	sbrs	r8, 2
    1aaa:	1d c0       	rjmp	.+58     	; 0x1ae6 <vfprintf+0x386>
    1aac:	81 fe       	sbrs	r8, 1
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <vfprintf+0x356>
    1ab0:	88 e5       	ldi	r24, 0x58	; 88
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	10 c0       	rjmp	.+32     	; 0x1ad6 <vfprintf+0x376>
    1ab6:	88 e7       	ldi	r24, 0x78	; 120
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0d c0       	rjmp	.+26     	; 0x1ad6 <vfprintf+0x376>
    1abc:	c4 01       	movw	r24, r8
    1abe:	86 78       	andi	r24, 0x86	; 134
    1ac0:	90 70       	andi	r25, 0x00	; 0
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	81 f0       	breq	.+32     	; 0x1ae6 <vfprintf+0x386>
    1ac6:	81 fc       	sbrc	r8, 1
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <vfprintf+0x36e>
    1aca:	80 e2       	ldi	r24, 0x20	; 32
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <vfprintf+0x370>
    1ace:	8b e2       	ldi	r24, 0x2B	; 43
    1ad0:	07 fd       	sbrc	r16, 7
    1ad2:	8d e2       	ldi	r24, 0x2D	; 45
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	b3 01       	movw	r22, r6
    1ad8:	4d d0       	rcall	.+154    	; 0x1b74 <fputc>
    1ada:	05 c0       	rjmp	.+10     	; 0x1ae6 <vfprintf+0x386>
    1adc:	80 e3       	ldi	r24, 0x30	; 48
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	b3 01       	movw	r22, r6
    1ae2:	48 d0       	rcall	.+144    	; 0x1b74 <fputc>
    1ae4:	fa 94       	dec	r15
    1ae6:	df 14       	cp	r13, r15
    1ae8:	c8 f3       	brcs	.-14     	; 0x1adc <vfprintf+0x37c>
    1aea:	da 94       	dec	r13
    1aec:	f2 01       	movw	r30, r4
    1aee:	ed 0d       	add	r30, r13
    1af0:	f1 1d       	adc	r31, r1
    1af2:	80 81       	ld	r24, Z
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	b3 01       	movw	r22, r6
    1af8:	3d d0       	rcall	.+122    	; 0x1b74 <fputc>
    1afa:	dd 20       	and	r13, r13
    1afc:	b1 f7       	brne	.-20     	; 0x1aea <vfprintf+0x38a>
    1afe:	05 c0       	rjmp	.+10     	; 0x1b0a <vfprintf+0x3aa>
    1b00:	80 e2       	ldi	r24, 0x20	; 32
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	b3 01       	movw	r22, r6
    1b06:	36 d0       	rcall	.+108    	; 0x1b74 <fputc>
    1b08:	ea 94       	dec	r14
    1b0a:	ee 20       	and	r14, r14
    1b0c:	c9 f7       	brne	.-14     	; 0x1b00 <vfprintf+0x3a0>
    1b0e:	4d ce       	rjmp	.-870    	; 0x17aa <vfprintf+0x4a>
    1b10:	f3 01       	movw	r30, r6
    1b12:	86 81       	ldd	r24, Z+6	; 0x06
    1b14:	97 81       	ldd	r25, Z+7	; 0x07
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <vfprintf+0x3bc>
    1b18:	8f ef       	ldi	r24, 0xFF	; 255
    1b1a:	9f ef       	ldi	r25, 0xFF	; 255
    1b1c:	2d 96       	adiw	r28, 0x0d	; 13
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	bf 90       	pop	r11
    1b34:	af 90       	pop	r10
    1b36:	9f 90       	pop	r9
    1b38:	8f 90       	pop	r8
    1b3a:	7f 90       	pop	r7
    1b3c:	6f 90       	pop	r6
    1b3e:	5f 90       	pop	r5
    1b40:	4f 90       	pop	r4
    1b42:	3f 90       	pop	r3
    1b44:	2f 90       	pop	r2
    1b46:	08 95       	ret

00001b48 <strnlen_P>:
    1b48:	fc 01       	movw	r30, r24
    1b4a:	05 90       	lpm	r0, Z+
    1b4c:	61 50       	subi	r22, 0x01	; 1
    1b4e:	70 40       	sbci	r23, 0x00	; 0
    1b50:	01 10       	cpse	r0, r1
    1b52:	d8 f7       	brcc	.-10     	; 0x1b4a <strnlen_P+0x2>
    1b54:	80 95       	com	r24
    1b56:	90 95       	com	r25
    1b58:	8e 0f       	add	r24, r30
    1b5a:	9f 1f       	adc	r25, r31
    1b5c:	08 95       	ret

00001b5e <strnlen>:
    1b5e:	fc 01       	movw	r30, r24
    1b60:	61 50       	subi	r22, 0x01	; 1
    1b62:	70 40       	sbci	r23, 0x00	; 0
    1b64:	01 90       	ld	r0, Z+
    1b66:	01 10       	cpse	r0, r1
    1b68:	d8 f7       	brcc	.-10     	; 0x1b60 <strnlen+0x2>
    1b6a:	80 95       	com	r24
    1b6c:	90 95       	com	r25
    1b6e:	8e 0f       	add	r24, r30
    1b70:	9f 1f       	adc	r25, r31
    1b72:	08 95       	ret

00001b74 <fputc>:
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	8c 01       	movw	r16, r24
    1b7e:	eb 01       	movw	r28, r22
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	81 ff       	sbrs	r24, 1
    1b84:	1b c0       	rjmp	.+54     	; 0x1bbc <fputc+0x48>
    1b86:	82 ff       	sbrs	r24, 2
    1b88:	0d c0       	rjmp	.+26     	; 0x1ba4 <fputc+0x30>
    1b8a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b8c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	28 17       	cp	r18, r24
    1b94:	39 07       	cpc	r19, r25
    1b96:	64 f4       	brge	.+24     	; 0x1bb0 <fputc+0x3c>
    1b98:	e8 81       	ld	r30, Y
    1b9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b9c:	01 93       	st	Z+, r16
    1b9e:	e8 83       	st	Y, r30
    1ba0:	f9 83       	std	Y+1, r31	; 0x01
    1ba2:	06 c0       	rjmp	.+12     	; 0x1bb0 <fputc+0x3c>
    1ba4:	e8 85       	ldd	r30, Y+8	; 0x08
    1ba6:	f9 85       	ldd	r31, Y+9	; 0x09
    1ba8:	80 2f       	mov	r24, r16
    1baa:	09 95       	icall
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	31 f4       	brne	.+12     	; 0x1bbc <fputc+0x48>
    1bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	8e 83       	std	Y+6, r24	; 0x06
    1bb8:	9f 83       	std	Y+7, r25	; 0x07
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <fputc+0x4c>
    1bbc:	0f ef       	ldi	r16, 0xFF	; 255
    1bbe:	1f ef       	ldi	r17, 0xFF	; 255
    1bc0:	c8 01       	movw	r24, r16
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	08 95       	ret

00001bcc <__ultoa_invert>:
    1bcc:	fa 01       	movw	r30, r20
    1bce:	aa 27       	eor	r26, r26
    1bd0:	28 30       	cpi	r18, 0x08	; 8
    1bd2:	51 f1       	breq	.+84     	; 0x1c28 <__ultoa_invert+0x5c>
    1bd4:	20 31       	cpi	r18, 0x10	; 16
    1bd6:	81 f1       	breq	.+96     	; 0x1c38 <__ultoa_invert+0x6c>
    1bd8:	e8 94       	clt
    1bda:	6f 93       	push	r22
    1bdc:	6e 7f       	andi	r22, 0xFE	; 254
    1bde:	6e 5f       	subi	r22, 0xFE	; 254
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	8f 4f       	sbci	r24, 0xFF	; 255
    1be4:	9f 4f       	sbci	r25, 0xFF	; 255
    1be6:	af 4f       	sbci	r26, 0xFF	; 255
    1be8:	b1 e0       	ldi	r27, 0x01	; 1
    1bea:	3e d0       	rcall	.+124    	; 0x1c68 <__ultoa_invert+0x9c>
    1bec:	b4 e0       	ldi	r27, 0x04	; 4
    1bee:	3c d0       	rcall	.+120    	; 0x1c68 <__ultoa_invert+0x9c>
    1bf0:	67 0f       	add	r22, r23
    1bf2:	78 1f       	adc	r23, r24
    1bf4:	89 1f       	adc	r24, r25
    1bf6:	9a 1f       	adc	r25, r26
    1bf8:	a1 1d       	adc	r26, r1
    1bfa:	68 0f       	add	r22, r24
    1bfc:	79 1f       	adc	r23, r25
    1bfe:	8a 1f       	adc	r24, r26
    1c00:	91 1d       	adc	r25, r1
    1c02:	a1 1d       	adc	r26, r1
    1c04:	6a 0f       	add	r22, r26
    1c06:	71 1d       	adc	r23, r1
    1c08:	81 1d       	adc	r24, r1
    1c0a:	91 1d       	adc	r25, r1
    1c0c:	a1 1d       	adc	r26, r1
    1c0e:	20 d0       	rcall	.+64     	; 0x1c50 <__ultoa_invert+0x84>
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <__ultoa_invert+0x48>
    1c12:	68 94       	set
    1c14:	3f 91       	pop	r19
    1c16:	2a e0       	ldi	r18, 0x0A	; 10
    1c18:	26 9f       	mul	r18, r22
    1c1a:	11 24       	eor	r1, r1
    1c1c:	30 19       	sub	r19, r0
    1c1e:	30 5d       	subi	r19, 0xD0	; 208
    1c20:	31 93       	st	Z+, r19
    1c22:	de f6       	brtc	.-74     	; 0x1bda <__ultoa_invert+0xe>
    1c24:	cf 01       	movw	r24, r30
    1c26:	08 95       	ret
    1c28:	46 2f       	mov	r20, r22
    1c2a:	47 70       	andi	r20, 0x07	; 7
    1c2c:	40 5d       	subi	r20, 0xD0	; 208
    1c2e:	41 93       	st	Z+, r20
    1c30:	b3 e0       	ldi	r27, 0x03	; 3
    1c32:	0f d0       	rcall	.+30     	; 0x1c52 <__ultoa_invert+0x86>
    1c34:	c9 f7       	brne	.-14     	; 0x1c28 <__ultoa_invert+0x5c>
    1c36:	f6 cf       	rjmp	.-20     	; 0x1c24 <__ultoa_invert+0x58>
    1c38:	46 2f       	mov	r20, r22
    1c3a:	4f 70       	andi	r20, 0x0F	; 15
    1c3c:	40 5d       	subi	r20, 0xD0	; 208
    1c3e:	4a 33       	cpi	r20, 0x3A	; 58
    1c40:	18 f0       	brcs	.+6      	; 0x1c48 <__ultoa_invert+0x7c>
    1c42:	49 5d       	subi	r20, 0xD9	; 217
    1c44:	31 fd       	sbrc	r19, 1
    1c46:	40 52       	subi	r20, 0x20	; 32
    1c48:	41 93       	st	Z+, r20
    1c4a:	02 d0       	rcall	.+4      	; 0x1c50 <__ultoa_invert+0x84>
    1c4c:	a9 f7       	brne	.-22     	; 0x1c38 <__ultoa_invert+0x6c>
    1c4e:	ea cf       	rjmp	.-44     	; 0x1c24 <__ultoa_invert+0x58>
    1c50:	b4 e0       	ldi	r27, 0x04	; 4
    1c52:	a6 95       	lsr	r26
    1c54:	97 95       	ror	r25
    1c56:	87 95       	ror	r24
    1c58:	77 95       	ror	r23
    1c5a:	67 95       	ror	r22
    1c5c:	ba 95       	dec	r27
    1c5e:	c9 f7       	brne	.-14     	; 0x1c52 <__ultoa_invert+0x86>
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	61 05       	cpc	r22, r1
    1c64:	71 05       	cpc	r23, r1
    1c66:	08 95       	ret
    1c68:	9b 01       	movw	r18, r22
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	0a 2e       	mov	r0, r26
    1c6e:	06 94       	lsr	r0
    1c70:	57 95       	ror	r21
    1c72:	47 95       	ror	r20
    1c74:	37 95       	ror	r19
    1c76:	27 95       	ror	r18
    1c78:	ba 95       	dec	r27
    1c7a:	c9 f7       	brne	.-14     	; 0x1c6e <__ultoa_invert+0xa2>
    1c7c:	62 0f       	add	r22, r18
    1c7e:	73 1f       	adc	r23, r19
    1c80:	84 1f       	adc	r24, r20
    1c82:	95 1f       	adc	r25, r21
    1c84:	a0 1d       	adc	r26, r0
    1c86:	08 95       	ret

00001c88 <_exit>:
    1c88:	f8 94       	cli

00001c8a <__stop_program>:
    1c8a:	ff cf       	rjmp	.-2      	; 0x1c8a <__stop_program>
