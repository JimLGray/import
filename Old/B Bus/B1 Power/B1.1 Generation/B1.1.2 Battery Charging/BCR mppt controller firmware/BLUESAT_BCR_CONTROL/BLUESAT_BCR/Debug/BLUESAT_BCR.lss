
BLUESAT_BCR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00802000  00001fd0  00002064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005d  0080211c  0080211c  00002180  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00002180  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000470  00000000  00000000  00003020  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009e4b  00000000  00000000  00003490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020ad  00000000  00000000  0000d2db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006eae  00000000  00000000  0000f388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b54  00000000  00000000  00016238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002dc5  00000000  00000000  00016d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002da5  00000000  00000000  00019b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 001df579  00000000  00000000  0001c8f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002b8  00000000  00000000  001fbe70  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f3 c0       	rjmp	.+486    	; 0x1e8 <__ctors_end>
       2:	00 00       	nop
       4:	10 c1       	rjmp	.+544    	; 0x226 <__bad_interrupt>
       6:	00 00       	nop
       8:	0e c1       	rjmp	.+540    	; 0x226 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c c1       	rjmp	.+536    	; 0x226 <__bad_interrupt>
       e:	00 00       	nop
      10:	0a c1       	rjmp	.+532    	; 0x226 <__bad_interrupt>
      12:	00 00       	nop
      14:	08 c1       	rjmp	.+528    	; 0x226 <__bad_interrupt>
      16:	00 00       	nop
      18:	06 c1       	rjmp	.+524    	; 0x226 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	04 c1       	rjmp	.+520    	; 0x226 <__bad_interrupt>
      1e:	00 00       	nop
      20:	02 c1       	rjmp	.+516    	; 0x226 <__bad_interrupt>
      22:	00 00       	nop
      24:	00 c1       	rjmp	.+512    	; 0x226 <__bad_interrupt>
      26:	00 00       	nop
      28:	fe c0       	rjmp	.+508    	; 0x226 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fc c0       	rjmp	.+504    	; 0x226 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c1       	rjmp	.+750    	; 0x320 <__vector_12>
      32:	00 00       	nop
      34:	f8 c0       	rjmp	.+496    	; 0x226 <__bad_interrupt>
      36:	00 00       	nop
      38:	f6 c0       	rjmp	.+492    	; 0x226 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f4 c0       	rjmp	.+488    	; 0x226 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f2 c0       	rjmp	.+484    	; 0x226 <__bad_interrupt>
      42:	00 00       	nop
      44:	f0 c0       	rjmp	.+480    	; 0x226 <__bad_interrupt>
      46:	00 00       	nop
      48:	ee c0       	rjmp	.+476    	; 0x226 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ec c0       	rjmp	.+472    	; 0x226 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ea c0       	rjmp	.+468    	; 0x226 <__bad_interrupt>
      52:	00 00       	nop
      54:	e8 c0       	rjmp	.+464    	; 0x226 <__bad_interrupt>
      56:	00 00       	nop
      58:	e6 c0       	rjmp	.+460    	; 0x226 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e4 c0       	rjmp	.+456    	; 0x226 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e2 c0       	rjmp	.+452    	; 0x226 <__bad_interrupt>
      62:	00 00       	nop
      64:	e0 c0       	rjmp	.+448    	; 0x226 <__bad_interrupt>
      66:	00 00       	nop
      68:	de c0       	rjmp	.+444    	; 0x226 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	dc c0       	rjmp	.+440    	; 0x226 <__bad_interrupt>
      6e:	00 00       	nop
      70:	da c0       	rjmp	.+436    	; 0x226 <__bad_interrupt>
      72:	00 00       	nop
      74:	d8 c0       	rjmp	.+432    	; 0x226 <__bad_interrupt>
      76:	00 00       	nop
      78:	d6 c0       	rjmp	.+428    	; 0x226 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d4 c0       	rjmp	.+424    	; 0x226 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d2 c0       	rjmp	.+420    	; 0x226 <__bad_interrupt>
      82:	00 00       	nop
      84:	d0 c0       	rjmp	.+416    	; 0x226 <__bad_interrupt>
      86:	00 00       	nop
      88:	ce c0       	rjmp	.+412    	; 0x226 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cc c0       	rjmp	.+408    	; 0x226 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ca c0       	rjmp	.+404    	; 0x226 <__bad_interrupt>
      92:	00 00       	nop
      94:	c8 c0       	rjmp	.+400    	; 0x226 <__bad_interrupt>
      96:	00 00       	nop
      98:	c6 c0       	rjmp	.+396    	; 0x226 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5b c6       	rjmp	.+3254   	; 0xd54 <__vector_39>
      9e:	00 00       	nop
      a0:	8b c6       	rjmp	.+3350   	; 0xdb8 <__vector_40>
      a2:	00 00       	nop
      a4:	bb c6       	rjmp	.+3446   	; 0xe1c <__vector_41>
      a6:	00 00       	nop
      a8:	eb c6       	rjmp	.+3542   	; 0xe80 <__vector_42>
      aa:	00 00       	nop
      ac:	bc c0       	rjmp	.+376    	; 0x226 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ba c0       	rjmp	.+372    	; 0x226 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b8 c0       	rjmp	.+368    	; 0x226 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b6 c0       	rjmp	.+364    	; 0x226 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b4 c0       	rjmp	.+360    	; 0x226 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b2 c0       	rjmp	.+356    	; 0x226 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b0 c0       	rjmp	.+352    	; 0x226 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ae c0       	rjmp	.+348    	; 0x226 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ac c0       	rjmp	.+344    	; 0x226 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	aa c0       	rjmp	.+340    	; 0x226 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a8 c0       	rjmp	.+336    	; 0x226 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a6 c0       	rjmp	.+332    	; 0x226 <__bad_interrupt>
      da:	00 00       	nop
      dc:	a4 c0       	rjmp	.+328    	; 0x226 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a2 c0       	rjmp	.+324    	; 0x226 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a0 c0       	rjmp	.+320    	; 0x226 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	9e c0       	rjmp	.+316    	; 0x226 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	9c c0       	rjmp	.+312    	; 0x226 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	9a c0       	rjmp	.+308    	; 0x226 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	98 c0       	rjmp	.+304    	; 0x226 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	96 c0       	rjmp	.+300    	; 0x226 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	94 c0       	rjmp	.+296    	; 0x226 <__bad_interrupt>
      fe:	00 00       	nop
     100:	92 c0       	rjmp	.+292    	; 0x226 <__bad_interrupt>
     102:	00 00       	nop
     104:	90 c0       	rjmp	.+288    	; 0x226 <__bad_interrupt>
     106:	00 00       	nop
     108:	8e c0       	rjmp	.+284    	; 0x226 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	8c c0       	rjmp	.+280    	; 0x226 <__bad_interrupt>
     10e:	00 00       	nop
     110:	8a c0       	rjmp	.+276    	; 0x226 <__bad_interrupt>
     112:	00 00       	nop
     114:	88 c0       	rjmp	.+272    	; 0x226 <__bad_interrupt>
     116:	00 00       	nop
     118:	86 c0       	rjmp	.+268    	; 0x226 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	53 c5       	rjmp	.+2726   	; 0xbc4 <__vector_71>
     11e:	00 00       	nop
     120:	83 c5       	rjmp	.+2822   	; 0xc28 <__vector_72>
     122:	00 00       	nop
     124:	b3 c5       	rjmp	.+2918   	; 0xc8c <__vector_73>
     126:	00 00       	nop
     128:	e3 c5       	rjmp	.+3014   	; 0xcf0 <__vector_74>
     12a:	00 00       	nop
     12c:	7c c0       	rjmp	.+248    	; 0x226 <__bad_interrupt>
     12e:	00 00       	nop
     130:	7a c0       	rjmp	.+244    	; 0x226 <__bad_interrupt>
     132:	00 00       	nop
     134:	78 c0       	rjmp	.+240    	; 0x226 <__bad_interrupt>
     136:	00 00       	nop
     138:	76 c0       	rjmp	.+236    	; 0x226 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	74 c0       	rjmp	.+232    	; 0x226 <__bad_interrupt>
     13e:	00 00       	nop
     140:	72 c0       	rjmp	.+228    	; 0x226 <__bad_interrupt>
     142:	00 00       	nop
     144:	70 c0       	rjmp	.+224    	; 0x226 <__bad_interrupt>
     146:	00 00       	nop
     148:	6e c0       	rjmp	.+220    	; 0x226 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	6c c0       	rjmp	.+216    	; 0x226 <__bad_interrupt>
     14e:	00 00       	nop
     150:	6a c0       	rjmp	.+212    	; 0x226 <__bad_interrupt>
     152:	00 00       	nop
     154:	68 c0       	rjmp	.+208    	; 0x226 <__bad_interrupt>
     156:	00 00       	nop
     158:	66 c0       	rjmp	.+204    	; 0x226 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	64 c0       	rjmp	.+200    	; 0x226 <__bad_interrupt>
     15e:	00 00       	nop
     160:	62 c0       	rjmp	.+196    	; 0x226 <__bad_interrupt>
     162:	00 00       	nop
     164:	60 c0       	rjmp	.+192    	; 0x226 <__bad_interrupt>
     166:	00 00       	nop
     168:	5e c0       	rjmp	.+188    	; 0x226 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	5c c0       	rjmp	.+184    	; 0x226 <__bad_interrupt>
     16e:	00 00       	nop
     170:	5a c0       	rjmp	.+180    	; 0x226 <__bad_interrupt>
     172:	00 00       	nop
     174:	58 c0       	rjmp	.+176    	; 0x226 <__bad_interrupt>
     176:	00 00       	nop
     178:	56 c0       	rjmp	.+172    	; 0x226 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	54 c0       	rjmp	.+168    	; 0x226 <__bad_interrupt>
     17e:	00 00       	nop
     180:	52 c0       	rjmp	.+164    	; 0x226 <__bad_interrupt>
     182:	00 00       	nop
     184:	50 c0       	rjmp	.+160    	; 0x226 <__bad_interrupt>
     186:	00 00       	nop
     188:	4e c0       	rjmp	.+156    	; 0x226 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	4c c0       	rjmp	.+152    	; 0x226 <__bad_interrupt>
     18e:	00 00       	nop
     190:	4a c0       	rjmp	.+148    	; 0x226 <__bad_interrupt>
     192:	00 00       	nop
     194:	48 c0       	rjmp	.+144    	; 0x226 <__bad_interrupt>
     196:	00 00       	nop
     198:	46 c0       	rjmp	.+140    	; 0x226 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	44 c0       	rjmp	.+136    	; 0x226 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	42 c0       	rjmp	.+132    	; 0x226 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	40 c0       	rjmp	.+128    	; 0x226 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	3e c0       	rjmp	.+124    	; 0x226 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3c c0       	rjmp	.+120    	; 0x226 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	3a c0       	rjmp	.+116    	; 0x226 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	38 c0       	rjmp	.+112    	; 0x226 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	36 c0       	rjmp	.+108    	; 0x226 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	34 c0       	rjmp	.+104    	; 0x226 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	32 c0       	rjmp	.+100    	; 0x226 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	30 c0       	rjmp	.+96     	; 0x226 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	2e c0       	rjmp	.+92     	; 0x226 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	2c c0       	rjmp	.+88     	; 0x226 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	2a c0       	rjmp	.+84     	; 0x226 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	28 c0       	rjmp	.+80     	; 0x226 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	26 c0       	rjmp	.+76     	; 0x226 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	24 c0       	rjmp	.+72     	; 0x226 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	22 c0       	rjmp	.+68     	; 0x226 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	20 c0       	rjmp	.+64     	; 0x226 <__bad_interrupt>
	...

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e2       	ldi	r29, 0x2F	; 47
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61

000001f4 <__do_copy_data>:
     1f4:	11 e2       	ldi	r17, 0x21	; 33
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b0 e2       	ldi	r27, 0x20	; 32
     1fa:	e0 ed       	ldi	r30, 0xD0	; 208
     1fc:	ff e1       	ldi	r31, 0x1F	; 31
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	0b bf       	out	0x3b, r16	; 59
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x14>
     204:	07 90       	elpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	ac 31       	cpi	r26, 0x1C	; 28
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0x10>

0000020e <__do_clear_bss>:
     20e:	11 e2       	ldi	r17, 0x21	; 33
     210:	ac e1       	ldi	r26, 0x1C	; 28
     212:	b1 e2       	ldi	r27, 0x21	; 33
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a9 37       	cpi	r26, 0x79	; 121
     21a:	b1 07       	cpc	r27, r17
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <main>
     222:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <_exit>

00000226 <__bad_interrupt>:
     226:	ec ce       	rjmp	.-552    	; 0x0 <__vectors>

00000228 <slave_process>:
uint8_t twi_buffer[TWI_BUFFER_LEN] = {0};
	
//Hacky
extern status_code_t usart_serial_write_string(usart_if usart, char *str);

static void slave_process(void) {
     228:	8f 92       	push	r8
     22a:	9f 92       	push	r9
     22c:	af 92       	push	r10
     22e:	bf 92       	push	r11
     230:	cf 92       	push	r12
     232:	df 92       	push	r13
     234:	ef 92       	push	r14
     236:	ff 92       	push	r15
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	a8 97       	sbiw	r28, 0x28	; 40
     246:	cd bf       	out	0x3d, r28	; 61
     248:	de bf       	out	0x3e, r29	; 62
	int i;
	char msg[40];
	
	#ifdef DEBUG
	sprintf(msg, "TWI Recv:");
     24a:	de 01       	movw	r26, r28
     24c:	11 96       	adiw	r26, 0x01	; 1
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f0 e2       	ldi	r31, 0x20	; 32
     252:	8a e0       	ldi	r24, 0x0A	; 10
     254:	01 90       	ld	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	81 50       	subi	r24, 0x01	; 1
     25a:	e1 f7       	brne	.-8      	; 0x254 <slave_process+0x2c>
	usart_serial_write_string(USART_SERIAL, msg);
     25c:	80 ea       	ldi	r24, 0xA0	; 160
     25e:	9a e0       	ldi	r25, 0x0A	; 10
     260:	be 01       	movw	r22, r28
     262:	6f 5f       	subi	r22, 0xFF	; 255
     264:	7f 4f       	sbci	r23, 0xFF	; 255
     266:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <usart_serial_write_string>
     26a:	0f 2e       	mov	r0, r31
     26c:	fc e1       	ldi	r31, 0x1C	; 28
     26e:	cf 2e       	mov	r12, r31
     270:	f1 e2       	ldi	r31, 0x21	; 33
     272:	df 2e       	mov	r13, r31
     274:	f0 2d       	mov	r31, r0
	#endif
	
	for(i = 0; i < TWI_BUFFER_LEN; i++) {
     276:	00 e0       	ldi	r16, 0x00	; 0
     278:	10 e0       	ldi	r17, 0x00	; 0
		twi_buffer[i] = slave.receivedData[i];
     27a:	0f 2e       	mov	r0, r31
     27c:	f6 e5       	ldi	r31, 0x56	; 86
     27e:	af 2e       	mov	r10, r31
     280:	f1 e2       	ldi	r31, 0x21	; 33
     282:	bf 2e       	mov	r11, r31
     284:	f0 2d       	mov	r31, r0
		
		#ifdef DEBUG
		sprintf(msg, " 0x%02x", twi_buffer[i]);
     286:	7e 01       	movw	r14, r28
     288:	08 94       	sec
     28a:	e1 1c       	adc	r14, r1
     28c:	f1 1c       	adc	r15, r1
     28e:	0f 2e       	mov	r0, r31
     290:	fa e0       	ldi	r31, 0x0A	; 10
     292:	8f 2e       	mov	r8, r31
     294:	f0 e2       	ldi	r31, 0x20	; 32
     296:	9f 2e       	mov	r9, r31
     298:	f0 2d       	mov	r31, r0
	sprintf(msg, "TWI Recv:");
	usart_serial_write_string(USART_SERIAL, msg);
	#endif
	
	for(i = 0; i < TWI_BUFFER_LEN; i++) {
		twi_buffer[i] = slave.receivedData[i];
     29a:	f5 01       	movw	r30, r10
     29c:	e0 0f       	add	r30, r16
     29e:	f1 1f       	adc	r31, r17
     2a0:	84 81       	ldd	r24, Z+4	; 0x04
     2a2:	d6 01       	movw	r26, r12
     2a4:	8d 93       	st	X+, r24
     2a6:	6d 01       	movw	r12, r26
		
		#ifdef DEBUG
		sprintf(msg, " 0x%02x", twi_buffer[i]);
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <slave_process+0x82>
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <slave_process+0x84>
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <slave_process+0x86>
     2ae:	ed b7       	in	r30, 0x3d	; 61
     2b0:	fe b7       	in	r31, 0x3e	; 62
     2b2:	31 96       	adiw	r30, 0x01	; 1
     2b4:	ad b7       	in	r26, 0x3d	; 61
     2b6:	be b7       	in	r27, 0x3e	; 62
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	ed 92       	st	X+, r14
     2bc:	fc 92       	st	X, r15
     2be:	12 97       	sbiw	r26, 0x02	; 2
     2c0:	82 82       	std	Z+2, r8	; 0x02
     2c2:	93 82       	std	Z+3, r9	; 0x03
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	15 82       	std	Z+5, r1	; 0x05
     2c8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <sprintf>
		usart_serial_write_string(USART_SERIAL, msg);
     2cc:	ed b7       	in	r30, 0x3d	; 61
     2ce:	fe b7       	in	r31, 0x3e	; 62
     2d0:	36 96       	adiw	r30, 0x06	; 6
     2d2:	ed bf       	out	0x3d, r30	; 61
     2d4:	fe bf       	out	0x3e, r31	; 62
     2d6:	80 ea       	ldi	r24, 0xA0	; 160
     2d8:	9a e0       	ldi	r25, 0x0A	; 10
     2da:	b7 01       	movw	r22, r14
     2dc:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <usart_serial_write_string>
	#ifdef DEBUG
	sprintf(msg, "TWI Recv:");
	usart_serial_write_string(USART_SERIAL, msg);
	#endif
	
	for(i = 0; i < TWI_BUFFER_LEN; i++) {
     2e0:	0f 5f       	subi	r16, 0xFF	; 255
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	08 30       	cpi	r16, 0x08	; 8
     2e6:	11 05       	cpc	r17, r1
     2e8:	c1 f6       	brne	.-80     	; 0x29a <slave_process+0x72>
		usart_serial_write_string(USART_SERIAL, msg);
		#endif
	}
	
	#ifdef DEBUG
	sprintf(msg, "\n");
     2ea:	8a e0       	ldi	r24, 0x0A	; 10
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	89 83       	std	Y+1, r24	; 0x01
     2f0:	9a 83       	std	Y+2, r25	; 0x02
	usart_serial_write_string(USART_SERIAL, msg);
     2f2:	80 ea       	ldi	r24, 0xA0	; 160
     2f4:	9a e0       	ldi	r25, 0x0A	; 10
     2f6:	be 01       	movw	r22, r28
     2f8:	6f 5f       	subi	r22, 0xFF	; 255
     2fa:	7f 4f       	sbci	r23, 0xFF	; 255
     2fc:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <usart_serial_write_string>
	#endif
		
}
     300:	a8 96       	adiw	r28, 0x28	; 40
     302:	cd bf       	out	0x3d, r28	; 61
     304:	de bf       	out	0x3e, r29	; 62
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	bf 90       	pop	r11
     318:	af 90       	pop	r10
     31a:	9f 90       	pop	r9
     31c:	8f 90       	pop	r8
     31e:	08 95       	ret

00000320 <__vector_12>:

ISR(TWIC_TWIS_vect) {
     320:	1f 92       	push	r1
     322:	0f 92       	push	r0
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	0f 92       	push	r0
     328:	0b b6       	in	r0, 0x3b	; 59
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	2f 93       	push	r18
     330:	3f 93       	push	r19
     332:	4f 93       	push	r20
     334:	5f 93       	push	r21
     336:	6f 93       	push	r22
     338:	7f 93       	push	r23
     33a:	8f 93       	push	r24
     33c:	9f 93       	push	r25
     33e:	af 93       	push	r26
     340:	bf 93       	push	r27
     342:	ef 93       	push	r30
     344:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&slave);
     346:	86 e5       	ldi	r24, 0x56	; 86
     348:	91 e2       	ldi	r25, 0x21	; 33
     34a:	e4 d0       	rcall	.+456    	; 0x514 <TWI_SlaveInterruptHandler>
     34c:	ff 91       	pop	r31
}
     34e:	ef 91       	pop	r30
     350:	bf 91       	pop	r27
     352:	af 91       	pop	r26
     354:	9f 91       	pop	r25
     356:	8f 91       	pop	r24
     358:	7f 91       	pop	r23
     35a:	6f 91       	pop	r22
     35c:	5f 91       	pop	r21
     35e:	4f 91       	pop	r20
     360:	3f 91       	pop	r19
     362:	2f 91       	pop	r18
     364:	0f 90       	pop	r0
     366:	0b be       	out	0x3b, r0	; 59
     368:	0f 90       	pop	r0
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	0f 90       	pop	r0
     36e:	1f 90       	pop	r1
     370:	18 95       	reti

00000372 <i2c_init>:
     372:	cf 93       	push	r28

void i2c_init ()
{
     374:	df 93       	push	r29
	//TODO: Do I have to do this??
	irq_initialize_vectors();
     376:	87 e0       	ldi	r24, 0x07	; 7
     378:	e0 ea       	ldi	r30, 0xA0	; 160
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	82 83       	std	Z+2, r24	; 0x02
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	60 e4       	ldi	r22, 0x40	; 64
     384:	1b d1       	rcall	.+566    	; 0x5bc <sysclk_enable_module>
     386:	c6 e5       	ldi	r28, 0x56	; 86
	
	sysclk_enable_peripheral_clock(&TWI_SLAVE);
	TWI_SlaveInitializeDriver(&slave, &TWI_SLAVE, *slave_process);
     388:	d1 e2       	ldi	r29, 0x21	; 33
     38a:	ce 01       	movw	r24, r28
     38c:	60 e8       	ldi	r22, 0x80	; 128
     38e:	74 e0       	ldi	r23, 0x04	; 4
     390:	44 e1       	ldi	r20, 0x14	; 20
     392:	51 e0       	ldi	r21, 0x01	; 1
     394:	08 d0       	rcall	.+16     	; 0x3a6 <TWI_SlaveInitializeDriver>
     396:	ce 01       	movw	r24, r28
     398:	60 e6       	ldi	r22, 0x60	; 96
	TWI_SlaveInitializeModule(&slave, TWI_SLAVE_ADDR, TWI_SLAVE_INTLVL_MED_gc);
     39a:	40 e8       	ldi	r20, 0x80	; 128
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	0e d0       	rcall	.+28     	; 0x3bc <TWI_SlaveInitializeModule>
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <TWI_SlaveInitializeDriver>:
 *  \param processDataFunction  Pointer to the function that handles incoming data.
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
     3a6:	fc 01       	movw	r30, r24
	twi->interface = module;
     3a8:	60 83       	st	Z, r22
     3aa:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
     3ac:	42 83       	std	Z+2, r20	; 0x02
     3ae:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
     3b0:	14 8a       	std	Z+20, r1	; 0x14
	twi->bytesSent = 0;
     3b2:	15 8a       	std	Z+21, r1	; 0x15
	twi->status = TWIS_STATUS_READY;
     3b4:	16 8a       	std	Z+22, r1	; 0x16
	twi->result = TWIS_RESULT_UNKNOWN;
     3b6:	17 8a       	std	Z+23, r1	; 0x17
	twi->abort = false;
     3b8:	10 8e       	std	Z+24, r1	; 0x18
}
     3ba:	08 95       	ret

000003bc <TWI_SlaveInitializeModule>:
 *  \param intLevel   Interrupt level for the TWI slave interrupt handler.
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
     3bc:	fc 01       	movw	r30, r24
	twi->interface->SLAVE.CTRLA = intLevel |
     3be:	a0 81       	ld	r26, Z
     3c0:	b1 81       	ldd	r27, Z+1	; 0x01
     3c2:	48 63       	ori	r20, 0x38	; 56
     3c4:	18 96       	adiw	r26, 0x08	; 8
     3c6:	4c 93       	st	X, r20
     3c8:	18 97       	sbiw	r26, 0x08	; 8
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
     3ca:	01 90       	ld	r0, Z+
     3cc:	f0 81       	ld	r31, Z
     3ce:	e0 2d       	mov	r30, r0
     3d0:	66 0f       	add	r22, r22
     3d2:	63 87       	std	Z+11, r22	; 0x0b
}
     3d4:	08 95       	ret

000003d6 <TWI_SlaveTransactionFinished>:
 *
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
     3d6:	fc 01       	movw	r30, r24
	twi->result = result;
     3d8:	67 8b       	std	Z+23, r22	; 0x17
	twi->status = TWIS_STATUS_READY;
     3da:	16 8a       	std	Z+22, r1	; 0x16
}
     3dc:	08 95       	ret

000003de <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
     3de:	fc 01       	movw	r30, r24
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
     3e0:	85 89       	ldd	r24, Z+21	; 0x15
     3e2:	88 23       	and	r24, r24
     3e4:	69 f0       	breq	.+26     	; 0x400 <TWI_SlaveWriteHandler+0x22>
     3e6:	a0 81       	ld	r26, Z
     3e8:	b1 81       	ldd	r27, Z+1	; 0x01
     3ea:	1a 96       	adiw	r26, 0x0a	; 10
     3ec:	8c 91       	ld	r24, X
     3ee:	1a 97       	sbiw	r26, 0x0a	; 10
     3f0:	84 ff       	sbrs	r24, 4
     3f2:	06 c0       	rjmp	.+12     	; 0x400 <TWI_SlaveWriteHandler+0x22>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     3f4:	82 e0       	ldi	r24, 0x02	; 2
     3f6:	19 96       	adiw	r26, 0x09	; 9
     3f8:	8c 93       	st	X, r24
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     3fa:	cf 01       	movw	r24, r30
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	eb cf       	rjmp	.-42     	; 0x3d6 <TWI_SlaveTransactionFinished>
     400:	85 89       	ldd	r24, Z+21	; 0x15
     402:	88 30       	cpi	r24, 0x08	; 8
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
     404:	a0 f4       	brcc	.+40     	; 0x42e <TWI_SlaveWriteHandler+0x50>
     406:	85 89       	ldd	r24, Z+21	; 0x15
     408:	df 01       	movw	r26, r30
			uint8_t data = twi->sendData[twi->bytesSent];
     40a:	a8 0f       	add	r26, r24
     40c:	b1 1d       	adc	r27, r1
     40e:	1c 96       	adiw	r26, 0x0c	; 12
     410:	8c 91       	ld	r24, X
     412:	a0 81       	ld	r26, Z
     414:	b1 81       	ldd	r27, Z+1	; 0x01
			twi->interface->SLAVE.DATA = data;
     416:	1c 96       	adiw	r26, 0x0c	; 12
     418:	8c 93       	st	X, r24
     41a:	1c 97       	sbiw	r26, 0x0c	; 12
     41c:	85 89       	ldd	r24, Z+21	; 0x15
     41e:	8f 5f       	subi	r24, 0xFF	; 255
			twi->bytesSent++;
     420:	85 8b       	std	Z+21, r24	; 0x15
     422:	01 90       	ld	r0, Z+
     424:	f0 81       	ld	r31, Z

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     426:	e0 2d       	mov	r30, r0
     428:	83 e0       	ldi	r24, 0x03	; 3
     42a:	81 87       	std	Z+9, r24	; 0x09
     42c:	08 95       	ret
     42e:	a0 81       	ld	r26, Z
     430:	b1 81       	ldd	r27, Z+1	; 0x01
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	19 96       	adiw	r26, 0x09	; 9
     436:	8c 93       	st	X, r24
     438:	cf 01       	movw	r24, r30
     43a:	62 e0       	ldi	r22, 0x02	; 2
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     43c:	cc cf       	rjmp	.-104    	; 0x3d6 <TWI_SlaveTransactionFinished>

0000043e <TWI_SlaveReadHandler>:
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec 01       	movw	r28, r24
     444:	e8 81       	ld	r30, Y
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     446:	f9 81       	ldd	r31, Y+1	; 0x01
     448:	80 85       	ldd	r24, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
     44a:	84 60       	ori	r24, 0x04	; 4
     44c:	80 87       	std	Z+8, r24	; 0x08

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
     44e:	8c 89       	ldd	r24, Y+20	; 0x14
     450:	88 30       	cpi	r24, 0x08	; 8
     452:	f8 f4       	brcc	.+62     	; 0x492 <TWI_SlaveReadHandler+0x54>
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
     454:	e8 81       	ld	r30, Y
     456:	f9 81       	ldd	r31, Y+1	; 0x01
     458:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
     45a:	9c 89       	ldd	r25, Y+20	; 0x14
     45c:	fe 01       	movw	r30, r28
     45e:	e9 0f       	add	r30, r25
     460:	f1 1d       	adc	r31, r1
     462:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
     464:	ea 81       	ldd	r30, Y+2	; 0x02
     466:	fb 81       	ldd	r31, Y+3	; 0x03
     468:	09 95       	icall

		twi->bytesReceived++;
     46a:	8c 89       	ldd	r24, Y+20	; 0x14
     46c:	8f 5f       	subi	r24, 0xFF	; 255
     46e:	8c 8b       	std	Y+20, r24	; 0x14

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
     470:	88 8d       	ldd	r24, Y+24	; 0x18
     472:	88 23       	and	r24, r24
     474:	49 f0       	breq	.+18     	; 0x488 <TWI_SlaveReadHandler+0x4a>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     476:	e8 81       	ld	r30, Y
     478:	f9 81       	ldd	r31, Y+1	; 0x01
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	81 87       	std	Z+9, r24	; 0x09
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     47e:	ce 01       	movw	r24, r28
     480:	66 e0       	ldi	r22, 0x06	; 6
     482:	a9 df       	rcall	.-174    	; 0x3d6 <TWI_SlaveTransactionFinished>
     484:	18 8e       	std	Y+24, r1	; 0x18
			twi->abort = false;
     486:	0c c0       	rjmp	.+24     	; 0x4a0 <TWI_SlaveReadHandler+0x62>
     488:	e8 81       	ld	r30, Y
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     48a:	f9 81       	ldd	r31, Y+1	; 0x01
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	81 87       	std	Z+9, r24	; 0x09
     490:	07 c0       	rjmp	.+14     	; 0x4a0 <TWI_SlaveReadHandler+0x62>
     492:	e8 81       	ld	r30, Y
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
     494:	f9 81       	ldd	r31, Y+1	; 0x01
     496:	86 e0       	ldi	r24, 0x06	; 6
     498:	81 87       	std	Z+9, r24	; 0x09
     49a:	ce 01       	movw	r24, r28
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
     49c:	62 e0       	ldi	r22, 0x02	; 2
     49e:	9b df       	rcall	.-202    	; 0x3d6 <TWI_SlaveTransactionFinished>
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
	}
}
     4a4:	08 95       	ret

000004a6 <TWI_SlaveDataHandler>:
     4a6:	dc 01       	movw	r26, r24
     4a8:	ed 91       	ld	r30, X+
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
     4aa:	fc 91       	ld	r31, X
     4ac:	11 97       	sbiw	r26, 0x01	; 1
     4ae:	22 85       	ldd	r18, Z+10	; 0x0a
     4b0:	21 ff       	sbrs	r18, 1
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <TWI_SlaveDataHandler+0x10>
		TWI_SlaveWriteHandler(twi);
     4b4:	94 cf       	rjmp	.-216    	; 0x3de <TWI_SlaveWriteHandler>
     4b6:	c3 cf       	rjmp	.-122    	; 0x43e <TWI_SlaveReadHandler>

000004b8 <TWI_SlaveStopHandler>:
     4b8:	dc 01       	movw	r26, r24
	} else {
		TWI_SlaveReadHandler(twi);
     4ba:	ed 91       	ld	r30, X+
     4bc:	fc 91       	ld	r31, X
     4be:	11 97       	sbiw	r26, 0x01	; 1
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     4c0:	20 85       	ldd	r18, Z+8	; 0x08
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     4c2:	2b 7f       	andi	r18, 0xFB	; 251
     4c4:	20 87       	std	Z+8, r18	; 0x08

	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     4c6:	ed 91       	ld	r30, X+
     4c8:	fc 91       	ld	r31, X
     4ca:	22 85       	ldd	r18, Z+10	; 0x0a
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
     4cc:	20 64       	ori	r18, 0x40	; 64
     4ce:	22 87       	std	Z+10, r18	; 0x0a

	TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	81 cf       	rjmp	.-254    	; 0x3d6 <TWI_SlaveTransactionFinished>

000004d4 <TWI_SlaveAddressMatchHandler>:
     4d4:	cf 93       	push	r28

}
     4d6:	df 93       	push	r29
 *  Prepares TWI module for transaction when an address match occurs.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
     4d8:	ec 01       	movw	r28, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
     4da:	88 8d       	ldd	r24, Y+24	; 0x18
     4dc:	88 23       	and	r24, r24
     4de:	49 f0       	breq	.+18     	; 0x4f2 <TWI_SlaveAddressMatchHandler+0x1e>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
     4e0:	e8 81       	ld	r30, Y
     4e2:	f9 81       	ldd	r31, Y+1	; 0x01
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	81 87       	std	Z+9, r24	; 0x09
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
     4e8:	ce 01       	movw	r24, r28
     4ea:	66 e0       	ldi	r22, 0x06	; 6
     4ec:	74 df       	rcall	.-280    	; 0x3d6 <TWI_SlaveTransactionFinished>
     4ee:	18 8e       	std	Y+24, r1	; 0x18
		twi->abort = false;
     4f0:	0e c0       	rjmp	.+28     	; 0x50e <TWI_SlaveAddressMatchHandler+0x3a>
     4f2:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		twi->status = TWIS_STATUS_BUSY;
     4f4:	8e 8b       	std	Y+22, r24	; 0x16
     4f6:	1f 8a       	std	Y+23, r1	; 0x17
		twi->result = TWIS_RESULT_UNKNOWN;
     4f8:	e8 81       	ld	r30, Y

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
     4fa:	f9 81       	ldd	r31, Y+1	; 0x01
     4fc:	80 85       	ldd	r24, Z+8	; 0x08
     4fe:	8b 7f       	andi	r24, 0xFB	; 251
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
     500:	80 87       	std	Z+8, r24	; 0x08
     502:	1c 8a       	std	Y+20, r1	; 0x14

		twi->bytesReceived = 0;
     504:	1d 8a       	std	Y+21, r1	; 0x15
		twi->bytesSent = 0;
     506:	e8 81       	ld	r30, Y

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
     508:	f9 81       	ldd	r31, Y+1	; 0x01
     50a:	83 e0       	ldi	r24, 0x03	; 3
     50c:	81 87       	std	Z+9, r24	; 0x09
     50e:	df 91       	pop	r29
	}
}
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <TWI_SlaveInterruptHandler>:
     514:	fc 01       	movw	r30, r24
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
     516:	a0 81       	ld	r26, Z
     518:	b1 81       	ldd	r27, Z+1	; 0x01
     51a:	1a 96       	adiw	r26, 0x0a	; 10
     51c:	4c 91       	ld	r20, X
     51e:	1a 97       	sbiw	r26, 0x0a	; 10

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
     520:	84 2f       	mov	r24, r20
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	42 ff       	sbrs	r20, 2
     526:	06 c0       	rjmp	.+12     	; 0x534 <TWI_SlaveInterruptHandler+0x20>
		twi->bytesReceived = 0;
     528:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
     52a:	15 8a       	std	Z+21, r1	; 0x15
		twi->result = TWIS_RESULT_BUS_ERROR;
     52c:	84 e0       	ldi	r24, 0x04	; 4
     52e:	87 8b       	std	Z+23, r24	; 0x17
		twi->status = TWIS_STATUS_READY;
     530:	16 8a       	std	Z+22, r1	; 0x16
     532:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
     534:	43 ff       	sbrs	r20, 3
     536:	06 c0       	rjmp	.+12     	; 0x544 <TWI_SlaveInterruptHandler+0x30>
		twi->bytesReceived = 0;
     538:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
     53a:	15 8a       	std	Z+21, r1	; 0x15
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
     53c:	83 e0       	ldi	r24, 0x03	; 3
     53e:	87 8b       	std	Z+23, r24	; 0x17
		twi->status = TWIS_STATUS_READY;
     540:	16 8a       	std	Z+22, r1	; 0x16
     542:	08 95       	ret
 *  Handles all TWI transactions and responses to address match, data reception,
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
     544:	9c 01       	movw	r18, r24
     546:	21 74       	andi	r18, 0x41	; 65
     548:	30 70       	andi	r19, 0x00	; 0
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
		twi->status = TWIS_STATUS_READY;
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
     54a:	21 34       	cpi	r18, 0x41	; 65
     54c:	31 05       	cpc	r19, r1
     54e:	11 f4       	brne	.+4      	; 0x554 <TWI_SlaveInterruptHandler+0x40>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
     550:	cf 01       	movw	r24, r30
     552:	c0 cf       	rjmp	.-128    	; 0x4d4 <TWI_SlaveAddressMatchHandler>
     554:	46 ff       	sbrs	r20, 6
     556:	02 c0       	rjmp	.+4      	; 0x55c <TWI_SlaveInterruptHandler+0x48>
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
     558:	cf 01       	movw	r24, r30
     55a:	ae cf       	rjmp	.-164    	; 0x4b8 <TWI_SlaveStopHandler>
		TWI_SlaveStopHandler(twi);
     55c:	44 23       	and	r20, r20
     55e:	14 f4       	brge	.+4      	; 0x564 <TWI_SlaveInterruptHandler+0x50>
     560:	cf 01       	movw	r24, r30
     562:	a1 cf       	rjmp	.-190    	; 0x4a6 <TWI_SlaveDataHandler>
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
     564:	cf 01       	movw	r24, r30
     566:	65 e0       	ldi	r22, 0x05	; 5
		TWI_SlaveDataHandler(twi);
     568:	36 cf       	rjmp	.-404    	; 0x3d6 <TWI_SlaveTransactionFinished>

0000056a <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	80 93 70 00 	sts	0x0070, r24
     570:	80 93 71 00 	sts	0x0071, r24
     574:	80 93 72 00 	sts	0x0072, r24
     578:	80 93 73 00 	sts	0x0073, r24
     57c:	80 93 74 00 	sts	0x0074, r24
     580:	80 93 75 00 	sts	0x0075, r24
     584:	80 93 76 00 	sts	0x0076, r24
	irqflags_t flags;

	Assert(id == OSC_ID_XOSC);

#ifndef CONFIG_XOSC_32KHZ_LPM
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
     588:	e0 e5       	ldi	r30, 0x50	; 80
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	8b e4       	ldi	r24, 0x4B	; 75
     58e:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     590:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     592:	f8 94       	cli
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     594:	90 81       	ld	r25, Z
     596:	98 60       	ori	r25, 0x08	; 8
     598:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     59a:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     59c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     59e:	83 ff       	sbrs	r24, 3
     5a0:	fd cf       	rjmp	.-6      	; 0x59c <sysclk_init+0x32>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     5a2:	80 e4       	ldi	r24, 0x40	; 64
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	63 e0       	ldi	r22, 0x03	; 3
     5a8:	90 d5       	rcall	.+2848   	; 0x10ca <ccp_write_io>
     5aa:	8f b7       	in	r24, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     5ac:	f8 94       	cli
	cpu_irq_disable();
     5ae:	e0 e5       	ldi	r30, 0x50	; 80
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	90 81       	ld	r25, Z
     5b4:	9e 7f       	andi	r25, 0xFE	; 254
     5b6:	90 83       	st	Z, r25
     5b8:	8f bf       	out	0x3f, r24	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5ba:	08 95       	ret

000005bc <sysclk_enable_module>:
				CONFIG_OSC_AUTOCAL_RC2MHZ_REF_OSC);
#endif
	} else {
		osc_disable(OSC_ID_RC2MHZ);
	}
}
     5bc:	2f b7       	in	r18, 0x3f	; 63
typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
	cpu_irq_disable();
     5be:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     5c0:	fc 01       	movw	r30, r24
     5c2:	e0 59       	subi	r30, 0x90	; 144
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	60 95       	com	r22
     5c8:	80 81       	ld	r24, Z
     5ca:	68 23       	and	r22, r24
     5cc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5ce:	2f bf       	out	0x3f, r18	; 63

	cpu_irq_restore(flags);
}
     5d0:	08 95       	ret

000005d2 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     5d2:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     5d4:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     5d6:	fc 01       	movw	r30, r24
     5d8:	e0 59       	subi	r30, 0x90	; 144
     5da:	ff 4f       	sbci	r31, 0xFF	; 255
     5dc:	80 81       	ld	r24, Z
     5de:	68 2b       	or	r22, r24
     5e0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5e2:	2f bf       	out	0x3f, r18	; 63

	cpu_irq_restore(flags);
}
     5e4:	08 95       	ret

000005e6 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	ec 01       	movw	r28, r24
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
     5ec:	fc 01       	movw	r30, r24
     5ee:	70 96       	adiw	r30, 0x10	; 16
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     5f4:	a6 2f       	mov	r26, r22
     5f6:	b0 e0       	ldi	r27, 0x00	; 0
     5f8:	cd 01       	movw	r24, r26
     5fa:	02 2e       	mov	r0, r18
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <ioport_configure_port_pin+0x1c>
     5fe:	95 95       	asr	r25
     600:	87 95       	ror	r24
     602:	0a 94       	dec	r0
     604:	e2 f7       	brpl	.-8      	; 0x5fe <ioport_configure_port_pin+0x18>
     606:	80 fd       	sbrc	r24, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     608:	50 83       	st	Z, r21
     60a:	2f 5f       	subi	r18, 0xFF	; 255
     60c:	3f 4f       	sbci	r19, 0xFF	; 255
     60e:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     610:	28 30       	cpi	r18, 0x08	; 8
     612:	31 05       	cpc	r19, r1
     614:	89 f7       	brne	.-30     	; 0x5f8 <ioport_configure_port_pin+0x12>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     616:	40 ff       	sbrs	r20, 0
     618:	07 c0       	rjmp	.+14     	; 0x628 <ioport_configure_port_pin+0x42>
		if (flags & IOPORT_INIT_HIGH) {
     61a:	41 ff       	sbrs	r20, 1
     61c:	02 c0       	rjmp	.+4      	; 0x622 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     61e:	6d 83       	std	Y+5, r22	; 0x05
     620:	01 c0       	rjmp	.+2      	; 0x624 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     622:	6e 83       	std	Y+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     624:	69 83       	std	Y+1, r22	; 0x01
     626:	01 c0       	rjmp	.+2      	; 0x62a <ioport_configure_port_pin+0x44>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     628:	6a 83       	std	Y+2, r22	; 0x02
	}
}
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	ec 01       	movw	r28, r24
	if((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B,PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if((uint16_t)spi == (uint16_t)&SPIC) {
     636:	88 e0       	ldi	r24, 0x08	; 8
     638:	c0 3c       	cpi	r28, 0xC0	; 192
     63a:	d8 07       	cpc	r29, r24
     63c:	29 f4       	brne	.+10     	; 0x648 <spi_master_init+0x18>
		sysclk_enable_module(SYSCLK_PORT_C,PR_SPI_bm);
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	68 e0       	ldi	r22, 0x08	; 8
     644:	bb df       	rcall	.-138    	; 0x5bc <sysclk_enable_module>
     646:	12 c0       	rjmp	.+36     	; 0x66c <spi_master_init+0x3c>
     648:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef SPID
	if((uint16_t)spi == (uint16_t)&SPID) {
     64a:	c0 3c       	cpi	r28, 0xC0	; 192
     64c:	d8 07       	cpc	r29, r24
     64e:	29 f4       	brne	.+10     	; 0x65a <spi_master_init+0x2a>
     650:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_D,PR_SPI_bm);
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	68 e0       	ldi	r22, 0x08	; 8
     656:	b2 df       	rcall	.-156    	; 0x5bc <sysclk_enable_module>
     658:	11 c0       	rjmp	.+34     	; 0x67c <spi_master_init+0x4c>
     65a:	8a e0       	ldi	r24, 0x0A	; 10
     65c:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPIE
	if((uint16_t)spi == (uint16_t)&SPIE) {
     65e:	d8 07       	cpc	r29, r24
     660:	29 f4       	brne	.+10     	; 0x66c <spi_master_init+0x3c>
     662:	85 e0       	ldi	r24, 0x05	; 5
     664:	90 e0       	ldi	r25, 0x00	; 0
		sysclk_enable_module(SYSCLK_PORT_E,PR_SPI_bm);
     666:	68 e0       	ldi	r22, 0x08	; 8
     668:	a9 df       	rcall	.-174    	; 0x5bc <sysclk_enable_module>
     66a:	08 c0       	rjmp	.+16     	; 0x67c <spi_master_init+0x4c>
     66c:	8b e0       	ldi	r24, 0x0B	; 11
     66e:	c0 3c       	cpi	r28, 0xC0	; 192
     670:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef SPIF
	if((uint16_t)spi == (uint16_t)&SPIF) {
     672:	21 f4       	brne	.+8      	; 0x67c <spi_master_init+0x4c>
     674:	86 e0       	ldi	r24, 0x06	; 6
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	68 e0       	ldi	r22, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_F,PR_SPI_bm);
     67a:	a0 df       	rcall	.-192    	; 0x5bc <sysclk_enable_module>
     67c:	88 81       	ld	r24, Y
     67e:	80 61       	ori	r24, 0x10	; 16
     680:	88 83       	st	Y, r24
     682:	df 91       	pop	r29
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <spi_master_setup_device>:
     688:	ff 92       	push	r15
	}
#endif
	spi_enable_master_mode(spi);
}
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
     spi_flags_t flags, uint32_t baud_rate,
     board_spi_select_id_t sel_id)
{
     690:	df 93       	push	r29
     692:	ec 01       	movw	r28, r24
     694:	f4 2e       	mov	r15, r20
     696:	b9 01       	movw	r22, r18
     698:	a8 01       	movw	r20, r16
	if(spi_xmega_set_baud_div(spi, baud_rate,sysclk_get_cpu_hz())<0)
     69a:	00 e0       	ldi	r16, 0x00	; 0
     69c:	12 e1       	ldi	r17, 0x12	; 18
     69e:	2a e7       	ldi	r18, 0x7A	; 122
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	23 d5       	rcall	.+2630   	; 0x10ea <spi_xmega_set_baud_div>
     6a4:	88 81       	ld	r24, Y
	{
		//TODO Assert impossible baudrate
	}
	spi->CTRL|=(flags<<SPI_MODE_gp)&SPI_MODE_gm;
     6a6:	ff 0c       	add	r15, r15
     6a8:	ff 0c       	add	r15, r15
     6aa:	9c e0       	ldi	r25, 0x0C	; 12
     6ac:	f9 22       	and	r15, r25
     6ae:	f8 2a       	or	r15, r24
     6b0:	f8 82       	st	Y, r15
     6b2:	df 91       	pop	r29
}
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	08 95       	ret

000006be <spi_write_packet>:
     6be:	fc 01       	movw	r30, r24
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi,const uint8_t *data, size_t len)
{
	size_t i=0;
	while(len) {
     6c0:	41 15       	cp	r20, r1
     6c2:	51 05       	cpc	r21, r1
     6c4:	51 f0       	breq	.+20     	; 0x6da <spi_write_packet+0x1c>
     6c6:	a6 2f       	mov	r26, r22
     6c8:	b7 2f       	mov	r27, r23
		spi_write_single(spi,*(data+i));
     6ca:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     6cc:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
		while(!spi_is_rx_full(spi));
     6d0:	88 23       	and	r24, r24
     6d2:	ec f7       	brge	.-6      	; 0x6ce <spi_write_packet+0x10>
		len--;
     6d4:	41 50       	subi	r20, 0x01	; 1
     6d6:	50 40       	sbci	r21, 0x00	; 0
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi,const uint8_t *data, size_t len)
{
	size_t i=0;
	while(len) {
     6d8:	c1 f7       	brne	.-16     	; 0x6ca <spi_write_packet+0xc>
		while(!spi_is_rx_full(spi));
		len--;
		i++;
	}
	return STATUS_OK;
}
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 95       	ret

000006e0 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
     6e0:	fb 01       	movw	r30, r22
     6e2:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static inline ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     6e4:	e8 2f       	mov	r30, r24
     6e6:	e6 95       	lsr	r30
     6e8:	e6 95       	lsr	r30
     6ea:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	f0 96       	adiw	r30, 0x30	; 48
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	e2 95       	swap	r30
     6f6:	f2 95       	swap	r31
     6f8:	f0 7f       	andi	r31, 0xF0	; 240
     6fa:	fe 27       	eor	r31, r30
     6fc:	e0 7f       	andi	r30, 0xF0	; 240
     6fe:	fe 27       	eor	r31, r30
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     700:	87 70       	andi	r24, 0x07	; 7
     702:	21 e0       	ldi	r18, 0x01	; 1
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	a9 01       	movw	r20, r18
     708:	02 c0       	rjmp	.+4      	; 0x70e <spi_select_device+0x2e>
     70a:	44 0f       	add	r20, r20
     70c:	55 1f       	adc	r21, r21
     70e:	8a 95       	dec	r24
     710:	e2 f7       	brpl	.-8      	; 0x70a <spi_select_device+0x2a>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     712:	46 83       	std	Z+6, r20	; 0x06
}
     714:	08 95       	ret

00000716 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
     716:	fb 01       	movw	r30, r22
     718:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static inline ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     71a:	e8 2f       	mov	r30, r24
     71c:	e6 95       	lsr	r30
     71e:	e6 95       	lsr	r30
     720:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	f0 96       	adiw	r30, 0x30	; 48
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	e2 95       	swap	r30
     72c:	f2 95       	swap	r31
     72e:	f0 7f       	andi	r31, 0xF0	; 240
     730:	fe 27       	eor	r31, r30
     732:	e0 7f       	andi	r30, 0xF0	; 240
     734:	fe 27       	eor	r31, r30
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     736:	87 70       	andi	r24, 0x07	; 7
     738:	21 e0       	ldi	r18, 0x01	; 1
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	a9 01       	movw	r20, r18
     73e:	02 c0       	rjmp	.+4      	; 0x744 <spi_deselect_device+0x2e>
     740:	44 0f       	add	r20, r20
     742:	55 1f       	adc	r21, r21
     744:	8a 95       	dec	r24
     746:	e2 f7       	brpl	.-8      	; 0x740 <spi_deselect_device+0x2a>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     748:	45 83       	std	Z+5, r20	; 0x05
}
     74a:	08 95       	ret

0000074c <bcr_init>:
#include <asf.h>
#include <board.h>

static void uart_init(void);

void bcr_init(void) {
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	29 97       	sbiw	r28, 0x09	; 9
     756:	cd bf       	out	0x3d, r28	; 61
     758:	de bf       	out	0x3e, r29	; 62
	//Setup clock (8Mhz XOSC) and power control
	sysclk_init();
     75a:	07 df       	rcall	.-498    	; 0x56a <sysclk_init>
     75c:	87 e0       	ldi	r24, 0x07	; 7
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
     75e:	e0 ea       	ldi	r30, 0xA0	; 160
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	82 83       	std	Z+2, r24	; 0x02
     764:	0c d1       	rcall	.+536    	; 0x97e <bcr_adc_init>
	pmic_init();
	
	//Start ADC sampling
	bcr_adc_init();
     766:	3d d1       	rcall	.+634    	; 0x9e2 <bcr_dac_init>
     768:	80 e0       	ldi	r24, 0x00	; 0
	
	//Setup DAC SPI
	bcr_dac_init();
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	80 93 34 21 	sts	0x2134, r24
	
	//Default ISETs to 512
	bcr_dac.ISET_ZM = 512;
     770:	90 93 35 21 	sts	0x2135, r25
     774:	80 93 32 21 	sts	0x2132, r24
     778:	90 93 33 21 	sts	0x2133, r25
	bcr_dac.ISET_YM = 512;
     77c:	80 93 30 21 	sts	0x2130, r24
     780:	90 93 31 21 	sts	0x2131, r25
	bcr_dac.ISET_XM = 512;
     784:	80 93 2a 21 	sts	0x212A, r24
     788:	90 93 2b 21 	sts	0x212B, r25
	bcr_dac.ISET_ZP = 512;
     78c:	80 93 28 21 	sts	0x2128, r24
     790:	90 93 29 21 	sts	0x2129, r25
	bcr_dac.ISET_YP = 512;
     794:	80 93 26 21 	sts	0x2126, r24
     798:	90 93 27 21 	sts	0x2127, r25
	bcr_dac.ISET_XP = 512;
     79c:	5c d1       	rcall	.+696    	; 0xa56 <bcr_dac_update>
     79e:	80 ea       	ldi	r24, 0xA0	; 160
     7a0:	96 e0       	ldi	r25, 0x06	; 6
	bcr_dac_update();
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	41 e0       	ldi	r20, 0x01	; 1
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	1e df       	rcall	.-452    	; 0x5e6 <ioport_configure_port_pin>
     7aa:	80 ea       	ldi	r24, 0xA0	; 160
     7ac:	96 e0       	ldi	r25, 0x06	; 6
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	18 df       	rcall	.-464    	; 0x5e6 <ioport_configure_port_pin>
     7b6:	80 ea       	ldi	r24, 0xA0	; 160
     7b8:	96 e0       	ldi	r25, 0x06	; 6
     7ba:	64 e0       	ldi	r22, 0x04	; 4
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	12 df       	rcall	.-476    	; 0x5e6 <ioport_configure_port_pin>
     7c2:	80 ea       	ldi	r24, 0xA0	; 160
     7c4:	96 e0       	ldi	r25, 0x06	; 6
     7c6:	68 e0       	ldi	r22, 0x08	; 8
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	0c df       	rcall	.-488    	; 0x5e6 <ioport_configure_port_pin>
     7ce:	80 ea       	ldi	r24, 0xA0	; 160
     7d0:	96 e0       	ldi	r25, 0x06	; 6
     7d2:	60 e1       	ldi	r22, 0x10	; 16
     7d4:	41 e0       	ldi	r20, 0x01	; 1
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	06 df       	rcall	.-500    	; 0x5e6 <ioport_configure_port_pin>
     7da:	80 ea       	ldi	r24, 0xA0	; 160
     7dc:	96 e0       	ldi	r25, 0x06	; 6
     7de:	60 e2       	ldi	r22, 0x20	; 32
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	00 df       	rcall	.-512    	; 0x5e6 <ioport_configure_port_pin>
     7e6:	80 ea       	ldi	r24, 0xA0	; 160
     7e8:	96 e0       	ldi	r25, 0x06	; 6
     7ea:	60 e4       	ldi	r22, 0x40	; 64
     7ec:	43 e0       	ldi	r20, 0x03	; 3
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	fa de       	rcall	.-524    	; 0x5e6 <ioport_configure_port_pin>
     7f2:	bf dd       	rcall	.-1154   	; 0x372 <i2c_init>
     7f4:	80 e8       	ldi	r24, 0x80	; 128
     7f6:	96 e0       	ldi	r25, 0x06	; 6
     7f8:	68 e0       	ldi	r22, 0x08	; 8
     7fa:	43 e0       	ldi	r20, 0x03	; 3
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	f3 de       	rcall	.-538    	; 0x5e6 <ioport_configure_port_pin>
     800:	80 e8       	ldi	r24, 0x80	; 128
     802:	96 e0       	ldi	r25, 0x06	; 6
     804:	64 e0       	ldi	r22, 0x04	; 4
     806:	40 e0       	ldi	r20, 0x00	; 0
	
	//Setup TimerBlox enable pin, default to enabled.
	ioport_configure_pin(SYNC_EN, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	
	//I2C stuff
	i2c_init();
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	ed de       	rcall	.-550    	; 0x5e6 <ioport_configure_port_pin>
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	8d 83       	std	Y+5, r24	; 0x05
     812:	9e 83       	std	Y+6, r25	; 0x06
     814:	1f 82       	std	Y+7, r1	; 0x07
     816:	18 86       	std	Y+8, r1	; 0x08
     818:	19 86       	std	Y+9, r1	; 0x09
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	92 ec       	ldi	r25, 0xC2	; 194
     81e:	a1 e0       	ldi	r26, 0x01	; 1
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	9a 83       	std	Y+2, r25	; 0x02
     826:	ab 83       	std	Y+3, r26	; 0x03
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     828:	bc 83       	std	Y+4, r27	; 0x04
     82a:	85 e0       	ldi	r24, 0x05	; 5
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	60 e1       	ldi	r22, 0x10	; 16
	usart_rs232_options.paritytype   = options->paritytype;
     830:	c5 de       	rcall	.-630    	; 0x5bc <sysclk_enable_module>
     832:	80 ea       	ldi	r24, 0xA0	; 160
	usart_rs232_options.stopbits     = options->stopbits;
     834:	9a e0       	ldi	r25, 0x0A	; 10
	usart_rs232_options.baudrate     = options->baudrate;
     836:	be 01       	movw	r22, r28
     838:	6f 5f       	subi	r22, 0xFF	; 255
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	c3 d5       	rcall	.+2950   	; 0x13c4 <usart_init_rs232>
     83e:	29 96       	adiw	r28, 0x09	; 9
     840:	cd bf       	out	0x3d, r28	; 61
     842:	de bf       	out	0x3e, r29	; 62
     844:	df 91       	pop	r29
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <adc_setup>:
}

//Sets up ADC in 12-bit mode, with AREFA reference, manually triggered and with adc_handler as the interrupt callback
//Sets up ADC's CH0 to sample Pin0 in single ended mode with interrupts. 
static void adc_setup(ADC_t* adc)
{
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	2a 97       	sbiw	r28, 0x0a	; 10
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	8c 01       	movw	r16, r24
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;

	adc_read_configuration(adc, &adc_conf);
     85e:	be 01       	movw	r22, r28
     860:	6f 5f       	subi	r22, 0xFF	; 255
     862:	7f 4f       	sbci	r23, 0xFF	; 255
     864:	a1 d3       	rcall	.+1858   	; 0xfa8 <adc_read_configuration>
     866:	8a 81       	ldd	r24, Y+2	; 0x02
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     868:	9b 81       	ldd	r25, Y+3	; 0x03
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     86a:	9f 7c       	andi	r25, 0xCF	; 207
     86c:	90 62       	ori	r25, 0x20	; 32
	conf->refctrl |= ref;
     86e:	9b 83       	std	Y+3, r25	; 0x03
     870:	81 7e       	andi	r24, 0xE1	; 225
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     872:	8a 83       	std	Y+2, r24	; 0x02
     874:	1c 82       	std	Y+4, r1	; 0x04
		conf->evctrl = ADC_EVACT_NONE_gc;
     876:	87 e0       	ldi	r24, 0x07	; 7
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     878:	8d 83       	std	Y+5, r24	; 0x05
     87a:	c8 01       	movw	r24, r16
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_12, ADC_REF_AREFA);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 5000UL);
	adc_set_callback(adc, &adc_handler);
     87c:	61 e6       	ldi	r22, 0x61	; 97
     87e:	74 e0       	ldi	r23, 0x04	; 4
     880:	35 d1       	rcall	.+618    	; 0xaec <adc_set_callback>
     882:	c8 01       	movw	r24, r16
     884:	be 01       	movw	r22, r28
	adc_write_configuration(adc, &adc_conf);
     886:	6f 5f       	subi	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	2c d3       	rcall	.+1624   	; 0xee4 <adc_write_configuration>
     88c:	c8 01       	movw	r24, r16
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	ae 01       	movw	r20, r28
	
	//Setup CH0
	adcch_read_configuration(adc, ADC_CH0, &adcch_conf);
     892:	48 5f       	subi	r20, 0xF8	; 248
     894:	5f 4f       	sbci	r21, 0xFF	; 255
     896:	e2 d3       	rcall	.+1988   	; 0x105c <adcch_read_configuration>
     898:	8a 85       	ldd	r24, Y+10	; 0x0a
     89a:	8c 7f       	andi	r24, 0xFC	; 252
     89c:	81 60       	ori	r24, 0x01	; 1
     89e:	8a 87       	std	Y+10, r24	; 0x0a
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	88 87       	std	Y+8, r24	; 0x08
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
     8a4:	19 86       	std	Y+9, r1	; 0x09
     8a6:	c8 01       	movw	r24, r16

	/* Configure for single-ended measurement. */
	if (neg == ADCCH_NEG_NONE) {
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	ae 01       	movw	r20, r28
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     8ac:	48 5f       	subi	r20, 0xF8	; 248
	adcch_enable_interrupt(&adcch_conf);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(adc, ADC_CH0, &adcch_conf);
     8ae:	5f 4f       	sbci	r21, 0xFF	; 255
     8b0:	9e d3       	rcall	.+1852   	; 0xfee <adcch_write_configuration>
     8b2:	2a 96       	adiw	r28, 0x0a	; 10
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
}
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <adc_handler>:
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28

//Interrupt handler for ADC samples
//Reads result into bcr_adc and starts sample on next pin on ADC.
//(We can't use DMA because we have to change input multiplexers on each sample)
static void adc_handler(ADC_t *adc, uint8_t ch_mask, adc_result_t result)
{
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <adc_handler+0xe>
     8d0:	0f 92       	push	r0
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	8c 01       	movw	r16, r24
     8d8:	7a 01       	movw	r14, r20
	struct adc_channel_config adcch_conf;
	uint8_t muxpos;
	uint16_t* result_store;
	
	//All ADC samples should be done on CH0 (This loses pipelining, but ADC speed isn't a worry)
	if ( ch_mask != ADC_CH0 )
     8da:	61 30       	cpi	r22, 0x01	; 1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <adc_handler+0x1e>
     8de:	45 c0       	rjmp	.+138    	; 0x96a <adc_handler+0xa8>
		return;
		
	//Read sampled muxpos
	adcch_read_configuration(adc, ADC_CH0, &adcch_conf);
     8e0:	ae 01       	movw	r20, r28
     8e2:	4f 5f       	subi	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	ba d3       	rcall	.+1908   	; 0x105c <adcch_read_configuration>
     8e8:	4a 81       	ldd	r20, Y+2	; 0x02
	muxpos = (adcch_conf.muxctrl&ADC_CH_MUXPOS_gm) >> ADC_CH_MUXPOS_gp;
     8ea:	84 2f       	mov	r24, r20
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	88 77       	andi	r24, 0x78	; 120
     8f0:	90 70       	andi	r25, 0x00	; 0
     8f2:	95 95       	asr	r25
     8f4:	87 95       	ror	r24
     8f6:	95 95       	asr	r25
     8f8:	87 95       	ror	r24
     8fa:	95 95       	asr	r25
     8fc:	87 95       	ror	r24
     8fe:	92 e0       	ldi	r25, 0x02	; 2
	
	//Use pointer arithmetic to store result into bcr_adc
	if (adc == &ADCA) //ADCA0-ADCA7
     900:	00 30       	cpi	r16, 0x00	; 0
     902:	19 07       	cpc	r17, r25
     904:	39 f4       	brne	.+14     	; 0x914 <adc_handler+0x52>
     906:	e8 2f       	mov	r30, r24
		result_store = ((uint16_t*)&bcr_adc) + muxpos;
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	ea 5c       	subi	r30, 0xCA	; 202
     910:	fe 4d       	sbci	r31, 0xDE	; 222
     912:	06 c0       	rjmp	.+12     	; 0x920 <adc_handler+0x5e>
     914:	e8 2f       	mov	r30, r24
	else //ADCB0-ADCB7
		result_store = ((uint16_t*)&bcr_adc) + muxpos + 8;
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	ee 0f       	add	r30, r30
     91a:	ff 1f       	adc	r31, r31
     91c:	ea 5b       	subi	r30, 0xBA	; 186
     91e:	fe 4d       	sbci	r31, 0xDE	; 222
     920:	e0 82       	st	Z, r14
	*result_store = result;
     922:	f1 82       	std	Z+1, r15	; 0x01
     924:	88 23       	and	r24, r24
	if (muxpos != 0)
     926:	29 f0       	breq	.+10     	; 0x932 <adc_handler+0x70>
     928:	97 01       	movw	r18, r14
		*result_store -= 188; // Subtract offset
     92a:	2c 5b       	subi	r18, 0xBC	; 188
     92c:	30 40       	sbci	r19, 0x00	; 0
     92e:	20 83       	st	Z, r18
     930:	31 83       	std	Z+1, r19	; 0x01
     932:	90 e0       	ldi	r25, 0x00	; 0
	
	//Increment and store muxpos into CH0 config
	muxpos = (muxpos+1)%8;
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	68 e0       	ldi	r22, 0x08	; 8
	adcch_conf.muxctrl = (adcch_conf.muxctrl & ~ADC_CH_MUXPOS_gm) | (muxpos<<ADC_CH_MUXPOS_gp);
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__divmodhi4>
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	47 78       	andi	r20, 0x87	; 135
     94c:	84 2b       	or	r24, r20
     94e:	8a 83       	std	Y+2, r24	; 0x02
     950:	c8 01       	movw	r24, r16
	adcch_write_configuration(adc, ADC_CH0, &adcch_conf);
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	ae 01       	movw	r20, r28
     956:	4f 5f       	subi	r20, 0xFF	; 255
     958:	5f 4f       	sbci	r21, 0xFF	; 255
     95a:	49 d3       	rcall	.+1682   	; 0xfee <adcch_write_configuration>
     95c:	8f b7       	in	r24, 0x3f	; 63
     95e:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     960:	f8 01       	movw	r30, r16
	cpu_irq_disable();
     962:	90 81       	ld	r25, Z
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     964:	94 60       	ori	r25, 0x04	; 4
     966:	90 83       	st	Z, r25
     968:	8f bf       	out	0x3f, r24	; 63
     96a:	23 96       	adiw	r28, 0x03	; 3
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     96c:	cd bf       	out	0x3d, r28	; 61
	
	//Start conversion on the next pin (will eventually trigger another adc_handler)
	adc_start_conversion(adc, ADC_CH0);
}
     96e:	de bf       	out	0x3e, r29	; 62
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	08 95       	ret

0000097e <bcr_adc_init>:
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	92 e0       	ldi	r25, 0x02	; 2
}

void bcr_adc_init(void)
{
	//Setup ADCs
	adc_setup(&ADCA);
     982:	63 df       	rcall	.-314    	; 0x84a <adc_setup>
     984:	80 e4       	ldi	r24, 0x40	; 64
	adc_setup(&ADCB);
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	60 df       	rcall	.-320    	; 0x84a <adc_setup>
     98a:	78 94       	sei
     98c:	e0 e0       	ldi	r30, 0x00	; 0
	
	//Ensure interrupts are enabled
	cpu_irq_enable();
     98e:	f6 e0       	ldi	r31, 0x06	; 6
	
	//Disable Internal Pullups
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc;
     990:	10 8a       	std	Z+16, r1	; 0x10
     992:	11 8a       	std	Z+17, r1	; 0x11
     994:	12 8a       	std	Z+18, r1	; 0x12
	PORTA.PIN1CTRL = PORT_OPC_TOTEM_gc;
     996:	13 8a       	std	Z+19, r1	; 0x13
	PORTA.PIN2CTRL = PORT_OPC_TOTEM_gc;
     998:	14 8a       	std	Z+20, r1	; 0x14
	PORTA.PIN3CTRL = PORT_OPC_TOTEM_gc;
     99a:	15 8a       	std	Z+21, r1	; 0x15
	PORTA.PIN4CTRL = PORT_OPC_TOTEM_gc;
     99c:	16 8a       	std	Z+22, r1	; 0x16
	PORTA.PIN5CTRL = PORT_OPC_TOTEM_gc;
     99e:	17 8a       	std	Z+23, r1	; 0x17
	PORTA.PIN6CTRL = PORT_OPC_TOTEM_gc;
     9a0:	e0 e2       	ldi	r30, 0x20	; 32
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc;
     9a2:	f6 e0       	ldi	r31, 0x06	; 6
	PORTB.PIN0CTRL = PORT_OPC_TOTEM_gc;
     9a4:	10 8a       	std	Z+16, r1	; 0x10
     9a6:	11 8a       	std	Z+17, r1	; 0x11
     9a8:	12 8a       	std	Z+18, r1	; 0x12
	PORTB.PIN1CTRL = PORT_OPC_TOTEM_gc;
     9aa:	13 8a       	std	Z+19, r1	; 0x13
	PORTB.PIN2CTRL = PORT_OPC_TOTEM_gc;
     9ac:	14 8a       	std	Z+20, r1	; 0x14
	PORTB.PIN3CTRL = PORT_OPC_TOTEM_gc;
     9ae:	15 8a       	std	Z+21, r1	; 0x15
	PORTB.PIN4CTRL = PORT_OPC_TOTEM_gc;
     9b0:	16 8a       	std	Z+22, r1	; 0x16
	PORTB.PIN5CTRL = PORT_OPC_TOTEM_gc;
     9b2:	17 8a       	std	Z+23, r1	; 0x17
	PORTB.PIN6CTRL = PORT_OPC_TOTEM_gc;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
	PORTB.PIN7CTRL = PORT_OPC_TOTEM_gc;
     9b6:	92 e0       	ldi	r25, 0x02	; 2
	
	//Enable ADCs
	adc_enable(&ADCA);
     9b8:	ee d0       	rcall	.+476    	; 0xb96 <adc_enable>
     9ba:	80 e4       	ldi	r24, 0x40	; 64
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	eb d0       	rcall	.+470    	; 0xb96 <adc_enable>
	adc_enable(&ADCB);
     9c0:	8f b7       	in	r24, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f2 e0       	ldi	r31, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     9c8:	90 81       	ld	r25, Z
	cpu_irq_disable();
     9ca:	94 60       	ori	r25, 0x04	; 4
     9cc:	90 83       	st	Z, r25
     9ce:	8f bf       	out	0x3f, r24	; 63
     9d0:	8f b7       	in	r24, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	e0 e4       	ldi	r30, 0x40	; 64
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9d6:	f2 e0       	ldi	r31, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     9d8:	90 81       	ld	r25, Z
	cpu_irq_disable();
     9da:	94 60       	ori	r25, 0x04	; 4
     9dc:	90 83       	st	Z, r25
     9de:	8f bf       	out	0x3f, r24	; 63
     9e0:	08 95       	ret

000009e2 <bcr_dac_init>:

static struct spi_device spi_device_conf = {
	.id = DAC_SS
};

void bcr_dac_init(void) {
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	80 e4       	ldi	r24, 0x40	; 64
     9f0:	96 e0       	ldi	r25, 0x06	; 6
     9f2:	60 e1       	ldi	r22, 0x10	; 16
     9f4:	43 e0       	ldi	r20, 0x03	; 3
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	f6 dd       	rcall	.-1044   	; 0x5e6 <ioport_configure_port_pin>
     9fa:	80 e4       	ldi	r24, 0x40	; 64
     9fc:	96 e0       	ldi	r25, 0x06	; 6
     9fe:	60 e2       	ldi	r22, 0x20	; 32
     a00:	43 e0       	ldi	r20, 0x03	; 3
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	f0 dd       	rcall	.-1056   	; 0x5e6 <ioport_configure_port_pin>
     a06:	80 e4       	ldi	r24, 0x40	; 64
     a08:	96 e0       	ldi	r25, 0x06	; 6
     a0a:	60 e4       	ldi	r22, 0x40	; 64
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	ea dd       	rcall	.-1068   	; 0x5e6 <ioport_configure_port_pin>
     a12:	80 e4       	ldi	r24, 0x40	; 64
     a14:	96 e0       	ldi	r25, 0x06	; 6
     a16:	60 e8       	ldi	r22, 0x80	; 128
     a18:	43 e0       	ldi	r20, 0x03	; 3
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	e4 dd       	rcall	.-1080   	; 0x5e6 <ioport_configure_port_pin>
     a1e:	80 ec       	ldi	r24, 0xC0	; 192
     a20:	98 e0       	ldi	r25, 0x08	; 8
     a22:	06 de       	rcall	.-1012   	; 0x630 <spi_master_init>
     a24:	80 ec       	ldi	r24, 0xC0	; 192
	ioport_configure_pin(DAC_MOSI, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	ioport_configure_pin(DAC_MISO, IOPORT_DIR_INPUT);
	ioport_configure_pin(DAC_SCK, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT);
	
	//Init module
	spi_master_init(&SPIC);
     a26:	98 e0       	ldi	r25, 0x08	; 8
     a28:	6a e1       	ldi	r22, 0x1A	; 26
     a2a:	71 e2       	ldi	r23, 0x21	; 33
     a2c:	40 e0       	ldi	r20, 0x00	; 0
	spi_master_setup_device(&SPIC, &spi_device_conf, SPI_MODE_0, DAC_BAUD, 0);
     a2e:	00 e4       	ldi	r16, 0x40	; 64
     a30:	12 e4       	ldi	r17, 0x42	; 66
     a32:	2f e0       	ldi	r18, 0x0F	; 15
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	cc 24       	eor	r12, r12
     a38:	dd 24       	eor	r13, r13
     a3a:	76 01       	movw	r14, r12
     a3c:	25 de       	rcall	.-950    	; 0x688 <spi_master_setup_device>
     a3e:	e0 ec       	ldi	r30, 0xC0	; 192
     a40:	f8 e0       	ldi	r31, 0x08	; 8
     a42:	80 81       	ld	r24, Z
     a44:	80 64       	ori	r24, 0x40	; 64
     a46:	80 83       	st	Z, r24
     a48:	1f 91       	pop	r17
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
	spi_enable(&SPIC);
}
     a54:	08 95       	ret

00000a56 <bcr_dac_update>:
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
	spi_write_packet(&SPIC, spi_packet, 2);
	spi_deselect_device(&SPIC, &spi_device_conf);
}

//Updates all 8 DAC pins
void bcr_dac_update(void) {
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	00 d0       	rcall	.+0      	; 0xa68 <bcr_dac_update+0x12>
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	0f 2e       	mov	r0, r31
     a6e:	f6 e2       	ldi	r31, 0x26	; 38
     a70:	ef 2e       	mov	r14, r31
     a72:	f1 e2       	ldi	r31, 0x21	; 33
     a74:	ff 2e       	mov	r15, r31
     a76:	f0 2d       	mov	r31, r0
     a78:	01 e0       	ldi	r16, 0x01	; 1
     a7a:	10 e0       	ldi	r17, 0x00	; 0
static void bcr_dac_update_pin(uint8_t pin, uint16_t value) {
	uint16_t dac_word = ((pin&0xF)<<12) | ((value&0x3FF)<<2);
	uint8_t spi_packet[2] = {(uint8_t)(dac_word>>8), (uint8_t)dac_word};
		
	//Write packet over spi
	spi_select_device(&SPIC, &spi_device_conf);
     a7c:	0f 2e       	mov	r0, r31
     a7e:	fa e1       	ldi	r31, 0x1A	; 26
     a80:	cf 2e       	mov	r12, r31
     a82:	f1 e2       	ldi	r31, 0x21	; 33
     a84:	df 2e       	mov	r13, r31
     a86:	f0 2d       	mov	r31, r0

//Updates all 8 DAC pins
void bcr_dac_update(void) {
	for (uint16_t i=0; i<8; i++)
		//bcr_dac_update_pin(i+1, 255);
		bcr_dac_update_pin(i+1, *(((uint16_t*)&bcr_dac)+i));
     a88:	f7 01       	movw	r30, r14
     a8a:	81 91       	ld	r24, Z+
     a8c:	91 91       	ld	r25, Z+
     a8e:	7f 01       	movw	r14, r30

//Updates a single DAC pin
//V_OUTA -> pin=1
//V_OUTH -> pin=8
static void bcr_dac_update_pin(uint8_t pin, uint16_t value) {
	uint16_t dac_word = ((pin&0xF)<<12) | ((value&0x3FF)<<2);
     a90:	93 70       	andi	r25, 0x03	; 3
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	98 01       	movw	r18, r16
     a9c:	32 2f       	mov	r19, r18
     a9e:	22 27       	eor	r18, r18
     aa0:	32 95       	swap	r19
     aa2:	30 7f       	andi	r19, 0xF0	; 240
     aa4:	82 2b       	or	r24, r18
     aa6:	93 2b       	or	r25, r19
	uint8_t spi_packet[2] = {(uint8_t)(dac_word>>8), (uint8_t)dac_word};
     aa8:	99 83       	std	Y+1, r25	; 0x01
     aaa:	8a 83       	std	Y+2, r24	; 0x02
		
	//Write packet over spi
	spi_select_device(&SPIC, &spi_device_conf);
     aac:	80 ec       	ldi	r24, 0xC0	; 192
     aae:	98 e0       	ldi	r25, 0x08	; 8
     ab0:	b6 01       	movw	r22, r12
     ab2:	16 de       	rcall	.-980    	; 0x6e0 <spi_select_device>
     ab4:	80 ec       	ldi	r24, 0xC0	; 192
	spi_write_packet(&SPIC, spi_packet, 2);
     ab6:	98 e0       	ldi	r25, 0x08	; 8
     ab8:	be 01       	movw	r22, r28
     aba:	6f 5f       	subi	r22, 0xFF	; 255
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	42 e0       	ldi	r20, 0x02	; 2
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	fd dd       	rcall	.-1030   	; 0x6be <spi_write_packet>
     ac4:	80 ec       	ldi	r24, 0xC0	; 192
     ac6:	98 e0       	ldi	r25, 0x08	; 8
	spi_deselect_device(&SPIC, &spi_device_conf);
     ac8:	b6 01       	movw	r22, r12
     aca:	25 de       	rcall	.-950    	; 0x716 <spi_deselect_device>
     acc:	0f 5f       	subi	r16, 0xFF	; 255
     ace:	1f 4f       	sbci	r17, 0xFF	; 255
     ad0:	09 30       	cpi	r16, 0x09	; 9
     ad2:	11 05       	cpc	r17, r1
     ad4:	c9 f6       	brne	.-78     	; 0xa88 <bcr_dac_update+0x32>
}

//Updates all 8 DAC pins
void bcr_dac_update(void) {
	for (uint16_t i=0; i<8; i++)
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	df 91       	pop	r29
		//bcr_dac_update_pin(i+1, 255);
		bcr_dac_update_pin(i+1, *(((uint16_t*)&bcr_dac)+i));
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	08 95       	ret

00000aec <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     aec:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     aee:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     af0:	32 e0       	ldi	r19, 0x02	; 2
     af2:	80 30       	cpi	r24, 0x00	; 0
     af4:	93 07       	cpc	r25, r19
     af6:	29 f4       	brne	.+10     	; 0xb02 <adc_set_callback+0x16>
		adca_callback = callback;
     af8:	60 93 77 21 	sts	0x2177, r22
     afc:	70 93 78 21 	sts	0x2178, r23
     b00:	08 c0       	rjmp	.+16     	; 0xb12 <adc_set_callback+0x26>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     b02:	32 e0       	ldi	r19, 0x02	; 2
     b04:	80 34       	cpi	r24, 0x40	; 64
     b06:	93 07       	cpc	r25, r19
     b08:	21 f4       	brne	.+8      	; 0xb12 <adc_set_callback+0x26>
		adcb_callback = callback;
     b0a:	60 93 75 21 	sts	0x2175, r22
     b0e:	70 93 76 21 	sts	0x2176, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b12:	2f bf       	out	0x3f, r18	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     b14:	08 95       	ret

00000b16 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     b16:	22 e0       	ldi	r18, 0x02	; 2
     b18:	80 30       	cpi	r24, 0x00	; 0
     b1a:	92 07       	cpc	r25, r18
     b1c:	61 f4       	brne	.+24     	; 0xb36 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     b1e:	80 91 24 21 	lds	r24, 0x2124
     b22:	98 2f       	mov	r25, r24
     b24:	9f 5f       	subi	r25, 0xFF	; 255
     b26:	90 93 24 21 	sts	0x2124, r25
     b2a:	88 23       	and	r24, r24
     b2c:	a1 f4       	brne	.+40     	; 0xb56 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	62 e0       	ldi	r22, 0x02	; 2
     b34:	43 cd       	rjmp	.-1402   	; 0x5bc <sysclk_enable_module>
     b36:	22 e0       	ldi	r18, 0x02	; 2
     b38:	80 34       	cpi	r24, 0x40	; 64
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     b3a:	92 07       	cpc	r25, r18
     b3c:	61 f4       	brne	.+24     	; 0xb56 <adc_enable_clock+0x40>
     b3e:	80 91 25 21 	lds	r24, 0x2125
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     b42:	98 2f       	mov	r25, r24
     b44:	9f 5f       	subi	r25, 0xFF	; 255
     b46:	90 93 25 21 	sts	0x2125, r25
     b4a:	88 23       	and	r24, r24
     b4c:	21 f4       	brne	.+8      	; 0xb56 <adc_enable_clock+0x40>
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	90 e0       	ldi	r25, 0x00	; 0
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     b52:	62 e0       	ldi	r22, 0x02	; 2
     b54:	33 cd       	rjmp	.-1434   	; 0x5bc <sysclk_enable_module>
     b56:	08 95       	ret

00000b58 <adc_disable_clock>:
     b58:	22 e0       	ldi	r18, 0x02	; 2
     b5a:	80 30       	cpi	r24, 0x00	; 0
     b5c:	92 07       	cpc	r25, r18
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     b5e:	59 f4       	brne	.+22     	; 0xb76 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     b60:	80 91 24 21 	lds	r24, 0x2124
     b64:	81 50       	subi	r24, 0x01	; 1
     b66:	80 93 24 21 	sts	0x2124, r24
     b6a:	88 23       	and	r24, r24
     b6c:	99 f4       	brne	.+38     	; 0xb94 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	2e cd       	rjmp	.-1444   	; 0x5d2 <sysclk_disable_module>
     b76:	22 e0       	ldi	r18, 0x02	; 2
     b78:	80 34       	cpi	r24, 0x40	; 64
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     b7a:	92 07       	cpc	r25, r18
     b7c:	59 f4       	brne	.+22     	; 0xb94 <adc_disable_clock+0x3c>
     b7e:	80 91 25 21 	lds	r24, 0x2125
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     b82:	81 50       	subi	r24, 0x01	; 1
     b84:	80 93 25 21 	sts	0x2125, r24
     b88:	88 23       	and	r24, r24
     b8a:	21 f4       	brne	.+8      	; 0xb94 <adc_disable_clock+0x3c>
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	90 e0       	ldi	r25, 0x00	; 0
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     b90:	62 e0       	ldi	r22, 0x02	; 2
     b92:	1f cd       	rjmp	.-1474   	; 0x5d2 <sysclk_disable_module>
     b94:	08 95       	ret

00000b96 <adc_enable>:
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     b9c:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     b9e:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     ba0:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     ba2:	b9 df       	rcall	.-142    	; 0xb16 <adc_enable_clock>
     ba4:	88 81       	ld	r24, Y
	adc->CTRLA |= ADC_ENABLE_bm;
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	88 83       	st	Y, r24
     baa:	1f bf       	out	0x3f, r17	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bac:	8f b7       	in	r24, 0x3f	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     bae:	f8 94       	cli
	cpu_irq_disable();
     bb0:	90 91 70 21 	lds	r25, 0x2170
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     bb4:	9f 5f       	subi	r25, 0xFF	; 255
     bb6:	90 93 70 21 	sts	0x2170, r25
     bba:	8f bf       	out	0x3f, r24	; 63
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bbc:	df 91       	pop	r29
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	08 95       	ret

00000bc4 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	0b b6       	in	r0, 0x3b	; 59
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	2f 93       	push	r18
     bd4:	3f 93       	push	r19
     bd6:	4f 93       	push	r20
     bd8:	5f 93       	push	r21
     bda:	6f 93       	push	r22
     bdc:	7f 93       	push	r23
     bde:	8f 93       	push	r24
     be0:	9f 93       	push	r25
     be2:	af 93       	push	r26
     be4:	bf 93       	push	r27
     be6:	ef 93       	push	r30
     be8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     bea:	e0 e0       	ldi	r30, 0x00	; 0
     bec:	f2 e0       	ldi	r31, 0x02	; 2
     bee:	44 a1       	lds	r20, 0x44
     bf0:	55 a1       	lds	r21, 0x45
     bf2:	e0 91 77 21 	lds	r30, 0x2177
     bf6:	f0 91 78 21 	lds	r31, 0x2178
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	09 95       	icall
}
     c02:	ff 91       	pop	r31
     c04:	ef 91       	pop	r30
     c06:	bf 91       	pop	r27
     c08:	af 91       	pop	r26
     c0a:	9f 91       	pop	r25
     c0c:	8f 91       	pop	r24
     c0e:	7f 91       	pop	r23
     c10:	6f 91       	pop	r22
     c12:	5f 91       	pop	r21
     c14:	4f 91       	pop	r20
     c16:	3f 91       	pop	r19
     c18:	2f 91       	pop	r18
     c1a:	0f 90       	pop	r0
     c1c:	0b be       	out	0x3b, r0	; 59
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     c28:	1f 92       	push	r1
     c2a:	0f 92       	push	r0
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	0f 92       	push	r0
     c30:	0b b6       	in	r0, 0x3b	; 59
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     c4e:	e0 e0       	ldi	r30, 0x00	; 0
     c50:	f2 e0       	ldi	r31, 0x02	; 2
     c52:	44 a5       	lds	r20, 0x64
     c54:	55 a5       	lds	r21, 0x65
     c56:	e0 91 77 21 	lds	r30, 0x2177
     c5a:	f0 91 78 21 	lds	r31, 0x2178
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	62 e0       	ldi	r22, 0x02	; 2
     c64:	09 95       	icall
}
     c66:	ff 91       	pop	r31
     c68:	ef 91       	pop	r30
     c6a:	bf 91       	pop	r27
     c6c:	af 91       	pop	r26
     c6e:	9f 91       	pop	r25
     c70:	8f 91       	pop	r24
     c72:	7f 91       	pop	r23
     c74:	6f 91       	pop	r22
     c76:	5f 91       	pop	r21
     c78:	4f 91       	pop	r20
     c7a:	3f 91       	pop	r19
     c7c:	2f 91       	pop	r18
     c7e:	0f 90       	pop	r0
     c80:	0b be       	out	0x3b, r0	; 59
     c82:	0f 90       	pop	r0
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	0f 90       	pop	r0
     c88:	1f 90       	pop	r1
     c8a:	18 95       	reti

00000c8c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     c8c:	1f 92       	push	r1
     c8e:	0f 92       	push	r0
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	0f 92       	push	r0
     c94:	0b b6       	in	r0, 0x3b	; 59
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     cb2:	e0 e0       	ldi	r30, 0x00	; 0
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	44 a9       	sts	0x44, r20
     cb8:	55 a9       	sts	0x45, r21
     cba:	e0 91 77 21 	lds	r30, 0x2177
     cbe:	f0 91 78 21 	lds	r31, 0x2178
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	64 e0       	ldi	r22, 0x04	; 4
     cc8:	09 95       	icall
}
     cca:	ff 91       	pop	r31
     ccc:	ef 91       	pop	r30
     cce:	bf 91       	pop	r27
     cd0:	af 91       	pop	r26
     cd2:	9f 91       	pop	r25
     cd4:	8f 91       	pop	r24
     cd6:	7f 91       	pop	r23
     cd8:	6f 91       	pop	r22
     cda:	5f 91       	pop	r21
     cdc:	4f 91       	pop	r20
     cde:	3f 91       	pop	r19
     ce0:	2f 91       	pop	r18
     ce2:	0f 90       	pop	r0
     ce4:	0b be       	out	0x3b, r0	; 59
     ce6:	0f 90       	pop	r0
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	0f 90       	pop	r0
     cec:	1f 90       	pop	r1
     cee:	18 95       	reti

00000cf0 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	0b b6       	in	r0, 0x3b	; 59
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	2f 93       	push	r18
     d00:	3f 93       	push	r19
     d02:	4f 93       	push	r20
     d04:	5f 93       	push	r21
     d06:	6f 93       	push	r22
     d08:	7f 93       	push	r23
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	af 93       	push	r26
     d10:	bf 93       	push	r27
     d12:	ef 93       	push	r30
     d14:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     d16:	e0 e0       	ldi	r30, 0x00	; 0
     d18:	f2 e0       	ldi	r31, 0x02	; 2
     d1a:	44 ad       	sts	0x64, r20
     d1c:	55 ad       	sts	0x65, r21
     d1e:	e0 91 77 21 	lds	r30, 0x2177
     d22:	f0 91 78 21 	lds	r31, 0x2178
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	68 e0       	ldi	r22, 0x08	; 8
     d2c:	09 95       	icall
}
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0b be       	out	0x3b, r0	; 59
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	0b b6       	in	r0, 0x3b	; 59
     d5e:	0f 92       	push	r0
     d60:	11 24       	eor	r1, r1
     d62:	2f 93       	push	r18
     d64:	3f 93       	push	r19
     d66:	4f 93       	push	r20
     d68:	5f 93       	push	r21
     d6a:	6f 93       	push	r22
     d6c:	7f 93       	push	r23
     d6e:	8f 93       	push	r24
     d70:	9f 93       	push	r25
     d72:	af 93       	push	r26
     d74:	bf 93       	push	r27
     d76:	ef 93       	push	r30
     d78:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     d7a:	e0 e4       	ldi	r30, 0x40	; 64
     d7c:	f2 e0       	ldi	r31, 0x02	; 2
     d7e:	44 a1       	lds	r20, 0x44
     d80:	55 a1       	lds	r21, 0x45
     d82:	e0 91 75 21 	lds	r30, 0x2175
     d86:	f0 91 76 21 	lds	r31, 0x2176
     d8a:	80 e4       	ldi	r24, 0x40	; 64
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	61 e0       	ldi	r22, 0x01	; 1
     d90:	09 95       	icall
}
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0b be       	out	0x3b, r0	; 59
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	0b b6       	in	r0, 0x3b	; 59
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     dde:	e0 e4       	ldi	r30, 0x40	; 64
     de0:	f2 e0       	ldi	r31, 0x02	; 2
     de2:	44 a5       	lds	r20, 0x64
     de4:	55 a5       	lds	r21, 0x65
     de6:	e0 91 75 21 	lds	r30, 0x2175
     dea:	f0 91 76 21 	lds	r31, 0x2176
     dee:	80 e4       	ldi	r24, 0x40	; 64
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	62 e0       	ldi	r22, 0x02	; 2
     df4:	09 95       	icall
}
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0b be       	out	0x3b, r0	; 59
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	0b b6       	in	r0, 0x3b	; 59
     e26:	0f 92       	push	r0
     e28:	11 24       	eor	r1, r1
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	6f 93       	push	r22
     e34:	7f 93       	push	r23
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	af 93       	push	r26
     e3c:	bf 93       	push	r27
     e3e:	ef 93       	push	r30
     e40:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     e42:	e0 e4       	ldi	r30, 0x40	; 64
     e44:	f2 e0       	ldi	r31, 0x02	; 2
     e46:	44 a9       	sts	0x44, r20
     e48:	55 a9       	sts	0x45, r21
     e4a:	e0 91 75 21 	lds	r30, 0x2175
     e4e:	f0 91 76 21 	lds	r31, 0x2176
     e52:	80 e4       	ldi	r24, 0x40	; 64
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	64 e0       	ldi	r22, 0x04	; 4
     e58:	09 95       	icall
}
     e5a:	ff 91       	pop	r31
     e5c:	ef 91       	pop	r30
     e5e:	bf 91       	pop	r27
     e60:	af 91       	pop	r26
     e62:	9f 91       	pop	r25
     e64:	8f 91       	pop	r24
     e66:	7f 91       	pop	r23
     e68:	6f 91       	pop	r22
     e6a:	5f 91       	pop	r21
     e6c:	4f 91       	pop	r20
     e6e:	3f 91       	pop	r19
     e70:	2f 91       	pop	r18
     e72:	0f 90       	pop	r0
     e74:	0b be       	out	0x3b, r0	; 59
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	0b b6       	in	r0, 0x3b	; 59
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	6f 93       	push	r22
     e98:	7f 93       	push	r23
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	af 93       	push	r26
     ea0:	bf 93       	push	r27
     ea2:	ef 93       	push	r30
     ea4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     ea6:	e0 e4       	ldi	r30, 0x40	; 64
     ea8:	f2 e0       	ldi	r31, 0x02	; 2
     eaa:	44 ad       	sts	0x64, r20
     eac:	55 ad       	sts	0x65, r21
     eae:	e0 91 75 21 	lds	r30, 0x2175
     eb2:	f0 91 76 21 	lds	r31, 0x2176
     eb6:	80 e4       	ldi	r24, 0x40	; 64
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	68 e0       	ldi	r22, 0x08	; 8
     ebc:	09 95       	icall
}
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	0f 90       	pop	r0
     ed8:	0b be       	out	0x3b, r0	; 59
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	8c 01       	movw	r16, r24
     ef4:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	00 30       	cpi	r16, 0x00	; 0
     efa:	18 07       	cpc	r17, r24
     efc:	81 f4       	brne	.+32     	; 0xf1e <adc_write_configuration+0x3a>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	61 e2       	ldi	r22, 0x21	; 33
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	e8 d0       	rcall	.+464    	; 0x10d6 <nvm_read_byte>
     f06:	c8 2f       	mov	r28, r24
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	60 e2       	ldi	r22, 0x20	; 32
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	e3 d0       	rcall	.+454    	; 0x10d6 <nvm_read_byte>
     f10:	3c 2f       	mov	r19, r28
     f12:	20 e0       	ldi	r18, 0x00	; 0

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
		data <<= 8;
     f14:	c8 2f       	mov	r28, r24
     f16:	d0 e0       	ldi	r29, 0x00	; 0
		data |= nvm_read_production_signature_row(ADCACAL0);
     f18:	c2 2b       	or	r28, r18
     f1a:	d3 2b       	or	r29, r19
     f1c:	13 c0       	rjmp	.+38     	; 0xf44 <adc_write_configuration+0x60>
     f1e:	e2 e0       	ldi	r30, 0x02	; 2
     f20:	00 34       	cpi	r16, 0x40	; 64
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     f22:	1e 07       	cpc	r17, r30
     f24:	c9 f5       	brne	.+114    	; 0xf98 <adc_write_configuration+0xb4>
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	65 e2       	ldi	r22, 0x25	; 37
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	d4 d0       	rcall	.+424    	; 0x10d6 <nvm_read_byte>
     f2e:	c8 2f       	mov	r28, r24
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	64 e2       	ldi	r22, 0x24	; 36
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	cf d0       	rcall	.+414    	; 0x10d6 <nvm_read_byte>
     f38:	3c 2f       	mov	r19, r28
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	c8 2f       	mov	r28, r24
     f3e:	d0 e0       	ldi	r29, 0x00	; 0
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
		data <<= 8;
     f40:	c2 2b       	or	r28, r18
     f42:	d3 2b       	or	r29, r19
		data |= nvm_read_production_signature_row(ADCBCAL0);
     f44:	df b6       	in	r13, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	c8 01       	movw	r24, r16
     f4a:	e5 dd       	rcall	.-1078   	; 0xb16 <adc_enable_clock>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f4c:	f8 01       	movw	r30, r16
	cpu_irq_disable();
     f4e:	20 81       	ld	r18, Z
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	80 83       	st	Z, r24
     f54:	c4 87       	std	Z+12, r28	; 0x0c
	enable = adc->CTRLA & ADC_ENABLE_bm;
     f56:	d5 87       	std	Z+13, r29	; 0x0d
     f58:	f7 01       	movw	r30, r14

	adc->CTRLA = ADC_FLUSH_bm;
     f5a:	85 81       	ldd	r24, Z+5	; 0x05
     f5c:	96 81       	ldd	r25, Z+6	; 0x06
	adc->CAL = cal;
     f5e:	f8 01       	movw	r30, r16
     f60:	80 8f       	std	Z+24, r24	; 0x18
	adc->CMP = conf->cmp;
     f62:	91 8f       	std	Z+25, r25	; 0x19
     f64:	f7 01       	movw	r30, r14
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	f8 01       	movw	r30, r16
     f6a:	82 83       	std	Z+2, r24	; 0x02
     f6c:	f7 01       	movw	r30, r14
	adc->REFCTRL = conf->refctrl;
     f6e:	84 81       	ldd	r24, Z+4	; 0x04
     f70:	f8 01       	movw	r30, r16
     f72:	84 83       	std	Z+4, r24	; 0x04
     f74:	f7 01       	movw	r30, r14
	adc->PRESCALER = conf->prescaler;
     f76:	83 81       	ldd	r24, Z+3	; 0x03
     f78:	f8 01       	movw	r30, r16
     f7a:	83 83       	std	Z+3, r24	; 0x03
     f7c:	f7 01       	movw	r30, r14
	adc->EVCTRL = conf->evctrl;
     f7e:	81 81       	ldd	r24, Z+1	; 0x01
     f80:	f8 01       	movw	r30, r16
     f82:	81 83       	std	Z+1, r24	; 0x01
     f84:	82 2f       	mov	r24, r18
	adc->CTRLB = conf->ctrlb;
     f86:	81 70       	andi	r24, 0x01	; 1
     f88:	f7 01       	movw	r30, r14
     f8a:	90 81       	ld	r25, Z
     f8c:	89 2b       	or	r24, r25
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
     f8e:	f8 01       	movw	r30, r16
     f90:	80 83       	st	Z, r24
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
     f92:	c8 01       	movw	r24, r16
     f94:	e1 dd       	rcall	.-1086   	; 0xb58 <adc_disable_clock>
     f96:	df be       	out	0x3f, r13	; 63
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28

	adc_disable_clock(adc);
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fa2:	ef 90       	pop	r14

	cpu_irq_restore(flags);
}
     fa4:	df 90       	pop	r13
     fa6:	08 95       	ret

00000fa8 <adc_read_configuration>:
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	ec 01       	movw	r28, r24
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     fb4:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     fb6:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     fb8:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     fba:	ad dd       	rcall	.-1190   	; 0xb16 <adc_enable_clock>
     fbc:	88 81       	ld	r24, Y

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     fbe:	80 7c       	andi	r24, 0xC0	; 192
     fc0:	f8 01       	movw	r30, r16
     fc2:	80 83       	st	Z, r24
     fc4:	88 8d       	ldd	r24, Y+24	; 0x18

	conf->cmp = adc->CMP;
     fc6:	99 8d       	ldd	r25, Y+25	; 0x19
     fc8:	85 83       	std	Z+5, r24	; 0x05
     fca:	96 83       	std	Z+6, r25	; 0x06
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->refctrl = adc->REFCTRL;
     fce:	82 83       	std	Z+2, r24	; 0x02
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
	conf->prescaler = adc->PRESCALER;
     fd2:	84 83       	std	Z+4, r24	; 0x04
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
	conf->evctrl = adc->EVCTRL;
     fd6:	83 83       	std	Z+3, r24	; 0x03
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
	conf->ctrlb = adc->CTRLB;
     fda:	81 83       	std	Z+1, r24	; 0x01
     fdc:	ce 01       	movw	r24, r28

	adc_disable_clock(adc);
     fde:	bc dd       	rcall	.-1160   	; 0xb58 <adc_disable_clock>
     fe0:	ff be       	out	0x3f, r15	; 63
     fe2:	df 91       	pop	r29
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fe4:	cf 91       	pop	r28

	cpu_irq_restore(flags);
}
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	08 95       	ret

00000fee <adcch_write_configuration>:
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	6c 01       	movw	r12, r24
     ffe:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1000:	86 2f       	mov	r24, r22
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	83 70       	andi	r24, 0x03	; 3
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	21 f4       	brne	.+8      	; 0x1014 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    100c:	66 95       	lsr	r22
    100e:	66 95       	lsr	r22
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1010:	c2 e0       	ldi	r28, 0x02	; 2
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <adcch_write_configuration+0x28>
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1014:	c0 e0       	ldi	r28, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1016:	60 ff       	sbrs	r22, 0
		index++;
    1018:	cf 5f       	subi	r28, 0xFF	; 255
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    101a:	c6 01       	movw	r24, r12
    101c:	80 96       	adiw	r24, 0x20	; 32
    101e:	d0 e0       	ldi	r29, 0x00	; 0
    1020:	cc 0f       	add	r28, r28
    1022:	dd 1f       	adc	r29, r29
    1024:	cc 0f       	add	r28, r28
    1026:	dd 1f       	adc	r29, r29
    1028:	cc 0f       	add	r28, r28
    102a:	dd 1f       	adc	r29, r29
    102c:	c8 0f       	add	r28, r24
    102e:	d9 1f       	adc	r29, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1030:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    1032:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1034:	c6 01       	movw	r24, r12
    1036:	6f dd       	rcall	.-1314   	; 0xb16 <adc_enable_clock>
    1038:	f7 01       	movw	r30, r14
	adc_ch->CTRL = ch_conf->ctrl;
    103a:	80 81       	ld	r24, Z
    103c:	88 83       	st	Y, r24
    103e:	82 81       	ldd	r24, Z+2	; 0x02
	adc_ch->INTCTRL = ch_conf->intctrl;
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	81 81       	ldd	r24, Z+1	; 0x01
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	c6 01       	movw	r24, r12
	if (ch_mask & ADC_CH0) {
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
	}
#endif
	adc_disable_clock(adc);
    1048:	87 dd       	rcall	.-1266   	; 0xb58 <adc_disable_clock>
    104a:	1f bf       	out	0x3f, r17	; 63
    104c:	df 91       	pop	r29
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    104e:	cf 91       	pop	r28

	cpu_irq_restore(flags);
}
    1050:	1f 91       	pop	r17
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	cf 90       	pop	r12
    105a:	08 95       	ret

0000105c <adcch_read_configuration>:
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	6c 01       	movw	r12, r24
    106c:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    106e:	86 2f       	mov	r24, r22
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	83 70       	andi	r24, 0x03	; 3
    1074:	90 70       	andi	r25, 0x00	; 0
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	21 f4       	brne	.+8      	; 0x1082 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    107a:	66 95       	lsr	r22
    107c:	66 95       	lsr	r22
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    107e:	c2 e0       	ldi	r28, 0x02	; 2
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <adcch_read_configuration+0x28>
 */
__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask);

__always_inline ADC_CH_tmpfix_t *adc_get_channel(ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1082:	c0 e0       	ldi	r28, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1084:	60 ff       	sbrs	r22, 0
		index++;
    1086:	cf 5f       	subi	r28, 0xFF	; 255
	}
#endif

	return (ADC_CH_tmpfix_t *)(&adc->CH0 + index);
    1088:	c6 01       	movw	r24, r12
    108a:	80 96       	adiw	r24, 0x20	; 32
    108c:	d0 e0       	ldi	r29, 0x00	; 0
    108e:	cc 0f       	add	r28, r28
    1090:	dd 1f       	adc	r29, r29
    1092:	cc 0f       	add	r28, r28
    1094:	dd 1f       	adc	r29, r29
    1096:	cc 0f       	add	r28, r28
    1098:	dd 1f       	adc	r29, r29
    109a:	c8 0f       	add	r28, r24
    109c:	d9 1f       	adc	r29, r25

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    109e:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    10a0:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    10a2:	c6 01       	movw	r24, r12
    10a4:	38 dd       	rcall	.-1424   	; 0xb16 <adc_enable_clock>
    10a6:	88 81       	ld	r24, Y
	ch_conf->ctrl = adc_ch->CTRL;
    10a8:	f7 01       	movw	r30, r14
    10aa:	80 83       	st	Z, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
	ch_conf->intctrl = adc_ch->INTCTRL;
    10ae:	82 83       	std	Z+2, r24	; 0x02
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    10b2:	81 83       	std	Z+1, r24	; 0x01
    10b4:	c6 01       	movw	r24, r12
	if (ch_mask & ADC_CH0) {
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
	}
#endif
	adc_disable_clock(adc);
    10b6:	50 dd       	rcall	.-1376   	; 0xb58 <adc_disable_clock>
    10b8:	1f bf       	out	0x3f, r17	; 63
    10ba:	df 91       	pop	r29
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10bc:	cf 91       	pop	r28

	cpu_irq_restore(flags);
}
    10be:	1f 91       	pop	r17
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	08 95       	ret

000010ca <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    10ca:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    10cc:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    10ce:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    10d0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    10d2:	60 83       	st	Z, r22
	ret                             // Return to caller
    10d4:	08 95       	ret

000010d6 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    10d6:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    10da:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    10dc:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    10de:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    10e2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    10e4:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    10e8:	08 95       	ret

000010ea <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	ec 01       	movw	r28, r24
    10fc:	6a 01       	movw	r12, r20
    10fe:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    1100:	db 01       	movw	r26, r22
    1102:	ca 01       	movw	r24, r20
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	a1 09       	sbc	r26, r1
    1108:	b1 09       	sbc	r27, r1
    110a:	08 0f       	add	r16, r24
    110c:	19 1f       	adc	r17, r25
    110e:	2a 1f       	adc	r18, r26
    1110:	3b 1f       	adc	r19, r27
    1112:	c9 01       	movw	r24, r18
    1114:	b8 01       	movw	r22, r16
    1116:	a7 01       	movw	r20, r14
    1118:	96 01       	movw	r18, r12
    111a:	7a d4       	rcall	.+2292   	; 0x1a10 <__udivmodsi4>
    111c:	89 01       	movw	r16, r18
    111e:	9a 01       	movw	r18, r20
    1120:	01 38       	cpi	r16, 0x81	; 129

	if (divisor > 128) {
    1122:	11 05       	cpc	r17, r1
    1124:	21 05       	cpc	r18, r1
    1126:	31 05       	cpc	r19, r1
    1128:	f8 f4       	brcc	.+62     	; 0x1168 <spi_xmega_set_baud_div+0x7e>
    112a:	01 34       	cpi	r16, 0x41	; 65

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    112c:	60 f4       	brcc	.+24     	; 0x1146 <spi_xmega_set_baud_div+0x5c>
    112e:	01 32       	cpi	r16, 0x21	; 33
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    1130:	60 f4       	brcc	.+24     	; 0x114a <spi_xmega_set_baud_div+0x60>
    1132:	01 31       	cpi	r16, 0x11	; 17
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    1134:	60 f4       	brcc	.+24     	; 0x114e <spi_xmega_set_baud_div+0x64>
    1136:	09 30       	cpi	r16, 0x09	; 9
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    1138:	60 f4       	brcc	.+24     	; 0x1152 <spi_xmega_set_baud_div+0x68>
    113a:	05 30       	cpi	r16, 0x05	; 5
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    113c:	60 f4       	brcc	.+24     	; 0x1156 <spi_xmega_set_baud_div+0x6c>
    113e:	03 30       	cpi	r16, 0x03	; 3
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    1140:	60 f0       	brcs	.+24     	; 0x115a <spi_xmega_set_baud_div+0x70>
    1142:	90 e0       	ldi	r25, 0x00	; 0
		ctrl = SPI_PRESCALER_DIV4_gc;
    1144:	0b c0       	rjmp	.+22     	; 0x115c <spi_xmega_set_baud_div+0x72>
    1146:	93 e0       	ldi	r25, 0x03	; 3
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    1148:	09 c0       	rjmp	.+18     	; 0x115c <spi_xmega_set_baud_div+0x72>
    114a:	92 e0       	ldi	r25, 0x02	; 2
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    114c:	07 c0       	rjmp	.+14     	; 0x115c <spi_xmega_set_baud_div+0x72>
    114e:	92 e8       	ldi	r25, 0x82	; 130
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    1150:	05 c0       	rjmp	.+10     	; 0x115c <spi_xmega_set_baud_div+0x72>
    1152:	91 e0       	ldi	r25, 0x01	; 1
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    1154:	03 c0       	rjmp	.+6      	; 0x115c <spi_xmega_set_baud_div+0x72>
    1156:	91 e8       	ldi	r25, 0x81	; 129
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    1158:	01 c0       	rjmp	.+2      	; 0x115c <spi_xmega_set_baud_div+0x72>
    115a:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    115c:	88 81       	ld	r24, Y
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    115e:	8c 77       	andi	r24, 0x7C	; 124
    1160:	89 2b       	or	r24, r25
    1162:	88 83       	st	Y, r24
    1164:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
    1166:	01 c0       	rjmp	.+2      	; 0x116a <spi_xmega_set_baud_div+0x80>
    1168:	8f ef       	ldi	r24, 0xFF	; 255
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    116a:	df 91       	pop	r29

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	08 95       	ret

0000117c <usart_putchar>:
 * \param c The data to send.
 *
 * \return STATUS_OK
 */
enum status_code usart_putchar(USART_t *usart, uint8_t c)
{
    117c:	fc 01       	movw	r30, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    117e:	81 81       	ldd	r24, Z+1	; 0x01
	while (usart_data_register_is_empty(usart) == false) {
    1180:	85 ff       	sbrs	r24, 5
    1182:	fd cf       	rjmp	.-6      	; 0x117e <usart_putchar+0x2>
	}
	
	(usart)->DATA = c;
    1184:	60 83       	st	Z, r22
	return STATUS_OK;
}
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	08 95       	ret

0000118c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    118c:	6f 92       	push	r6
    118e:	7f 92       	push	r7
    1190:	8f 92       	push	r8
    1192:	9f 92       	push	r9
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	3c 01       	movw	r6, r24
    11a8:	4a 01       	movw	r8, r20
    11aa:	5b 01       	movw	r10, r22
    11ac:	68 01       	movw	r12, r16
    11ae:	79 01       	movw	r14, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    11b0:	d9 01       	movw	r26, r18
    11b2:	c8 01       	movw	r24, r16
    11b4:	68 94       	set
    11b6:	12 f8       	bld	r1, 2
    11b8:	b6 95       	lsr	r27
    11ba:	a7 95       	ror	r26
    11bc:	97 95       	ror	r25
    11be:	87 95       	ror	r24
    11c0:	16 94       	lsr	r1
    11c2:	d1 f7       	brne	.-12     	; 0x11b8 <usart_set_baudrate+0x2c>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    11c4:	b9 01       	movw	r22, r18
    11c6:	a8 01       	movw	r20, r16
    11c8:	03 2e       	mov	r0, r19
    11ca:	36 e1       	ldi	r19, 0x16	; 22
    11cc:	76 95       	lsr	r23
    11ce:	67 95       	ror	r22
    11d0:	57 95       	ror	r21
    11d2:	47 95       	ror	r20
    11d4:	3a 95       	dec	r19
    11d6:	d1 f7       	brne	.-12     	; 0x11cc <usart_set_baudrate+0x40>
    11d8:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    11da:	f3 01       	movw	r30, r6
    11dc:	24 81       	ldd	r18, Z+4	; 0x04
    11de:	22 fd       	sbrc	r18, 2
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <usart_set_baudrate+0x66>
		max_rate /= 2;
    11e2:	b6 95       	lsr	r27
    11e4:	a7 95       	ror	r26
    11e6:	97 95       	ror	r25
    11e8:	87 95       	ror	r24
		min_rate /= 2;
    11ea:	76 95       	lsr	r23
    11ec:	67 95       	ror	r22
    11ee:	57 95       	ror	r21
    11f0:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    11f2:	88 15       	cp	r24, r8
    11f4:	99 05       	cpc	r25, r9
    11f6:	aa 05       	cpc	r26, r10
    11f8:	bb 05       	cpc	r27, r11
    11fa:	08 f4       	brcc	.+2      	; 0x11fe <usart_set_baudrate+0x72>
    11fc:	be c0       	rjmp	.+380    	; 0x137a <usart_set_baudrate+0x1ee>
    11fe:	84 16       	cp	r8, r20
    1200:	95 06       	cpc	r9, r21
    1202:	a6 06       	cpc	r10, r22
    1204:	b7 06       	cpc	r11, r23
    1206:	08 f4       	brcc	.+2      	; 0x120a <usart_set_baudrate+0x7e>
    1208:	ba c0       	rjmp	.+372    	; 0x137e <usart_set_baudrate+0x1f2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    120a:	d3 01       	movw	r26, r6
    120c:	14 96       	adiw	r26, 0x04	; 4
    120e:	8c 91       	ld	r24, X
    1210:	14 97       	sbiw	r26, 0x04	; 4
    1212:	82 fd       	sbrc	r24, 2
    1214:	04 c0       	rjmp	.+8      	; 0x121e <usart_set_baudrate+0x92>
		baud *= 2;
    1216:	88 0c       	add	r8, r8
    1218:	99 1c       	adc	r9, r9
    121a:	aa 1c       	adc	r10, r10
    121c:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    121e:	c7 01       	movw	r24, r14
    1220:	b6 01       	movw	r22, r12
    1222:	a5 01       	movw	r20, r10
    1224:	94 01       	movw	r18, r8
    1226:	f4 d3       	rcall	.+2024   	; 0x1a10 <__udivmodsi4>
    1228:	89 01       	movw	r16, r18
    122a:	9a 01       	movw	r18, r20
    122c:	0f 3f       	cpi	r16, 0xFF	; 255

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    122e:	11 05       	cpc	r17, r1
    1230:	21 05       	cpc	r18, r1
    1232:	31 05       	cpc	r19, r1
    1234:	08 f4       	brcc	.+2      	; 0x1238 <usart_set_baudrate+0xac>
    1236:	b2 c0       	rjmp	.+356    	; 0x139c <usart_set_baudrate+0x210>
    1238:	8f ef       	ldi	r24, 0xFF	; 255
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a0 e0       	ldi	r26, 0x00	; 0
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	c9 ef       	ldi	r28, 0xF9	; 249
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1242:	05 c0       	rjmp	.+10     	; 0x124e <usart_set_baudrate+0xc2>
    1244:	08 17       	cp	r16, r24
		if (ratio < limit) {
    1246:	19 07       	cpc	r17, r25
    1248:	2a 07       	cpc	r18, r26
    124a:	3b 07       	cpc	r19, r27
    124c:	60 f0       	brcs	.+24     	; 0x1266 <usart_set_baudrate+0xda>
    124e:	88 0f       	add	r24, r24
			break;
		}

		limit <<= 1;
    1250:	99 1f       	adc	r25, r25
    1252:	aa 1f       	adc	r26, r26
    1254:	bb 1f       	adc	r27, r27
    1256:	cd 3f       	cpi	r28, 0xFD	; 253

		if (exp < -3) {
    1258:	0c f4       	brge	.+2      	; 0x125c <usart_set_baudrate+0xd0>
    125a:	81 60       	ori	r24, 0x01	; 1
			limit |= 1;
    125c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    125e:	c7 30       	cpi	r28, 0x07	; 7
    1260:	89 f7       	brne	.-30     	; 0x1244 <usart_set_baudrate+0xb8>
    1262:	2c 2f       	mov	r18, r28
    1264:	5b c0       	rjmp	.+182    	; 0x131c <usart_set_baudrate+0x190>
    1266:	2c 2f       	mov	r18, r28
    1268:	cc 23       	and	r28, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    126a:	0c f0       	brlt	.+2      	; 0x126e <usart_set_baudrate+0xe2>
    126c:	57 c0       	rjmp	.+174    	; 0x131c <usart_set_baudrate+0x190>
    126e:	d5 01       	movw	r26, r10
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1270:	c4 01       	movw	r24, r8
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	aa 1f       	adc	r26, r26
    1278:	bb 1f       	adc	r27, r27
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	aa 1f       	adc	r26, r26
    1280:	bb 1f       	adc	r27, r27
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	aa 1f       	adc	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	c8 1a       	sub	r12, r24
    128c:	d9 0a       	sbc	r13, r25
    128e:	ea 0a       	sbc	r14, r26
    1290:	fb 0a       	sbc	r15, r27
    1292:	ce 3f       	cpi	r28, 0xFE	; 254
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1294:	2c f5       	brge	.+74     	; 0x12e0 <usart_set_baudrate+0x154>
    1296:	8c 2f       	mov	r24, r28
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1298:	99 27       	eor	r25, r25
    129a:	87 fd       	sbrc	r24, 7
    129c:	90 95       	com	r25
    129e:	4d ef       	ldi	r20, 0xFD	; 253
    12a0:	5f ef       	ldi	r21, 0xFF	; 255
    12a2:	48 1b       	sub	r20, r24
    12a4:	59 0b       	sbc	r21, r25
    12a6:	d7 01       	movw	r26, r14
    12a8:	c6 01       	movw	r24, r12
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <usart_set_baudrate+0x128>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	aa 1f       	adc	r26, r26
    12b2:	bb 1f       	adc	r27, r27
    12b4:	4a 95       	dec	r20
    12b6:	d2 f7       	brpl	.-12     	; 0x12ac <usart_set_baudrate+0x120>
    12b8:	ac 01       	movw	r20, r24
    12ba:	bd 01       	movw	r22, r26
    12bc:	d5 01       	movw	r26, r10
    12be:	c4 01       	movw	r24, r8
    12c0:	b6 95       	lsr	r27
    12c2:	a7 95       	ror	r26
    12c4:	97 95       	ror	r25
    12c6:	87 95       	ror	r24
    12c8:	84 0f       	add	r24, r20
    12ca:	95 1f       	adc	r25, r21
    12cc:	a6 1f       	adc	r26, r22
    12ce:	b7 1f       	adc	r27, r23
    12d0:	bc 01       	movw	r22, r24
    12d2:	cd 01       	movw	r24, r26
    12d4:	a5 01       	movw	r20, r10
    12d6:	94 01       	movw	r18, r8
    12d8:	9b d3       	rcall	.+1846   	; 0x1a10 <__udivmodsi4>
    12da:	89 01       	movw	r16, r18
    12dc:	9a 01       	movw	r18, r20
    12de:	3f c0       	rjmp	.+126    	; 0x135e <usart_set_baudrate+0x1d2>
    12e0:	8c 2f       	mov	r24, r28
    12e2:	99 27       	eor	r25, r25
		} else {
			baud <<= exp + 3;
    12e4:	87 fd       	sbrc	r24, 7
    12e6:	90 95       	com	r25
    12e8:	03 96       	adiw	r24, 0x03	; 3
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <usart_set_baudrate+0x168>
    12ec:	88 0c       	add	r8, r8
    12ee:	99 1c       	adc	r9, r9
    12f0:	aa 1c       	adc	r10, r10
    12f2:	bb 1c       	adc	r11, r11
    12f4:	8a 95       	dec	r24
    12f6:	d2 f7       	brpl	.-12     	; 0x12ec <usart_set_baudrate+0x160>
    12f8:	b5 01       	movw	r22, r10
    12fa:	a4 01       	movw	r20, r8
			div = (cpu_hz + baud / 2) / baud;
    12fc:	76 95       	lsr	r23
    12fe:	67 95       	ror	r22
    1300:	57 95       	ror	r21
    1302:	47 95       	ror	r20
    1304:	cb 01       	movw	r24, r22
    1306:	ba 01       	movw	r22, r20
    1308:	6c 0d       	add	r22, r12
    130a:	7d 1d       	adc	r23, r13
    130c:	8e 1d       	adc	r24, r14
    130e:	9f 1d       	adc	r25, r15
    1310:	a5 01       	movw	r20, r10
    1312:	94 01       	movw	r18, r8
    1314:	7d d3       	rcall	.+1786   	; 0x1a10 <__udivmodsi4>
    1316:	89 01       	movw	r16, r18
    1318:	9a 01       	movw	r18, r20
    131a:	21 c0       	rjmp	.+66     	; 0x135e <usart_set_baudrate+0x1d2>
    131c:	33 27       	eor	r19, r19
    131e:	27 fd       	sbrc	r18, 7
    1320:	30 95       	com	r19
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1322:	2d 5f       	subi	r18, 0xFD	; 253
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	d5 01       	movw	r26, r10
    1328:	c4 01       	movw	r24, r8
    132a:	04 c0       	rjmp	.+8      	; 0x1334 <usart_set_baudrate+0x1a8>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	aa 1f       	adc	r26, r26
    1332:	bb 1f       	adc	r27, r27
    1334:	2a 95       	dec	r18
    1336:	d2 f7       	brpl	.-12     	; 0x132c <usart_set_baudrate+0x1a0>
    1338:	9c 01       	movw	r18, r24
    133a:	ad 01       	movw	r20, r26
    133c:	b6 95       	lsr	r27
    133e:	a7 95       	ror	r26
    1340:	97 95       	ror	r25
		div = (cpu_hz + baud / 2) / baud - 1;
    1342:	87 95       	ror	r24
    1344:	c8 0e       	add	r12, r24
    1346:	d9 1e       	adc	r13, r25
    1348:	ea 1e       	adc	r14, r26
    134a:	fb 1e       	adc	r15, r27
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	5f d3       	rcall	.+1726   	; 0x1a10 <__udivmodsi4>
    1352:	89 01       	movw	r16, r18
    1354:	9a 01       	movw	r18, r20
    1356:	01 50       	subi	r16, 0x01	; 1
    1358:	10 40       	sbci	r17, 0x00	; 0
    135a:	20 40       	sbci	r18, 0x00	; 0
    135c:	30 40       	sbci	r19, 0x00	; 0
    135e:	81 2f       	mov	r24, r17
    1360:	8f 70       	andi	r24, 0x0F	; 15
    1362:	c2 95       	swap	r28
    1364:	c0 7f       	andi	r28, 0xF0	; 240
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1366:	c8 2b       	or	r28, r24
    1368:	d3 01       	movw	r26, r6
    136a:	17 96       	adiw	r26, 0x07	; 7
    136c:	cc 93       	st	X, r28
    136e:	17 97       	sbiw	r26, 0x07	; 7
    1370:	16 96       	adiw	r26, 0x06	; 6
    1372:	0c 93       	st	X, r16
    1374:	16 97       	sbiw	r26, 0x06	; 6
    1376:	81 e0       	ldi	r24, 0x01	; 1
	(usart)->BAUDCTRLA = (uint8_t)div;
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <usart_set_baudrate+0x1f4>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <usart_set_baudrate+0x1f4>

	return true;
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	cf 91       	pop	r28
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	ff 90       	pop	r15

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1388:	ef 90       	pop	r14
    138a:	df 90       	pop	r13
    138c:	cf 90       	pop	r12
    138e:	bf 90       	pop	r11
    1390:	af 90       	pop	r10
    1392:	9f 90       	pop	r9
    1394:	8f 90       	pop	r8
    1396:	7f 90       	pop	r7
    1398:	6f 90       	pop	r6
    139a:	08 95       	ret
    139c:	d5 01       	movw	r26, r10
    139e:	c4 01       	movw	r24, r8
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    13a4:	aa 1f       	adc	r26, r26
    13a6:	bb 1f       	adc	r27, r27
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	aa 1f       	adc	r26, r26
    13ae:	bb 1f       	adc	r27, r27
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	aa 1f       	adc	r26, r26
    13b6:	bb 1f       	adc	r27, r27
    13b8:	c8 1a       	sub	r12, r24
    13ba:	d9 0a       	sbc	r13, r25
    13bc:	ea 0a       	sbc	r14, r26
    13be:	fb 0a       	sbc	r15, r27
    13c0:	c9 ef       	ldi	r28, 0xF9	; 249
    13c2:	69 cf       	rjmp	.-302    	; 0x1296 <usart_set_baudrate+0x10a>

000013c4 <usart_init_rs232>:
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    13cc:	ec 01       	movw	r28, r24
    13ce:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTC0
	if ((uintptr_t)usart == (uintptr_t)&USARTC0) {
    13d0:	88 e0       	ldi	r24, 0x08	; 8
    13d2:	c0 3a       	cpi	r28, 0xA0	; 160
    13d4:	d8 07       	cpc	r29, r24
    13d6:	29 f4       	brne	.+10     	; 0x13e2 <usart_init_rs232+0x1e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	60 e1       	ldi	r22, 0x10	; 16
    13de:	ee d8       	rcall	.-3620   	; 0x5bc <sysclk_enable_module>
    13e0:	12 c0       	rjmp	.+36     	; 0x1406 <usart_init_rs232+0x42>
    13e2:	e8 e0       	ldi	r30, 0x08	; 8
	}
#endif
#ifdef USARTC1
	if ((uintptr_t)usart == (uintptr_t)&USARTC1) {
    13e4:	c0 3b       	cpi	r28, 0xB0	; 176
    13e6:	de 07       	cpc	r29, r30
    13e8:	29 f4       	brne	.+10     	; 0x13f4 <usart_init_rs232+0x30>
    13ea:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	60 e2       	ldi	r22, 0x20	; 32
    13f0:	e5 d8       	rcall	.-3638   	; 0x5bc <sysclk_enable_module>
    13f2:	12 c0       	rjmp	.+36     	; 0x1418 <usart_init_rs232+0x54>
    13f4:	f9 e0       	ldi	r31, 0x09	; 9
    13f6:	c0 3a       	cpi	r28, 0xA0	; 160
	}
#endif
#ifdef USARTD0
	if ((uintptr_t)usart == (uintptr_t)&USARTD0) {
    13f8:	df 07       	cpc	r29, r31
    13fa:	29 f4       	brne	.+10     	; 0x1406 <usart_init_rs232+0x42>
    13fc:	84 e0       	ldi	r24, 0x04	; 4
    13fe:	90 e0       	ldi	r25, 0x00	; 0
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1400:	60 e1       	ldi	r22, 0x10	; 16
    1402:	dc d8       	rcall	.-3656   	; 0x5bc <sysclk_enable_module>
    1404:	12 c0       	rjmp	.+36     	; 0x142a <usart_init_rs232+0x66>
    1406:	89 e0       	ldi	r24, 0x09	; 9
    1408:	c0 3b       	cpi	r28, 0xB0	; 176
    140a:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef USARTD1
	if ((uintptr_t)usart == (uintptr_t)&USARTD1) {
    140c:	29 f4       	brne	.+10     	; 0x1418 <usart_init_rs232+0x54>
    140e:	84 e0       	ldi	r24, 0x04	; 4
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1414:	d3 d8       	rcall	.-3674   	; 0x5bc <sysclk_enable_module>
    1416:	12 c0       	rjmp	.+36     	; 0x143c <usart_init_rs232+0x78>
    1418:	ea e0       	ldi	r30, 0x0A	; 10
    141a:	c0 3a       	cpi	r28, 0xA0	; 160
    141c:	de 07       	cpc	r29, r30
    141e:	29 f4       	brne	.+10     	; 0x142a <usart_init_rs232+0x66>
	}
#endif
#ifdef USARTE0
	if ((uintptr_t)usart == (uintptr_t)&USARTE0) {
    1420:	85 e0       	ldi	r24, 0x05	; 5
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	60 e1       	ldi	r22, 0x10	; 16
    1426:	ca d8       	rcall	.-3692   	; 0x5bc <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1428:	12 c0       	rjmp	.+36     	; 0x144e <usart_init_rs232+0x8a>
    142a:	fa e0       	ldi	r31, 0x0A	; 10
    142c:	c0 3b       	cpi	r28, 0xB0	; 176
    142e:	df 07       	cpc	r29, r31
    1430:	29 f4       	brne	.+10     	; 0x143c <usart_init_rs232+0x78>
    1432:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTE1
	if ((uintptr_t)usart == (uintptr_t)&USARTE1) {
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	60 e2       	ldi	r22, 0x20	; 32
    1438:	c1 d8       	rcall	.-3710   	; 0x5bc <sysclk_enable_module>
    143a:	11 c0       	rjmp	.+34     	; 0x145e <usart_init_rs232+0x9a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    143c:	8b e0       	ldi	r24, 0x0B	; 11
    143e:	c0 3a       	cpi	r28, 0xA0	; 160
    1440:	d8 07       	cpc	r29, r24
    1442:	29 f4       	brne	.+10     	; 0x144e <usart_init_rs232+0x8a>
    1444:	86 e0       	ldi	r24, 0x06	; 6
    1446:	90 e0       	ldi	r25, 0x00	; 0
	}
#endif
#ifdef USARTF0
	if ((uintptr_t)usart == (uintptr_t)&USARTF0) {
    1448:	60 e1       	ldi	r22, 0x10	; 16
    144a:	b8 d8       	rcall	.-3728   	; 0x5bc <sysclk_enable_module>
    144c:	08 c0       	rjmp	.+16     	; 0x145e <usart_init_rs232+0x9a>
    144e:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1450:	c0 3b       	cpi	r28, 0xB0	; 176
    1452:	de 07       	cpc	r29, r30
    1454:	21 f4       	brne	.+8      	; 0x145e <usart_init_rs232+0x9a>
    1456:	86 e0       	ldi	r24, 0x06	; 6
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTF1
	if ((uintptr_t)usart == (uintptr_t)&USARTF1) {
    145c:	af d8       	rcall	.-3746   	; 0x5bc <sysclk_enable_module>
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	8f 73       	andi	r24, 0x3F	; 63
    1462:	8d 83       	std	Y+5, r24	; 0x05
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1464:	f8 01       	movw	r30, r16
    1466:	96 81       	ldd	r25, Z+6	; 0x06
    1468:	84 81       	ldd	r24, Z+4	; 0x04
    146a:	89 2b       	or	r24, r25
    146c:	90 85       	ldd	r25, Z+8	; 0x08
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    146e:	99 23       	and	r25, r25
    1470:	11 f0       	breq	.+4      	; 0x1476 <usart_init_rs232+0xb2>
    1472:	98 e0       	ldi	r25, 0x08	; 8
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <usart_init_rs232+0xb4>
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	89 2b       	or	r24, r25
    147a:	8d 83       	std	Y+5, r24	; 0x05
    147c:	f8 01       	movw	r30, r16
    147e:	40 81       	ld	r20, Z
    1480:	51 81       	ldd	r21, Z+1	; 0x01
    1482:	62 81       	ldd	r22, Z+2	; 0x02
    1484:	73 81       	ldd	r23, Z+3	; 0x03
    1486:	ce 01       	movw	r24, r28
    1488:	00 e0       	ldi	r16, 0x00	; 0
    148a:	12 e1       	ldi	r17, 0x12	; 18
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    148c:	2a e7       	ldi	r18, 0x7A	; 122
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	7d de       	rcall	.-774    	; 0x118c <usart_set_baudrate>
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	98 60       	ori	r25, 0x08	; 8
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	90 61       	ori	r25, 0x10	; 16
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    14a4:	0f 91       	pop	r16
    14a6:	08 95       	ret

000014a8 <usart_serial_write_string>:
	usart_serial_write_string(USART_SERIAL, msg);
}

//Neat function to write a null terminating string
status_code_t usart_serial_write_string(usart_if usart, char *str)
{
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	8c 01       	movw	r16, r24
    14b2:	eb 01       	movw	r28, r22
	while (*str != '\0') {
    14b4:	68 81       	ld	r22, Y
    14b6:	66 23       	and	r22, r22
    14b8:	31 f0       	breq	.+12     	; 0x14c6 <usart_serial_write_string+0x1e>
	sprintf(msg, "ISENSE_LOAD=%umA\r\n", bcr_adc.ISENSE_LOAD>>1);
	usart_serial_write_string(USART_SERIAL, msg);
}

//Neat function to write a null terminating string
status_code_t usart_serial_write_string(usart_if usart, char *str)
    14ba:	21 96       	adiw	r28, 0x01	; 1
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    14bc:	c8 01       	movw	r24, r16
    14be:	5e de       	rcall	.-836    	; 0x117c <usart_putchar>
    14c0:	69 91       	ld	r22, Y+
{
	while (*str != '\0') {
    14c2:	66 23       	and	r22, r22
    14c4:	d9 f7       	brne	.-10     	; 0x14bc <usart_serial_write_string+0x14>
    14c6:	80 e0       	ldi	r24, 0x00	; 0
		usart_serial_putchar(usart, *str);
		str++;
	}
	return STATUS_OK;
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	08 95       	ret

000014d4 <print_adc>:
    14d4:	0f 93       	push	r16
	}	
}

// Test DAC and ADC
void print_adc (void)
{
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	a8 97       	sbiw	r28, 0x28	; 40
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	de bf       	out	0x3e, r29	; 62
	char msg[40];
		
	sprintf(msg, "VREF=%umV\r\n", bcr_adc.VREF>>1);
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <print_adc+0x14>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <print_adc+0x16>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <print_adc+0x18>
    14ec:	ed b7       	in	r30, 0x3d	; 61
    14ee:	fe b7       	in	r31, 0x3e	; 62
    14f0:	31 96       	adiw	r30, 0x01	; 1
    14f2:	8e 01       	movw	r16, r28
    14f4:	0f 5f       	subi	r16, 0xFF	; 255
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	ad b7       	in	r26, 0x3d	; 61
    14fa:	be b7       	in	r27, 0x3e	; 62
    14fc:	11 96       	adiw	r26, 0x01	; 1
    14fe:	0d 93       	st	X+, r16
    1500:	1c 93       	st	X, r17
    1502:	12 97       	sbiw	r26, 0x02	; 2
    1504:	82 e1       	ldi	r24, 0x12	; 18
    1506:	90 e2       	ldi	r25, 0x20	; 32
    1508:	82 83       	std	Z+2, r24	; 0x02
    150a:	93 83       	std	Z+3, r25	; 0x03
    150c:	80 91 36 21 	lds	r24, 0x2136
    1510:	90 91 37 21 	lds	r25, 0x2137
    1514:	96 95       	lsr	r25
    1516:	87 95       	ror	r24
    1518:	84 83       	std	Z+4, r24	; 0x04
    151a:	95 83       	std	Z+5, r25	; 0x05
    151c:	9b d2       	rcall	.+1334   	; 0x1a54 <sprintf>
    151e:	8d b7       	in	r24, 0x3d	; 61
	usart_serial_write_string(USART_SERIAL, msg);
    1520:	9e b7       	in	r25, 0x3e	; 62
    1522:	06 96       	adiw	r24, 0x06	; 6
    1524:	8d bf       	out	0x3d, r24	; 61
    1526:	9e bf       	out	0x3e, r25	; 62
    1528:	80 ea       	ldi	r24, 0xA0	; 160
    152a:	9a e0       	ldi	r25, 0x0A	; 10
    152c:	b8 01       	movw	r22, r16
    152e:	bc df       	rcall	.-136    	; 0x14a8 <usart_serial_write_string>
    1530:	00 d0       	rcall	.+0      	; 0x1532 <print_adc+0x5e>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <print_adc+0x60>
	sprintf(msg, "ISENSE_XP=%umA\r\n", bcr_adc.ISENSE_XP>>1);
    1534:	00 d0       	rcall	.+0      	; 0x1536 <print_adc+0x62>
    1536:	ed b7       	in	r30, 0x3d	; 61
    1538:	fe b7       	in	r31, 0x3e	; 62
    153a:	31 96       	adiw	r30, 0x01	; 1
    153c:	ad b7       	in	r26, 0x3d	; 61
    153e:	be b7       	in	r27, 0x3e	; 62
    1540:	11 96       	adiw	r26, 0x01	; 1
    1542:	0d 93       	st	X+, r16
    1544:	1c 93       	st	X, r17
    1546:	12 97       	sbiw	r26, 0x02	; 2
    1548:	8e e1       	ldi	r24, 0x1E	; 30
    154a:	90 e2       	ldi	r25, 0x20	; 32
    154c:	82 83       	std	Z+2, r24	; 0x02
    154e:	93 83       	std	Z+3, r25	; 0x03
    1550:	80 91 38 21 	lds	r24, 0x2138
    1554:	90 91 39 21 	lds	r25, 0x2139
    1558:	96 95       	lsr	r25
    155a:	87 95       	ror	r24
    155c:	84 83       	std	Z+4, r24	; 0x04
    155e:	95 83       	std	Z+5, r25	; 0x05
    1560:	79 d2       	rcall	.+1266   	; 0x1a54 <sprintf>
    1562:	8d b7       	in	r24, 0x3d	; 61
    1564:	9e b7       	in	r25, 0x3e	; 62
    1566:	06 96       	adiw	r24, 0x06	; 6
	usart_serial_write_string(USART_SERIAL, msg);
    1568:	8d bf       	out	0x3d, r24	; 61
    156a:	9e bf       	out	0x3e, r25	; 62
    156c:	80 ea       	ldi	r24, 0xA0	; 160
    156e:	9a e0       	ldi	r25, 0x0A	; 10
    1570:	b8 01       	movw	r22, r16
    1572:	9a df       	rcall	.-204    	; 0x14a8 <usart_serial_write_string>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <print_adc+0xa2>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <print_adc+0xa4>
    1578:	00 d0       	rcall	.+0      	; 0x157a <print_adc+0xa6>
    157a:	ed b7       	in	r30, 0x3d	; 61
	sprintf(msg, "VSENSE_XP=%umV\r\n", (bcr_adc.VSENSE_XP>>1)*4);
    157c:	fe b7       	in	r31, 0x3e	; 62
    157e:	31 96       	adiw	r30, 0x01	; 1
    1580:	ad b7       	in	r26, 0x3d	; 61
    1582:	be b7       	in	r27, 0x3e	; 62
    1584:	11 96       	adiw	r26, 0x01	; 1
    1586:	0d 93       	st	X+, r16
    1588:	1c 93       	st	X, r17
    158a:	12 97       	sbiw	r26, 0x02	; 2
    158c:	8f e2       	ldi	r24, 0x2F	; 47
    158e:	90 e2       	ldi	r25, 0x20	; 32
    1590:	82 83       	std	Z+2, r24	; 0x02
    1592:	93 83       	std	Z+3, r25	; 0x03
    1594:	80 91 3a 21 	lds	r24, 0x213A
    1598:	90 91 3b 21 	lds	r25, 0x213B
    159c:	96 95       	lsr	r25
    159e:	87 95       	ror	r24
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	84 83       	std	Z+4, r24	; 0x04
    15aa:	95 83       	std	Z+5, r25	; 0x05
    15ac:	53 d2       	rcall	.+1190   	; 0x1a54 <sprintf>
    15ae:	8d b7       	in	r24, 0x3d	; 61
    15b0:	9e b7       	in	r25, 0x3e	; 62
    15b2:	06 96       	adiw	r24, 0x06	; 6
    15b4:	8d bf       	out	0x3d, r24	; 61
    15b6:	9e bf       	out	0x3e, r25	; 62
	usart_serial_write_string(USART_SERIAL, msg);
    15b8:	80 ea       	ldi	r24, 0xA0	; 160
    15ba:	9a e0       	ldi	r25, 0x0A	; 10
    15bc:	b8 01       	movw	r22, r16
    15be:	74 df       	rcall	.-280    	; 0x14a8 <usart_serial_write_string>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <print_adc+0xee>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <print_adc+0xf0>
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <print_adc+0xf2>
    15c6:	ed b7       	in	r30, 0x3d	; 61
    15c8:	fe b7       	in	r31, 0x3e	; 62
    15ca:	31 96       	adiw	r30, 0x01	; 1
	sprintf(msg, "ISENSE_YP=%umA\r\n", bcr_adc.ISENSE_YP>>1);
    15cc:	ad b7       	in	r26, 0x3d	; 61
    15ce:	be b7       	in	r27, 0x3e	; 62
    15d0:	11 96       	adiw	r26, 0x01	; 1
    15d2:	0d 93       	st	X+, r16
    15d4:	1c 93       	st	X, r17
    15d6:	12 97       	sbiw	r26, 0x02	; 2
    15d8:	80 e4       	ldi	r24, 0x40	; 64
    15da:	90 e2       	ldi	r25, 0x20	; 32
    15dc:	82 83       	std	Z+2, r24	; 0x02
    15de:	93 83       	std	Z+3, r25	; 0x03
    15e0:	80 91 3c 21 	lds	r24, 0x213C
    15e4:	90 91 3d 21 	lds	r25, 0x213D
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	84 83       	std	Z+4, r24	; 0x04
    15ee:	95 83       	std	Z+5, r25	; 0x05
    15f0:	31 d2       	rcall	.+1122   	; 0x1a54 <sprintf>
    15f2:	8d b7       	in	r24, 0x3d	; 61
    15f4:	9e b7       	in	r25, 0x3e	; 62
    15f6:	06 96       	adiw	r24, 0x06	; 6
    15f8:	8d bf       	out	0x3d, r24	; 61
    15fa:	9e bf       	out	0x3e, r25	; 62
    15fc:	80 ea       	ldi	r24, 0xA0	; 160
    15fe:	9a e0       	ldi	r25, 0x0A	; 10
	usart_serial_write_string(USART_SERIAL, msg);
    1600:	b8 01       	movw	r22, r16
    1602:	52 df       	rcall	.-348    	; 0x14a8 <usart_serial_write_string>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <print_adc+0x132>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <print_adc+0x134>
    1608:	00 d0       	rcall	.+0      	; 0x160a <print_adc+0x136>
    160a:	ed b7       	in	r30, 0x3d	; 61
    160c:	fe b7       	in	r31, 0x3e	; 62
    160e:	31 96       	adiw	r30, 0x01	; 1
    1610:	ad b7       	in	r26, 0x3d	; 61
    1612:	be b7       	in	r27, 0x3e	; 62
	sprintf(msg, "VSENSE_YP=%umV\r\n", (bcr_adc.VSENSE_YP>>1)*4);
    1614:	11 96       	adiw	r26, 0x01	; 1
    1616:	0d 93       	st	X+, r16
    1618:	1c 93       	st	X, r17
    161a:	12 97       	sbiw	r26, 0x02	; 2
    161c:	81 e5       	ldi	r24, 0x51	; 81
    161e:	90 e2       	ldi	r25, 0x20	; 32
    1620:	82 83       	std	Z+2, r24	; 0x02
    1622:	93 83       	std	Z+3, r25	; 0x03
    1624:	80 91 3e 21 	lds	r24, 0x213E
    1628:	90 91 3f 21 	lds	r25, 0x213F
    162c:	96 95       	lsr	r25
    162e:	87 95       	ror	r24
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	84 83       	std	Z+4, r24	; 0x04
    163a:	95 83       	std	Z+5, r25	; 0x05
    163c:	0b d2       	rcall	.+1046   	; 0x1a54 <sprintf>
    163e:	8d b7       	in	r24, 0x3d	; 61
    1640:	9e b7       	in	r25, 0x3e	; 62
    1642:	06 96       	adiw	r24, 0x06	; 6
    1644:	8d bf       	out	0x3d, r24	; 61
    1646:	9e bf       	out	0x3e, r25	; 62
    1648:	80 ea       	ldi	r24, 0xA0	; 160
    164a:	9a e0       	ldi	r25, 0x0A	; 10
    164c:	b8 01       	movw	r22, r16
    164e:	2c df       	rcall	.-424    	; 0x14a8 <usart_serial_write_string>
	usart_serial_write_string(USART_SERIAL, msg);
    1650:	00 d0       	rcall	.+0      	; 0x1652 <print_adc+0x17e>
    1652:	00 d0       	rcall	.+0      	; 0x1654 <print_adc+0x180>
    1654:	00 d0       	rcall	.+0      	; 0x1656 <print_adc+0x182>
    1656:	ed b7       	in	r30, 0x3d	; 61
    1658:	fe b7       	in	r31, 0x3e	; 62
    165a:	31 96       	adiw	r30, 0x01	; 1
    165c:	ad b7       	in	r26, 0x3d	; 61
    165e:	be b7       	in	r27, 0x3e	; 62
    1660:	11 96       	adiw	r26, 0x01	; 1
    1662:	0d 93       	st	X+, r16
	sprintf(msg, "ISENSE_ZP=%umA\r\n", bcr_adc.ISENSE_ZP>>1);
    1664:	1c 93       	st	X, r17
    1666:	12 97       	sbiw	r26, 0x02	; 2
    1668:	82 e6       	ldi	r24, 0x62	; 98
    166a:	90 e2       	ldi	r25, 0x20	; 32
    166c:	82 83       	std	Z+2, r24	; 0x02
    166e:	93 83       	std	Z+3, r25	; 0x03
    1670:	80 91 40 21 	lds	r24, 0x2140
    1674:	90 91 41 21 	lds	r25, 0x2141
    1678:	96 95       	lsr	r25
    167a:	87 95       	ror	r24
    167c:	84 83       	std	Z+4, r24	; 0x04
    167e:	95 83       	std	Z+5, r25	; 0x05
    1680:	e9 d1       	rcall	.+978    	; 0x1a54 <sprintf>
    1682:	8d b7       	in	r24, 0x3d	; 61
    1684:	9e b7       	in	r25, 0x3e	; 62
    1686:	06 96       	adiw	r24, 0x06	; 6
    1688:	8d bf       	out	0x3d, r24	; 61
    168a:	9e bf       	out	0x3e, r25	; 62
    168c:	80 ea       	ldi	r24, 0xA0	; 160
    168e:	9a e0       	ldi	r25, 0x0A	; 10
    1690:	b8 01       	movw	r22, r16
    1692:	0a df       	rcall	.-492    	; 0x14a8 <usart_serial_write_string>
    1694:	00 d0       	rcall	.+0      	; 0x1696 <print_adc+0x1c2>
    1696:	00 d0       	rcall	.+0      	; 0x1698 <print_adc+0x1c4>
	usart_serial_write_string(USART_SERIAL, msg);
    1698:	00 d0       	rcall	.+0      	; 0x169a <print_adc+0x1c6>
    169a:	ed b7       	in	r30, 0x3d	; 61
    169c:	fe b7       	in	r31, 0x3e	; 62
    169e:	31 96       	adiw	r30, 0x01	; 1
    16a0:	ad b7       	in	r26, 0x3d	; 61
    16a2:	be b7       	in	r27, 0x3e	; 62
    16a4:	11 96       	adiw	r26, 0x01	; 1
    16a6:	0d 93       	st	X+, r16
    16a8:	1c 93       	st	X, r17
    16aa:	12 97       	sbiw	r26, 0x02	; 2
	sprintf(msg, "VSENSE_ZP=%umV\r\n", (bcr_adc.VSENSE_ZP>>1)*4);
    16ac:	83 e7       	ldi	r24, 0x73	; 115
    16ae:	90 e2       	ldi	r25, 0x20	; 32
    16b0:	82 83       	std	Z+2, r24	; 0x02
    16b2:	93 83       	std	Z+3, r25	; 0x03
    16b4:	80 91 42 21 	lds	r24, 0x2142
    16b8:	90 91 43 21 	lds	r25, 0x2143
    16bc:	96 95       	lsr	r25
    16be:	87 95       	ror	r24
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	84 83       	std	Z+4, r24	; 0x04
    16ca:	95 83       	std	Z+5, r25	; 0x05
    16cc:	c3 d1       	rcall	.+902    	; 0x1a54 <sprintf>
    16ce:	8d b7       	in	r24, 0x3d	; 61
    16d0:	9e b7       	in	r25, 0x3e	; 62
    16d2:	06 96       	adiw	r24, 0x06	; 6
    16d4:	8d bf       	out	0x3d, r24	; 61
    16d6:	9e bf       	out	0x3e, r25	; 62
    16d8:	80 ea       	ldi	r24, 0xA0	; 160
    16da:	9a e0       	ldi	r25, 0x0A	; 10
    16dc:	b8 01       	movw	r22, r16
    16de:	e4 de       	rcall	.-568    	; 0x14a8 <usart_serial_write_string>
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <print_adc+0x20e>
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <print_adc+0x210>
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <print_adc+0x212>
    16e6:	ed b7       	in	r30, 0x3d	; 61
	usart_serial_write_string(USART_SERIAL, msg);
    16e8:	fe b7       	in	r31, 0x3e	; 62
    16ea:	31 96       	adiw	r30, 0x01	; 1
    16ec:	ad b7       	in	r26, 0x3d	; 61
    16ee:	be b7       	in	r27, 0x3e	; 62
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	0d 93       	st	X+, r16
    16f4:	1c 93       	st	X, r17
    16f6:	12 97       	sbiw	r26, 0x02	; 2
    16f8:	84 e8       	ldi	r24, 0x84	; 132
    16fa:	90 e2       	ldi	r25, 0x20	; 32
	sprintf(msg, "ISENSE_XM=%umA\r\n", bcr_adc.ISENSE_XM>>1);
    16fc:	82 83       	std	Z+2, r24	; 0x02
    16fe:	93 83       	std	Z+3, r25	; 0x03
    1700:	80 91 44 21 	lds	r24, 0x2144
    1704:	90 91 45 21 	lds	r25, 0x2145
    1708:	96 95       	lsr	r25
    170a:	87 95       	ror	r24
    170c:	84 83       	std	Z+4, r24	; 0x04
    170e:	95 83       	std	Z+5, r25	; 0x05
    1710:	a1 d1       	rcall	.+834    	; 0x1a54 <sprintf>
    1712:	8d b7       	in	r24, 0x3d	; 61
    1714:	9e b7       	in	r25, 0x3e	; 62
    1716:	06 96       	adiw	r24, 0x06	; 6
    1718:	8d bf       	out	0x3d, r24	; 61
    171a:	9e bf       	out	0x3e, r25	; 62
    171c:	80 ea       	ldi	r24, 0xA0	; 160
    171e:	9a e0       	ldi	r25, 0x0A	; 10
    1720:	b8 01       	movw	r22, r16
    1722:	c2 de       	rcall	.-636    	; 0x14a8 <usart_serial_write_string>
    1724:	00 d0       	rcall	.+0      	; 0x1726 <print_adc+0x252>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <print_adc+0x254>
    1728:	00 d0       	rcall	.+0      	; 0x172a <print_adc+0x256>
    172a:	ed b7       	in	r30, 0x3d	; 61
    172c:	fe b7       	in	r31, 0x3e	; 62
    172e:	31 96       	adiw	r30, 0x01	; 1
	usart_serial_write_string(USART_SERIAL, msg);
    1730:	ad b7       	in	r26, 0x3d	; 61
    1732:	be b7       	in	r27, 0x3e	; 62
    1734:	11 96       	adiw	r26, 0x01	; 1
    1736:	0d 93       	st	X+, r16
    1738:	1c 93       	st	X, r17
    173a:	12 97       	sbiw	r26, 0x02	; 2
    173c:	85 e9       	ldi	r24, 0x95	; 149
    173e:	90 e2       	ldi	r25, 0x20	; 32
    1740:	82 83       	std	Z+2, r24	; 0x02
    1742:	93 83       	std	Z+3, r25	; 0x03
	sprintf(msg, "VSENSE_XM=%umV\r\n", (bcr_adc.VSENSE_XM>>1)*4);
    1744:	80 91 46 21 	lds	r24, 0x2146
    1748:	90 91 47 21 	lds	r25, 0x2147
    174c:	96 95       	lsr	r25
    174e:	87 95       	ror	r24
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	84 83       	std	Z+4, r24	; 0x04
    175a:	95 83       	std	Z+5, r25	; 0x05
    175c:	7b d1       	rcall	.+758    	; 0x1a54 <sprintf>
    175e:	8d b7       	in	r24, 0x3d	; 61
    1760:	9e b7       	in	r25, 0x3e	; 62
    1762:	06 96       	adiw	r24, 0x06	; 6
    1764:	8d bf       	out	0x3d, r24	; 61
    1766:	9e bf       	out	0x3e, r25	; 62
    1768:	80 ea       	ldi	r24, 0xA0	; 160
    176a:	9a e0       	ldi	r25, 0x0A	; 10
    176c:	b8 01       	movw	r22, r16
    176e:	9c de       	rcall	.-712    	; 0x14a8 <usart_serial_write_string>
    1770:	00 d0       	rcall	.+0      	; 0x1772 <print_adc+0x29e>
    1772:	00 d0       	rcall	.+0      	; 0x1774 <print_adc+0x2a0>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <print_adc+0x2a2>
    1776:	ed b7       	in	r30, 0x3d	; 61
    1778:	fe b7       	in	r31, 0x3e	; 62
    177a:	31 96       	adiw	r30, 0x01	; 1
    177c:	ad b7       	in	r26, 0x3d	; 61
    177e:	be b7       	in	r27, 0x3e	; 62
	usart_serial_write_string(USART_SERIAL, msg);
    1780:	11 96       	adiw	r26, 0x01	; 1
    1782:	0d 93       	st	X+, r16
    1784:	1c 93       	st	X, r17
    1786:	12 97       	sbiw	r26, 0x02	; 2
    1788:	86 ea       	ldi	r24, 0xA6	; 166
    178a:	90 e2       	ldi	r25, 0x20	; 32
    178c:	82 83       	std	Z+2, r24	; 0x02
    178e:	93 83       	std	Z+3, r25	; 0x03
    1790:	80 91 48 21 	lds	r24, 0x2148
	sprintf(msg, "ISENSE_YM=%umA\r\n", bcr_adc.ISENSE_YM>>1);
    1794:	90 91 49 21 	lds	r25, 0x2149
    1798:	96 95       	lsr	r25
    179a:	87 95       	ror	r24
    179c:	84 83       	std	Z+4, r24	; 0x04
    179e:	95 83       	std	Z+5, r25	; 0x05
    17a0:	59 d1       	rcall	.+690    	; 0x1a54 <sprintf>
    17a2:	8d b7       	in	r24, 0x3d	; 61
    17a4:	9e b7       	in	r25, 0x3e	; 62
    17a6:	06 96       	adiw	r24, 0x06	; 6
    17a8:	8d bf       	out	0x3d, r24	; 61
    17aa:	9e bf       	out	0x3e, r25	; 62
    17ac:	80 ea       	ldi	r24, 0xA0	; 160
    17ae:	9a e0       	ldi	r25, 0x0A	; 10
    17b0:	b8 01       	movw	r22, r16
    17b2:	7a de       	rcall	.-780    	; 0x14a8 <usart_serial_write_string>
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <print_adc+0x2e2>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <print_adc+0x2e4>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <print_adc+0x2e6>
    17ba:	ed b7       	in	r30, 0x3d	; 61
    17bc:	fe b7       	in	r31, 0x3e	; 62
    17be:	31 96       	adiw	r30, 0x01	; 1
    17c0:	ad b7       	in	r26, 0x3d	; 61
    17c2:	be b7       	in	r27, 0x3e	; 62
    17c4:	11 96       	adiw	r26, 0x01	; 1
    17c6:	0d 93       	st	X+, r16
	usart_serial_write_string(USART_SERIAL, msg);
    17c8:	1c 93       	st	X, r17
    17ca:	12 97       	sbiw	r26, 0x02	; 2
    17cc:	87 eb       	ldi	r24, 0xB7	; 183
    17ce:	90 e2       	ldi	r25, 0x20	; 32
    17d0:	82 83       	std	Z+2, r24	; 0x02
    17d2:	93 83       	std	Z+3, r25	; 0x03
    17d4:	80 91 4a 21 	lds	r24, 0x214A
    17d8:	90 91 4b 21 	lds	r25, 0x214B
	sprintf(msg, "VSENSE_YM=%umV\r\n", (bcr_adc.VSENSE_YM>>1)*4);
    17dc:	96 95       	lsr	r25
    17de:	87 95       	ror	r24
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	84 83       	std	Z+4, r24	; 0x04
    17ea:	95 83       	std	Z+5, r25	; 0x05
    17ec:	33 d1       	rcall	.+614    	; 0x1a54 <sprintf>
    17ee:	8d b7       	in	r24, 0x3d	; 61
    17f0:	9e b7       	in	r25, 0x3e	; 62
    17f2:	06 96       	adiw	r24, 0x06	; 6
    17f4:	8d bf       	out	0x3d, r24	; 61
    17f6:	9e bf       	out	0x3e, r25	; 62
    17f8:	80 ea       	ldi	r24, 0xA0	; 160
    17fa:	9a e0       	ldi	r25, 0x0A	; 10
    17fc:	b8 01       	movw	r22, r16
    17fe:	54 de       	rcall	.-856    	; 0x14a8 <usart_serial_write_string>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <print_adc+0x32e>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <print_adc+0x330>
    1804:	00 d0       	rcall	.+0      	; 0x1806 <print_adc+0x332>
    1806:	ed b7       	in	r30, 0x3d	; 61
    1808:	fe b7       	in	r31, 0x3e	; 62
    180a:	31 96       	adiw	r30, 0x01	; 1
    180c:	ad b7       	in	r26, 0x3d	; 61
    180e:	be b7       	in	r27, 0x3e	; 62
    1810:	11 96       	adiw	r26, 0x01	; 1
    1812:	0d 93       	st	X+, r16
    1814:	1c 93       	st	X, r17
    1816:	12 97       	sbiw	r26, 0x02	; 2
	usart_serial_write_string(USART_SERIAL, msg);
    1818:	88 ec       	ldi	r24, 0xC8	; 200
    181a:	90 e2       	ldi	r25, 0x20	; 32
    181c:	82 83       	std	Z+2, r24	; 0x02
    181e:	93 83       	std	Z+3, r25	; 0x03
    1820:	80 91 4c 21 	lds	r24, 0x214C
    1824:	90 91 4d 21 	lds	r25, 0x214D
    1828:	96 95       	lsr	r25
    182a:	87 95       	ror	r24
	sprintf(msg, "ISENSE_ZM=%umA\r\n", bcr_adc.ISENSE_ZM>>1);
    182c:	84 83       	std	Z+4, r24	; 0x04
    182e:	95 83       	std	Z+5, r25	; 0x05
    1830:	11 d1       	rcall	.+546    	; 0x1a54 <sprintf>
    1832:	8d b7       	in	r24, 0x3d	; 61
    1834:	9e b7       	in	r25, 0x3e	; 62
    1836:	06 96       	adiw	r24, 0x06	; 6
    1838:	8d bf       	out	0x3d, r24	; 61
    183a:	9e bf       	out	0x3e, r25	; 62
    183c:	80 ea       	ldi	r24, 0xA0	; 160
    183e:	9a e0       	ldi	r25, 0x0A	; 10
    1840:	b8 01       	movw	r22, r16
    1842:	32 de       	rcall	.-924    	; 0x14a8 <usart_serial_write_string>
    1844:	00 d0       	rcall	.+0      	; 0x1846 <print_adc+0x372>
    1846:	00 d0       	rcall	.+0      	; 0x1848 <print_adc+0x374>
    1848:	00 d0       	rcall	.+0      	; 0x184a <print_adc+0x376>
    184a:	ed b7       	in	r30, 0x3d	; 61
    184c:	fe b7       	in	r31, 0x3e	; 62
    184e:	31 96       	adiw	r30, 0x01	; 1
    1850:	ad b7       	in	r26, 0x3d	; 61
    1852:	be b7       	in	r27, 0x3e	; 62
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	0d 93       	st	X+, r16
    1858:	1c 93       	st	X, r17
    185a:	12 97       	sbiw	r26, 0x02	; 2
    185c:	89 ed       	ldi	r24, 0xD9	; 217
    185e:	90 e2       	ldi	r25, 0x20	; 32
	usart_serial_write_string(USART_SERIAL, msg);
    1860:	82 83       	std	Z+2, r24	; 0x02
    1862:	93 83       	std	Z+3, r25	; 0x03
    1864:	80 91 36 21 	lds	r24, 0x2136
    1868:	90 91 37 21 	lds	r25, 0x2137
    186c:	96 95       	lsr	r25
    186e:	87 95       	ror	r24
    1870:	84 83       	std	Z+4, r24	; 0x04
    1872:	95 83       	std	Z+5, r25	; 0x05
	sprintf(msg, "VGNDREF=%umV\r\n", bcr_adc.VREF>>1);
    1874:	ef d0       	rcall	.+478    	; 0x1a54 <sprintf>
    1876:	8d b7       	in	r24, 0x3d	; 61
    1878:	9e b7       	in	r25, 0x3e	; 62
    187a:	06 96       	adiw	r24, 0x06	; 6
    187c:	8d bf       	out	0x3d, r24	; 61
    187e:	9e bf       	out	0x3e, r25	; 62
    1880:	80 ea       	ldi	r24, 0xA0	; 160
    1882:	9a e0       	ldi	r25, 0x0A	; 10
    1884:	b8 01       	movw	r22, r16
    1886:	10 de       	rcall	.-992    	; 0x14a8 <usart_serial_write_string>
    1888:	00 d0       	rcall	.+0      	; 0x188a <print_adc+0x3b6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <print_adc+0x3b8>
    188c:	00 d0       	rcall	.+0      	; 0x188e <print_adc+0x3ba>
    188e:	ed b7       	in	r30, 0x3d	; 61
    1890:	fe b7       	in	r31, 0x3e	; 62
    1892:	31 96       	adiw	r30, 0x01	; 1
    1894:	ad b7       	in	r26, 0x3d	; 61
    1896:	be b7       	in	r27, 0x3e	; 62
    1898:	11 96       	adiw	r26, 0x01	; 1
    189a:	0d 93       	st	X+, r16
    189c:	1c 93       	st	X, r17
    189e:	12 97       	sbiw	r26, 0x02	; 2
    18a0:	88 ee       	ldi	r24, 0xE8	; 232
    18a2:	90 e2       	ldi	r25, 0x20	; 32
    18a4:	82 83       	std	Z+2, r24	; 0x02
    18a6:	93 83       	std	Z+3, r25	; 0x03
	usart_serial_write_string(USART_SERIAL, msg);
    18a8:	80 91 50 21 	lds	r24, 0x2150
    18ac:	90 91 51 21 	lds	r25, 0x2151
    18b0:	96 95       	lsr	r25
    18b2:	87 95       	ror	r24
    18b4:	84 83       	std	Z+4, r24	; 0x04
    18b6:	95 83       	std	Z+5, r25	; 0x05
    18b8:	cd d0       	rcall	.+410    	; 0x1a54 <sprintf>
    18ba:	8d b7       	in	r24, 0x3d	; 61
	sprintf(msg, "ADCB5=%umA\r\n", bcr_adc.ADCB5>>1);
    18bc:	9e b7       	in	r25, 0x3e	; 62
    18be:	06 96       	adiw	r24, 0x06	; 6
    18c0:	8d bf       	out	0x3d, r24	; 61
    18c2:	9e bf       	out	0x3e, r25	; 62
    18c4:	80 ea       	ldi	r24, 0xA0	; 160
    18c6:	9a e0       	ldi	r25, 0x0A	; 10
    18c8:	b8 01       	movw	r22, r16
    18ca:	ee dd       	rcall	.-1060   	; 0x14a8 <usart_serial_write_string>
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <print_adc+0x3fa>
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <print_adc+0x3fc>
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <print_adc+0x3fe>
    18d2:	ed b7       	in	r30, 0x3d	; 61
    18d4:	fe b7       	in	r31, 0x3e	; 62
    18d6:	31 96       	adiw	r30, 0x01	; 1
    18d8:	ad b7       	in	r26, 0x3d	; 61
    18da:	be b7       	in	r27, 0x3e	; 62
    18dc:	11 96       	adiw	r26, 0x01	; 1
    18de:	0d 93       	st	X+, r16
    18e0:	1c 93       	st	X, r17
    18e2:	12 97       	sbiw	r26, 0x02	; 2
    18e4:	85 ef       	ldi	r24, 0xF5	; 245
    18e6:	90 e2       	ldi	r25, 0x20	; 32
    18e8:	82 83       	std	Z+2, r24	; 0x02
    18ea:	93 83       	std	Z+3, r25	; 0x03
    18ec:	80 91 52 21 	lds	r24, 0x2152
	usart_serial_write_string(USART_SERIAL, msg);
    18f0:	90 91 53 21 	lds	r25, 0x2153
    18f4:	96 95       	lsr	r25
    18f6:	87 95       	ror	r24
    18f8:	82 95       	swap	r24
    18fa:	92 95       	swap	r25
    18fc:	90 7f       	andi	r25, 0xF0	; 240
    18fe:	98 27       	eor	r25, r24
    1900:	80 7f       	andi	r24, 0xF0	; 240
    1902:	98 27       	eor	r25, r24
	sprintf(msg, "VSENSE_BAT=%umV\r\n", (bcr_adc.VSENSE_BAT>>1)*16);
    1904:	84 83       	std	Z+4, r24	; 0x04
    1906:	95 83       	std	Z+5, r25	; 0x05
    1908:	a5 d0       	rcall	.+330    	; 0x1a54 <sprintf>
    190a:	8d b7       	in	r24, 0x3d	; 61
    190c:	9e b7       	in	r25, 0x3e	; 62
    190e:	06 96       	adiw	r24, 0x06	; 6
    1910:	8d bf       	out	0x3d, r24	; 61
    1912:	9e bf       	out	0x3e, r25	; 62
    1914:	80 ea       	ldi	r24, 0xA0	; 160
    1916:	9a e0       	ldi	r25, 0x0A	; 10
    1918:	b8 01       	movw	r22, r16
    191a:	c6 dd       	rcall	.-1140   	; 0x14a8 <usart_serial_write_string>
    191c:	00 d0       	rcall	.+0      	; 0x191e <print_adc+0x44a>
    191e:	00 d0       	rcall	.+0      	; 0x1920 <print_adc+0x44c>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <print_adc+0x44e>
    1922:	ed b7       	in	r30, 0x3d	; 61
    1924:	fe b7       	in	r31, 0x3e	; 62
    1926:	31 96       	adiw	r30, 0x01	; 1
    1928:	ad b7       	in	r26, 0x3d	; 61
    192a:	be b7       	in	r27, 0x3e	; 62
    192c:	11 96       	adiw	r26, 0x01	; 1
    192e:	0d 93       	st	X+, r16
    1930:	1c 93       	st	X, r17
    1932:	12 97       	sbiw	r26, 0x02	; 2
    1934:	87 e0       	ldi	r24, 0x07	; 7
    1936:	91 e2       	ldi	r25, 0x21	; 33
    1938:	82 83       	std	Z+2, r24	; 0x02
    193a:	93 83       	std	Z+3, r25	; 0x03
    193c:	80 91 54 21 	lds	r24, 0x2154
    1940:	90 91 55 21 	lds	r25, 0x2155
	usart_serial_write_string(USART_SERIAL, msg);
    1944:	96 95       	lsr	r25
    1946:	87 95       	ror	r24
    1948:	84 83       	std	Z+4, r24	; 0x04
    194a:	95 83       	std	Z+5, r25	; 0x05
    194c:	83 d0       	rcall	.+262    	; 0x1a54 <sprintf>
    194e:	8d b7       	in	r24, 0x3d	; 61
    1950:	9e b7       	in	r25, 0x3e	; 62
    1952:	06 96       	adiw	r24, 0x06	; 6
    1954:	8d bf       	out	0x3d, r24	; 61
    1956:	9e bf       	out	0x3e, r25	; 62
	sprintf(msg, "ISENSE_LOAD=%umA\r\n", bcr_adc.ISENSE_LOAD>>1);
    1958:	80 ea       	ldi	r24, 0xA0	; 160
    195a:	9a e0       	ldi	r25, 0x0A	; 10
    195c:	b8 01       	movw	r22, r16
    195e:	a4 dd       	rcall	.-1208   	; 0x14a8 <usart_serial_write_string>
    1960:	a8 96       	adiw	r28, 0x28	; 40
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	08 95       	ret

00001970 <main>:
    1970:	0e 94 a6 03 	call	0x74c	; 0x74c <bcr_init>
    1974:	e0 ea       	ldi	r30, 0xA0	; 160
    1976:	f6 e0       	ldi	r31, 0x06	; 6
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	85 83       	std	Z+5, r24	; 0x05
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	85 83       	std	Z+5, r24	; 0x05
    1980:	84 e0       	ldi	r24, 0x04	; 4
    1982:	85 83       	std	Z+5, r24	; 0x05
    1984:	88 e0       	ldi	r24, 0x08	; 8
    1986:	85 83       	std	Z+5, r24	; 0x05
    1988:	80 e1       	ldi	r24, 0x10	; 16
    198a:	85 83       	std	Z+5, r24	; 0x05
	usart_serial_write_string(USART_SERIAL, msg);
    198c:	80 e2       	ldi	r24, 0x20	; 32
    198e:	85 83       	std	Z+5, r24	; 0x05
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	93 e0       	ldi	r25, 0x03	; 3
    1994:	80 93 34 21 	sts	0x2134, r24
    1998:	90 93 35 21 	sts	0x2135, r25
    199c:	5c d8       	rcall	.-3912   	; 0xa56 <bcr_dac_update>
    199e:	0f 2e       	mov	r0, r31
}
    19a0:	fa e2       	ldi	r31, 0x2A	; 42
    19a2:	cf 2e       	mov	r12, r31
    19a4:	fc e2       	ldi	r31, 0x2C	; 44
    19a6:	df 2e       	mov	r13, r31
    19a8:	fa e0       	ldi	r31, 0x0A	; 10
    19aa:	ef 2e       	mov	r14, r31
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	ff 2e       	mov	r15, r31
	//print_adc();
	
	while (1)
	{		
		//mppt_cycle();
		print_adc();			
    19b0:	f0 2d       	mov	r31, r0
    19b2:	90 dd       	rcall	.-1248   	; 0x14d4 <print_adc>
    19b4:	d7 01       	movw	r26, r14
    19b6:	c6 01       	movw	r24, r12
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	a1 09       	sbc	r26, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    19bc:	b1 09       	sbc	r27, r1
    19be:	e1 f7       	brne	.-8      	; 0x19b8 <main+0x48>
    19c0:	f8 cf       	rjmp	.-16     	; 0x19b2 <main+0x42>

000019c2 <__udivmodhi4>:
    19c2:	aa 1b       	sub	r26, r26
    19c4:	bb 1b       	sub	r27, r27
    19c6:	51 e1       	ldi	r21, 0x11	; 17
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <__udivmodhi4_ep>

000019ca <__udivmodhi4_loop>:
    19ca:	aa 1f       	adc	r26, r26
    19cc:	bb 1f       	adc	r27, r27
    19ce:	a6 17       	cp	r26, r22
    19d0:	b7 07       	cpc	r27, r23
    19d2:	10 f0       	brcs	.+4      	; 0x19d8 <__udivmodhi4_ep>
    19d4:	a6 1b       	sub	r26, r22
    19d6:	b7 0b       	sbc	r27, r23

000019d8 <__udivmodhi4_ep>:
    19d8:	88 1f       	adc	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	5a 95       	dec	r21
    19de:	a9 f7       	brne	.-22     	; 0x19ca <__udivmodhi4_loop>
    19e0:	80 95       	com	r24
    19e2:	90 95       	com	r25
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	08 95       	ret

000019ea <__divmodhi4>:
    19ea:	97 fb       	bst	r25, 7
    19ec:	09 2e       	mov	r0, r25
    19ee:	07 26       	eor	r0, r23
    19f0:	0a d0       	rcall	.+20     	; 0x1a06 <__divmodhi4_neg1>
    19f2:	77 fd       	sbrc	r23, 7
    19f4:	04 d0       	rcall	.+8      	; 0x19fe <__divmodhi4_neg2>
    19f6:	e5 df       	rcall	.-54     	; 0x19c2 <__udivmodhi4>
    19f8:	06 d0       	rcall	.+12     	; 0x1a06 <__divmodhi4_neg1>
    19fa:	00 20       	and	r0, r0
    19fc:	1a f4       	brpl	.+6      	; 0x1a04 <__divmodhi4_exit>

000019fe <__divmodhi4_neg2>:
    19fe:	70 95       	com	r23
    1a00:	61 95       	neg	r22
    1a02:	7f 4f       	sbci	r23, 0xFF	; 255

00001a04 <__divmodhi4_exit>:
    1a04:	08 95       	ret

00001a06 <__divmodhi4_neg1>:
    1a06:	f6 f7       	brtc	.-4      	; 0x1a04 <__divmodhi4_exit>
    1a08:	90 95       	com	r25
    1a0a:	81 95       	neg	r24
    1a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0e:	08 95       	ret

00001a10 <__udivmodsi4>:
    1a10:	a1 e2       	ldi	r26, 0x21	; 33
    1a12:	1a 2e       	mov	r1, r26
    1a14:	aa 1b       	sub	r26, r26
    1a16:	bb 1b       	sub	r27, r27
    1a18:	fd 01       	movw	r30, r26
    1a1a:	0d c0       	rjmp	.+26     	; 0x1a36 <__udivmodsi4_ep>

00001a1c <__udivmodsi4_loop>:
    1a1c:	aa 1f       	adc	r26, r26
    1a1e:	bb 1f       	adc	r27, r27
    1a20:	ee 1f       	adc	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	a2 17       	cp	r26, r18
    1a26:	b3 07       	cpc	r27, r19
    1a28:	e4 07       	cpc	r30, r20
    1a2a:	f5 07       	cpc	r31, r21
    1a2c:	20 f0       	brcs	.+8      	; 0x1a36 <__udivmodsi4_ep>
    1a2e:	a2 1b       	sub	r26, r18
    1a30:	b3 0b       	sbc	r27, r19
    1a32:	e4 0b       	sbc	r30, r20
    1a34:	f5 0b       	sbc	r31, r21

00001a36 <__udivmodsi4_ep>:
    1a36:	66 1f       	adc	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	1a 94       	dec	r1
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <__udivmodsi4_loop>
    1a42:	60 95       	com	r22
    1a44:	70 95       	com	r23
    1a46:	80 95       	com	r24
    1a48:	90 95       	com	r25
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	bd 01       	movw	r22, r26
    1a50:	cf 01       	movw	r24, r30
    1a52:	08 95       	ret

00001a54 <sprintf>:
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	2e 97       	sbiw	r28, 0x0e	; 14
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0d 89       	ldd	r16, Y+21	; 0x15
    1a68:	1e 89       	ldd	r17, Y+22	; 0x16
    1a6a:	86 e0       	ldi	r24, 0x06	; 6
    1a6c:	8c 83       	std	Y+4, r24	; 0x04
    1a6e:	09 83       	std	Y+1, r16	; 0x01
    1a70:	1a 83       	std	Y+2, r17	; 0x02
    1a72:	8f ef       	ldi	r24, 0xFF	; 255
    1a74:	9f e7       	ldi	r25, 0x7F	; 127
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	ae 01       	movw	r20, r28
    1a7c:	47 5e       	subi	r20, 0xE7	; 231
    1a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a80:	ce 01       	movw	r24, r28
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	6f 89       	ldd	r22, Y+23	; 0x17
    1a86:	78 8d       	ldd	r23, Y+24	; 0x18
    1a88:	0d d0       	rcall	.+26     	; 0x1aa4 <vfprintf>
    1a8a:	ef 81       	ldd	r30, Y+7	; 0x07
    1a8c:	f8 85       	ldd	r31, Y+8	; 0x08
    1a8e:	e0 0f       	add	r30, r16
    1a90:	f1 1f       	adc	r31, r17
    1a92:	10 82       	st	Z, r1
    1a94:	2e 96       	adiw	r28, 0x0e	; 14
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	08 95       	ret

00001aa4 <vfprintf>:
    1aa4:	2f 92       	push	r2
    1aa6:	3f 92       	push	r3
    1aa8:	4f 92       	push	r4
    1aaa:	5f 92       	push	r5
    1aac:	6f 92       	push	r6
    1aae:	7f 92       	push	r7
    1ab0:	8f 92       	push	r8
    1ab2:	9f 92       	push	r9
    1ab4:	af 92       	push	r10
    1ab6:	bf 92       	push	r11
    1ab8:	cf 92       	push	r12
    1aba:	df 92       	push	r13
    1abc:	ef 92       	push	r14
    1abe:	ff 92       	push	r15
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	2d 97       	sbiw	r28, 0x0d	; 13
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	3c 01       	movw	r6, r24
    1ad4:	6c 87       	std	Y+12, r22	; 0x0c
    1ad6:	7d 87       	std	Y+13, r23	; 0x0d
    1ad8:	5a 01       	movw	r10, r20
    1ada:	fc 01       	movw	r30, r24
    1adc:	16 82       	std	Z+6, r1	; 0x06
    1ade:	17 82       	std	Z+7, r1	; 0x07
    1ae0:	83 81       	ldd	r24, Z+3	; 0x03
    1ae2:	81 ff       	sbrs	r24, 1
    1ae4:	bb c1       	rjmp	.+886    	; 0x1e5c <vfprintf+0x3b8>
    1ae6:	2e 01       	movw	r4, r28
    1ae8:	08 94       	sec
    1aea:	41 1c       	adc	r4, r1
    1aec:	51 1c       	adc	r5, r1
    1aee:	f3 01       	movw	r30, r6
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	ec 85       	ldd	r30, Y+12	; 0x0c
    1af4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1af6:	93 fd       	sbrc	r25, 3
    1af8:	85 91       	lpm	r24, Z+
    1afa:	93 ff       	sbrs	r25, 3
    1afc:	81 91       	ld	r24, Z+
    1afe:	ec 87       	std	Y+12, r30	; 0x0c
    1b00:	fd 87       	std	Y+13, r31	; 0x0d
    1b02:	88 23       	and	r24, r24
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <vfprintf+0x64>
    1b06:	a6 c1       	rjmp	.+844    	; 0x1e54 <vfprintf+0x3b0>
    1b08:	85 32       	cpi	r24, 0x25	; 37
    1b0a:	41 f4       	brne	.+16     	; 0x1b1c <vfprintf+0x78>
    1b0c:	93 fd       	sbrc	r25, 3
    1b0e:	85 91       	lpm	r24, Z+
    1b10:	93 ff       	sbrs	r25, 3
    1b12:	81 91       	ld	r24, Z+
    1b14:	ec 87       	std	Y+12, r30	; 0x0c
    1b16:	fd 87       	std	Y+13, r31	; 0x0d
    1b18:	85 32       	cpi	r24, 0x25	; 37
    1b1a:	21 f4       	brne	.+8      	; 0x1b24 <vfprintf+0x80>
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	b3 01       	movw	r22, r6
    1b20:	cb d1       	rcall	.+918    	; 0x1eb8 <fputc>
    1b22:	e5 cf       	rjmp	.-54     	; 0x1aee <vfprintf+0x4a>
    1b24:	ff 24       	eor	r15, r15
    1b26:	ee 24       	eor	r14, r14
    1b28:	10 e0       	ldi	r17, 0x00	; 0
    1b2a:	10 32       	cpi	r17, 0x20	; 32
    1b2c:	b0 f4       	brcc	.+44     	; 0x1b5a <vfprintf+0xb6>
    1b2e:	8b 32       	cpi	r24, 0x2B	; 43
    1b30:	69 f0       	breq	.+26     	; 0x1b4c <vfprintf+0xa8>
    1b32:	8c 32       	cpi	r24, 0x2C	; 44
    1b34:	28 f4       	brcc	.+10     	; 0x1b40 <vfprintf+0x9c>
    1b36:	80 32       	cpi	r24, 0x20	; 32
    1b38:	51 f0       	breq	.+20     	; 0x1b4e <vfprintf+0xaa>
    1b3a:	83 32       	cpi	r24, 0x23	; 35
    1b3c:	71 f4       	brne	.+28     	; 0x1b5a <vfprintf+0xb6>
    1b3e:	0b c0       	rjmp	.+22     	; 0x1b56 <vfprintf+0xb2>
    1b40:	8d 32       	cpi	r24, 0x2D	; 45
    1b42:	39 f0       	breq	.+14     	; 0x1b52 <vfprintf+0xae>
    1b44:	80 33       	cpi	r24, 0x30	; 48
    1b46:	49 f4       	brne	.+18     	; 0x1b5a <vfprintf+0xb6>
    1b48:	11 60       	ori	r17, 0x01	; 1
    1b4a:	2c c0       	rjmp	.+88     	; 0x1ba4 <vfprintf+0x100>
    1b4c:	12 60       	ori	r17, 0x02	; 2
    1b4e:	14 60       	ori	r17, 0x04	; 4
    1b50:	29 c0       	rjmp	.+82     	; 0x1ba4 <vfprintf+0x100>
    1b52:	18 60       	ori	r17, 0x08	; 8
    1b54:	27 c0       	rjmp	.+78     	; 0x1ba4 <vfprintf+0x100>
    1b56:	10 61       	ori	r17, 0x10	; 16
    1b58:	25 c0       	rjmp	.+74     	; 0x1ba4 <vfprintf+0x100>
    1b5a:	17 fd       	sbrc	r17, 7
    1b5c:	2e c0       	rjmp	.+92     	; 0x1bba <vfprintf+0x116>
    1b5e:	28 2f       	mov	r18, r24
    1b60:	20 53       	subi	r18, 0x30	; 48
    1b62:	2a 30       	cpi	r18, 0x0A	; 10
    1b64:	98 f4       	brcc	.+38     	; 0x1b8c <vfprintf+0xe8>
    1b66:	16 ff       	sbrs	r17, 6
    1b68:	08 c0       	rjmp	.+16     	; 0x1b7a <vfprintf+0xd6>
    1b6a:	8f 2d       	mov	r24, r15
    1b6c:	88 0f       	add	r24, r24
    1b6e:	f8 2e       	mov	r15, r24
    1b70:	ff 0c       	add	r15, r15
    1b72:	ff 0c       	add	r15, r15
    1b74:	f8 0e       	add	r15, r24
    1b76:	f2 0e       	add	r15, r18
    1b78:	15 c0       	rjmp	.+42     	; 0x1ba4 <vfprintf+0x100>
    1b7a:	8e 2d       	mov	r24, r14
    1b7c:	88 0f       	add	r24, r24
    1b7e:	e8 2e       	mov	r14, r24
    1b80:	ee 0c       	add	r14, r14
    1b82:	ee 0c       	add	r14, r14
    1b84:	e8 0e       	add	r14, r24
    1b86:	e2 0e       	add	r14, r18
    1b88:	10 62       	ori	r17, 0x20	; 32
    1b8a:	0c c0       	rjmp	.+24     	; 0x1ba4 <vfprintf+0x100>
    1b8c:	8e 32       	cpi	r24, 0x2E	; 46
    1b8e:	21 f4       	brne	.+8      	; 0x1b98 <vfprintf+0xf4>
    1b90:	16 fd       	sbrc	r17, 6
    1b92:	60 c1       	rjmp	.+704    	; 0x1e54 <vfprintf+0x3b0>
    1b94:	10 64       	ori	r17, 0x40	; 64
    1b96:	06 c0       	rjmp	.+12     	; 0x1ba4 <vfprintf+0x100>
    1b98:	8c 36       	cpi	r24, 0x6C	; 108
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <vfprintf+0xfc>
    1b9c:	10 68       	ori	r17, 0x80	; 128
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <vfprintf+0x100>
    1ba0:	88 36       	cpi	r24, 0x68	; 104
    1ba2:	59 f4       	brne	.+22     	; 0x1bba <vfprintf+0x116>
    1ba4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ba6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ba8:	93 fd       	sbrc	r25, 3
    1baa:	85 91       	lpm	r24, Z+
    1bac:	93 ff       	sbrs	r25, 3
    1bae:	81 91       	ld	r24, Z+
    1bb0:	ec 87       	std	Y+12, r30	; 0x0c
    1bb2:	fd 87       	std	Y+13, r31	; 0x0d
    1bb4:	88 23       	and	r24, r24
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <vfprintf+0x116>
    1bb8:	b8 cf       	rjmp	.-144    	; 0x1b2a <vfprintf+0x86>
    1bba:	98 2f       	mov	r25, r24
    1bbc:	95 54       	subi	r25, 0x45	; 69
    1bbe:	93 30       	cpi	r25, 0x03	; 3
    1bc0:	18 f0       	brcs	.+6      	; 0x1bc8 <vfprintf+0x124>
    1bc2:	90 52       	subi	r25, 0x20	; 32
    1bc4:	93 30       	cpi	r25, 0x03	; 3
    1bc6:	38 f4       	brcc	.+14     	; 0x1bd6 <vfprintf+0x132>
    1bc8:	24 e0       	ldi	r18, 0x04	; 4
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	a2 0e       	add	r10, r18
    1bce:	b3 1e       	adc	r11, r19
    1bd0:	3f e3       	ldi	r19, 0x3F	; 63
    1bd2:	39 83       	std	Y+1, r19	; 0x01
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <vfprintf+0x150>
    1bd6:	83 36       	cpi	r24, 0x63	; 99
    1bd8:	31 f0       	breq	.+12     	; 0x1be6 <vfprintf+0x142>
    1bda:	83 37       	cpi	r24, 0x73	; 115
    1bdc:	81 f0       	breq	.+32     	; 0x1bfe <vfprintf+0x15a>
    1bde:	83 35       	cpi	r24, 0x53	; 83
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <vfprintf+0x140>
    1be2:	56 c0       	rjmp	.+172    	; 0x1c90 <vfprintf+0x1ec>
    1be4:	21 c0       	rjmp	.+66     	; 0x1c28 <vfprintf+0x184>
    1be6:	f5 01       	movw	r30, r10
    1be8:	80 81       	ld	r24, Z
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	22 e0       	ldi	r18, 0x02	; 2
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	a2 0e       	add	r10, r18
    1bf2:	b3 1e       	adc	r11, r19
    1bf4:	21 e0       	ldi	r18, 0x01	; 1
    1bf6:	c2 2e       	mov	r12, r18
    1bf8:	d1 2c       	mov	r13, r1
    1bfa:	42 01       	movw	r8, r4
    1bfc:	13 c0       	rjmp	.+38     	; 0x1c24 <vfprintf+0x180>
    1bfe:	92 e0       	ldi	r25, 0x02	; 2
    1c00:	29 2e       	mov	r2, r25
    1c02:	31 2c       	mov	r3, r1
    1c04:	2a 0c       	add	r2, r10
    1c06:	3b 1c       	adc	r3, r11
    1c08:	f5 01       	movw	r30, r10
    1c0a:	80 80       	ld	r8, Z
    1c0c:	91 80       	ldd	r9, Z+1	; 0x01
    1c0e:	16 ff       	sbrs	r17, 6
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <vfprintf+0x174>
    1c12:	6f 2d       	mov	r22, r15
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <vfprintf+0x178>
    1c18:	6f ef       	ldi	r22, 0xFF	; 255
    1c1a:	7f ef       	ldi	r23, 0xFF	; 255
    1c1c:	c4 01       	movw	r24, r8
    1c1e:	41 d1       	rcall	.+642    	; 0x1ea2 <strnlen>
    1c20:	6c 01       	movw	r12, r24
    1c22:	51 01       	movw	r10, r2
    1c24:	1f 77       	andi	r17, 0x7F	; 127
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <vfprintf+0x1ac>
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	28 2e       	mov	r2, r24
    1c2c:	31 2c       	mov	r3, r1
    1c2e:	2a 0c       	add	r2, r10
    1c30:	3b 1c       	adc	r3, r11
    1c32:	f5 01       	movw	r30, r10
    1c34:	80 80       	ld	r8, Z
    1c36:	91 80       	ldd	r9, Z+1	; 0x01
    1c38:	16 ff       	sbrs	r17, 6
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <vfprintf+0x19e>
    1c3c:	6f 2d       	mov	r22, r15
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <vfprintf+0x1a2>
    1c42:	6f ef       	ldi	r22, 0xFF	; 255
    1c44:	7f ef       	ldi	r23, 0xFF	; 255
    1c46:	c4 01       	movw	r24, r8
    1c48:	21 d1       	rcall	.+578    	; 0x1e8c <strnlen_P>
    1c4a:	6c 01       	movw	r12, r24
    1c4c:	10 68       	ori	r17, 0x80	; 128
    1c4e:	51 01       	movw	r10, r2
    1c50:	13 fd       	sbrc	r17, 3
    1c52:	1a c0       	rjmp	.+52     	; 0x1c88 <vfprintf+0x1e4>
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <vfprintf+0x1bc>
    1c56:	80 e2       	ldi	r24, 0x20	; 32
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	b3 01       	movw	r22, r6
    1c5c:	2d d1       	rcall	.+602    	; 0x1eb8 <fputc>
    1c5e:	ea 94       	dec	r14
    1c60:	8e 2d       	mov	r24, r14
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	c8 16       	cp	r12, r24
    1c66:	d9 06       	cpc	r13, r25
    1c68:	b0 f3       	brcs	.-20     	; 0x1c56 <vfprintf+0x1b2>
    1c6a:	0e c0       	rjmp	.+28     	; 0x1c88 <vfprintf+0x1e4>
    1c6c:	f4 01       	movw	r30, r8
    1c6e:	17 fd       	sbrc	r17, 7
    1c70:	85 91       	lpm	r24, Z+
    1c72:	17 ff       	sbrs	r17, 7
    1c74:	81 91       	ld	r24, Z+
    1c76:	4f 01       	movw	r8, r30
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	b3 01       	movw	r22, r6
    1c7c:	1d d1       	rcall	.+570    	; 0x1eb8 <fputc>
    1c7e:	e1 10       	cpse	r14, r1
    1c80:	ea 94       	dec	r14
    1c82:	08 94       	sec
    1c84:	c1 08       	sbc	r12, r1
    1c86:	d1 08       	sbc	r13, r1
    1c88:	c1 14       	cp	r12, r1
    1c8a:	d1 04       	cpc	r13, r1
    1c8c:	79 f7       	brne	.-34     	; 0x1c6c <vfprintf+0x1c8>
    1c8e:	df c0       	rjmp	.+446    	; 0x1e4e <vfprintf+0x3aa>
    1c90:	84 36       	cpi	r24, 0x64	; 100
    1c92:	11 f0       	breq	.+4      	; 0x1c98 <vfprintf+0x1f4>
    1c94:	89 36       	cpi	r24, 0x69	; 105
    1c96:	49 f5       	brne	.+82     	; 0x1cea <vfprintf+0x246>
    1c98:	f5 01       	movw	r30, r10
    1c9a:	17 ff       	sbrs	r17, 7
    1c9c:	07 c0       	rjmp	.+14     	; 0x1cac <vfprintf+0x208>
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ca4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ca6:	24 e0       	ldi	r18, 0x04	; 4
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <vfprintf+0x218>
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	aa 27       	eor	r26, r26
    1cb2:	97 fd       	sbrc	r25, 7
    1cb4:	a0 95       	com	r26
    1cb6:	ba 2f       	mov	r27, r26
    1cb8:	22 e0       	ldi	r18, 0x02	; 2
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	a2 0e       	add	r10, r18
    1cbe:	b3 1e       	adc	r11, r19
    1cc0:	01 2f       	mov	r16, r17
    1cc2:	0f 76       	andi	r16, 0x6F	; 111
    1cc4:	b7 ff       	sbrs	r27, 7
    1cc6:	08 c0       	rjmp	.+16     	; 0x1cd8 <vfprintf+0x234>
    1cc8:	b0 95       	com	r27
    1cca:	a0 95       	com	r26
    1ccc:	90 95       	com	r25
    1cce:	81 95       	neg	r24
    1cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd2:	af 4f       	sbci	r26, 0xFF	; 255
    1cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd6:	00 68       	ori	r16, 0x80	; 128
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	a2 01       	movw	r20, r4
    1cde:	2a e0       	ldi	r18, 0x0A	; 10
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	16 d1       	rcall	.+556    	; 0x1f10 <__ultoa_invert>
    1ce4:	d8 2e       	mov	r13, r24
    1ce6:	d4 18       	sub	r13, r4
    1ce8:	3e c0       	rjmp	.+124    	; 0x1d66 <vfprintf+0x2c2>
    1cea:	85 37       	cpi	r24, 0x75	; 117
    1cec:	21 f4       	brne	.+8      	; 0x1cf6 <vfprintf+0x252>
    1cee:	1f 7e       	andi	r17, 0xEF	; 239
    1cf0:	2a e0       	ldi	r18, 0x0A	; 10
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	20 c0       	rjmp	.+64     	; 0x1d36 <vfprintf+0x292>
    1cf6:	19 7f       	andi	r17, 0xF9	; 249
    1cf8:	8f 36       	cpi	r24, 0x6F	; 111
    1cfa:	a9 f0       	breq	.+42     	; 0x1d26 <vfprintf+0x282>
    1cfc:	80 37       	cpi	r24, 0x70	; 112
    1cfe:	20 f4       	brcc	.+8      	; 0x1d08 <vfprintf+0x264>
    1d00:	88 35       	cpi	r24, 0x58	; 88
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <vfprintf+0x262>
    1d04:	a7 c0       	rjmp	.+334    	; 0x1e54 <vfprintf+0x3b0>
    1d06:	0b c0       	rjmp	.+22     	; 0x1d1e <vfprintf+0x27a>
    1d08:	80 37       	cpi	r24, 0x70	; 112
    1d0a:	21 f0       	breq	.+8      	; 0x1d14 <vfprintf+0x270>
    1d0c:	88 37       	cpi	r24, 0x78	; 120
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <vfprintf+0x26e>
    1d10:	a1 c0       	rjmp	.+322    	; 0x1e54 <vfprintf+0x3b0>
    1d12:	01 c0       	rjmp	.+2      	; 0x1d16 <vfprintf+0x272>
    1d14:	10 61       	ori	r17, 0x10	; 16
    1d16:	14 ff       	sbrs	r17, 4
    1d18:	09 c0       	rjmp	.+18     	; 0x1d2c <vfprintf+0x288>
    1d1a:	14 60       	ori	r17, 0x04	; 4
    1d1c:	07 c0       	rjmp	.+14     	; 0x1d2c <vfprintf+0x288>
    1d1e:	14 ff       	sbrs	r17, 4
    1d20:	08 c0       	rjmp	.+16     	; 0x1d32 <vfprintf+0x28e>
    1d22:	16 60       	ori	r17, 0x06	; 6
    1d24:	06 c0       	rjmp	.+12     	; 0x1d32 <vfprintf+0x28e>
    1d26:	28 e0       	ldi	r18, 0x08	; 8
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	05 c0       	rjmp	.+10     	; 0x1d36 <vfprintf+0x292>
    1d2c:	20 e1       	ldi	r18, 0x10	; 16
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <vfprintf+0x292>
    1d32:	20 e1       	ldi	r18, 0x10	; 16
    1d34:	32 e0       	ldi	r19, 0x02	; 2
    1d36:	f5 01       	movw	r30, r10
    1d38:	17 ff       	sbrs	r17, 7
    1d3a:	07 c0       	rjmp	.+14     	; 0x1d4a <vfprintf+0x2a6>
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	44 e0       	ldi	r20, 0x04	; 4
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	06 c0       	rjmp	.+12     	; 0x1d56 <vfprintf+0x2b2>
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	42 e0       	ldi	r20, 0x02	; 2
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	a4 0e       	add	r10, r20
    1d58:	b5 1e       	adc	r11, r21
    1d5a:	a2 01       	movw	r20, r4
    1d5c:	d9 d0       	rcall	.+434    	; 0x1f10 <__ultoa_invert>
    1d5e:	d8 2e       	mov	r13, r24
    1d60:	d4 18       	sub	r13, r4
    1d62:	01 2f       	mov	r16, r17
    1d64:	0f 77       	andi	r16, 0x7F	; 127
    1d66:	06 ff       	sbrs	r16, 6
    1d68:	09 c0       	rjmp	.+18     	; 0x1d7c <vfprintf+0x2d8>
    1d6a:	0e 7f       	andi	r16, 0xFE	; 254
    1d6c:	df 14       	cp	r13, r15
    1d6e:	30 f4       	brcc	.+12     	; 0x1d7c <vfprintf+0x2d8>
    1d70:	04 ff       	sbrs	r16, 4
    1d72:	06 c0       	rjmp	.+12     	; 0x1d80 <vfprintf+0x2dc>
    1d74:	02 fd       	sbrc	r16, 2
    1d76:	04 c0       	rjmp	.+8      	; 0x1d80 <vfprintf+0x2dc>
    1d78:	0f 7e       	andi	r16, 0xEF	; 239
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <vfprintf+0x2dc>
    1d7c:	1d 2d       	mov	r17, r13
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <vfprintf+0x2de>
    1d80:	1f 2d       	mov	r17, r15
    1d82:	80 2f       	mov	r24, r16
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	04 ff       	sbrs	r16, 4
    1d88:	0c c0       	rjmp	.+24     	; 0x1da2 <vfprintf+0x2fe>
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	ed 0d       	add	r30, r13
    1d8e:	f1 1d       	adc	r31, r1
    1d90:	20 81       	ld	r18, Z
    1d92:	20 33       	cpi	r18, 0x30	; 48
    1d94:	11 f4       	brne	.+4      	; 0x1d9a <vfprintf+0x2f6>
    1d96:	09 7e       	andi	r16, 0xE9	; 233
    1d98:	09 c0       	rjmp	.+18     	; 0x1dac <vfprintf+0x308>
    1d9a:	02 ff       	sbrs	r16, 2
    1d9c:	06 c0       	rjmp	.+12     	; 0x1daa <vfprintf+0x306>
    1d9e:	1e 5f       	subi	r17, 0xFE	; 254
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <vfprintf+0x308>
    1da2:	86 78       	andi	r24, 0x86	; 134
    1da4:	90 70       	andi	r25, 0x00	; 0
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	09 f0       	breq	.+2      	; 0x1dac <vfprintf+0x308>
    1daa:	1f 5f       	subi	r17, 0xFF	; 255
    1dac:	80 2e       	mov	r8, r16
    1dae:	99 24       	eor	r9, r9
    1db0:	03 fd       	sbrc	r16, 3
    1db2:	11 c0       	rjmp	.+34     	; 0x1dd6 <vfprintf+0x332>
    1db4:	00 ff       	sbrs	r16, 0
    1db6:	0c c0       	rjmp	.+24     	; 0x1dd0 <vfprintf+0x32c>
    1db8:	fd 2c       	mov	r15, r13
    1dba:	1e 15       	cp	r17, r14
    1dbc:	48 f4       	brcc	.+18     	; 0x1dd0 <vfprintf+0x32c>
    1dbe:	fe 0c       	add	r15, r14
    1dc0:	f1 1a       	sub	r15, r17
    1dc2:	1e 2d       	mov	r17, r14
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <vfprintf+0x32c>
    1dc6:	80 e2       	ldi	r24, 0x20	; 32
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	b3 01       	movw	r22, r6
    1dcc:	75 d0       	rcall	.+234    	; 0x1eb8 <fputc>
    1dce:	1f 5f       	subi	r17, 0xFF	; 255
    1dd0:	1e 15       	cp	r17, r14
    1dd2:	c8 f3       	brcs	.-14     	; 0x1dc6 <vfprintf+0x322>
    1dd4:	04 c0       	rjmp	.+8      	; 0x1dde <vfprintf+0x33a>
    1dd6:	1e 15       	cp	r17, r14
    1dd8:	10 f4       	brcc	.+4      	; 0x1dde <vfprintf+0x33a>
    1dda:	e1 1a       	sub	r14, r17
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <vfprintf+0x33c>
    1dde:	ee 24       	eor	r14, r14
    1de0:	84 fe       	sbrs	r8, 4
    1de2:	0e c0       	rjmp	.+28     	; 0x1e00 <vfprintf+0x35c>
    1de4:	80 e3       	ldi	r24, 0x30	; 48
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	b3 01       	movw	r22, r6
    1dea:	66 d0       	rcall	.+204    	; 0x1eb8 <fputc>
    1dec:	82 fe       	sbrs	r8, 2
    1dee:	1d c0       	rjmp	.+58     	; 0x1e2a <vfprintf+0x386>
    1df0:	81 fe       	sbrs	r8, 1
    1df2:	03 c0       	rjmp	.+6      	; 0x1dfa <vfprintf+0x356>
    1df4:	88 e5       	ldi	r24, 0x58	; 88
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	10 c0       	rjmp	.+32     	; 0x1e1a <vfprintf+0x376>
    1dfa:	88 e7       	ldi	r24, 0x78	; 120
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	0d c0       	rjmp	.+26     	; 0x1e1a <vfprintf+0x376>
    1e00:	c4 01       	movw	r24, r8
    1e02:	86 78       	andi	r24, 0x86	; 134
    1e04:	90 70       	andi	r25, 0x00	; 0
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	81 f0       	breq	.+32     	; 0x1e2a <vfprintf+0x386>
    1e0a:	81 fc       	sbrc	r8, 1
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <vfprintf+0x36e>
    1e0e:	80 e2       	ldi	r24, 0x20	; 32
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <vfprintf+0x370>
    1e12:	8b e2       	ldi	r24, 0x2B	; 43
    1e14:	07 fd       	sbrc	r16, 7
    1e16:	8d e2       	ldi	r24, 0x2D	; 45
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	b3 01       	movw	r22, r6
    1e1c:	4d d0       	rcall	.+154    	; 0x1eb8 <fputc>
    1e1e:	05 c0       	rjmp	.+10     	; 0x1e2a <vfprintf+0x386>
    1e20:	80 e3       	ldi	r24, 0x30	; 48
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	b3 01       	movw	r22, r6
    1e26:	48 d0       	rcall	.+144    	; 0x1eb8 <fputc>
    1e28:	fa 94       	dec	r15
    1e2a:	df 14       	cp	r13, r15
    1e2c:	c8 f3       	brcs	.-14     	; 0x1e20 <vfprintf+0x37c>
    1e2e:	da 94       	dec	r13
    1e30:	f2 01       	movw	r30, r4
    1e32:	ed 0d       	add	r30, r13
    1e34:	f1 1d       	adc	r31, r1
    1e36:	80 81       	ld	r24, Z
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	b3 01       	movw	r22, r6
    1e3c:	3d d0       	rcall	.+122    	; 0x1eb8 <fputc>
    1e3e:	dd 20       	and	r13, r13
    1e40:	b1 f7       	brne	.-20     	; 0x1e2e <vfprintf+0x38a>
    1e42:	05 c0       	rjmp	.+10     	; 0x1e4e <vfprintf+0x3aa>
    1e44:	80 e2       	ldi	r24, 0x20	; 32
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	b3 01       	movw	r22, r6
    1e4a:	36 d0       	rcall	.+108    	; 0x1eb8 <fputc>
    1e4c:	ea 94       	dec	r14
    1e4e:	ee 20       	and	r14, r14
    1e50:	c9 f7       	brne	.-14     	; 0x1e44 <vfprintf+0x3a0>
    1e52:	4d ce       	rjmp	.-870    	; 0x1aee <vfprintf+0x4a>
    1e54:	f3 01       	movw	r30, r6
    1e56:	86 81       	ldd	r24, Z+6	; 0x06
    1e58:	97 81       	ldd	r25, Z+7	; 0x07
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <vfprintf+0x3bc>
    1e5c:	8f ef       	ldi	r24, 0xFF	; 255
    1e5e:	9f ef       	ldi	r25, 0xFF	; 255
    1e60:	2d 96       	adiw	r28, 0x0d	; 13
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	ff 90       	pop	r15
    1e70:	ef 90       	pop	r14
    1e72:	df 90       	pop	r13
    1e74:	cf 90       	pop	r12
    1e76:	bf 90       	pop	r11
    1e78:	af 90       	pop	r10
    1e7a:	9f 90       	pop	r9
    1e7c:	8f 90       	pop	r8
    1e7e:	7f 90       	pop	r7
    1e80:	6f 90       	pop	r6
    1e82:	5f 90       	pop	r5
    1e84:	4f 90       	pop	r4
    1e86:	3f 90       	pop	r3
    1e88:	2f 90       	pop	r2
    1e8a:	08 95       	ret

00001e8c <strnlen_P>:
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	05 90       	lpm	r0, Z+
    1e90:	61 50       	subi	r22, 0x01	; 1
    1e92:	70 40       	sbci	r23, 0x00	; 0
    1e94:	01 10       	cpse	r0, r1
    1e96:	d8 f7       	brcc	.-10     	; 0x1e8e <strnlen_P+0x2>
    1e98:	80 95       	com	r24
    1e9a:	90 95       	com	r25
    1e9c:	8e 0f       	add	r24, r30
    1e9e:	9f 1f       	adc	r25, r31
    1ea0:	08 95       	ret

00001ea2 <strnlen>:
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	61 50       	subi	r22, 0x01	; 1
    1ea6:	70 40       	sbci	r23, 0x00	; 0
    1ea8:	01 90       	ld	r0, Z+
    1eaa:	01 10       	cpse	r0, r1
    1eac:	d8 f7       	brcc	.-10     	; 0x1ea4 <strnlen+0x2>
    1eae:	80 95       	com	r24
    1eb0:	90 95       	com	r25
    1eb2:	8e 0f       	add	r24, r30
    1eb4:	9f 1f       	adc	r25, r31
    1eb6:	08 95       	ret

00001eb8 <fputc>:
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	8c 01       	movw	r16, r24
    1ec2:	eb 01       	movw	r28, r22
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	81 ff       	sbrs	r24, 1
    1ec8:	1b c0       	rjmp	.+54     	; 0x1f00 <fputc+0x48>
    1eca:	82 ff       	sbrs	r24, 2
    1ecc:	0d c0       	rjmp	.+26     	; 0x1ee8 <fputc+0x30>
    1ece:	2e 81       	ldd	r18, Y+6	; 0x06
    1ed0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed6:	28 17       	cp	r18, r24
    1ed8:	39 07       	cpc	r19, r25
    1eda:	64 f4       	brge	.+24     	; 0x1ef4 <fputc+0x3c>
    1edc:	e8 81       	ld	r30, Y
    1ede:	f9 81       	ldd	r31, Y+1	; 0x01
    1ee0:	01 93       	st	Z+, r16
    1ee2:	e8 83       	st	Y, r30
    1ee4:	f9 83       	std	Y+1, r31	; 0x01
    1ee6:	06 c0       	rjmp	.+12     	; 0x1ef4 <fputc+0x3c>
    1ee8:	e8 85       	ldd	r30, Y+8	; 0x08
    1eea:	f9 85       	ldd	r31, Y+9	; 0x09
    1eec:	80 2f       	mov	r24, r16
    1eee:	09 95       	icall
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	31 f4       	brne	.+12     	; 0x1f00 <fputc+0x48>
    1ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef8:	01 96       	adiw	r24, 0x01	; 1
    1efa:	8e 83       	std	Y+6, r24	; 0x06
    1efc:	9f 83       	std	Y+7, r25	; 0x07
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <fputc+0x4c>
    1f00:	0f ef       	ldi	r16, 0xFF	; 255
    1f02:	1f ef       	ldi	r17, 0xFF	; 255
    1f04:	c8 01       	movw	r24, r16
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	08 95       	ret

00001f10 <__ultoa_invert>:
    1f10:	fa 01       	movw	r30, r20
    1f12:	aa 27       	eor	r26, r26
    1f14:	28 30       	cpi	r18, 0x08	; 8
    1f16:	51 f1       	breq	.+84     	; 0x1f6c <__ultoa_invert+0x5c>
    1f18:	20 31       	cpi	r18, 0x10	; 16
    1f1a:	81 f1       	breq	.+96     	; 0x1f7c <__ultoa_invert+0x6c>
    1f1c:	e8 94       	clt
    1f1e:	6f 93       	push	r22
    1f20:	6e 7f       	andi	r22, 0xFE	; 254
    1f22:	6e 5f       	subi	r22, 0xFE	; 254
    1f24:	7f 4f       	sbci	r23, 0xFF	; 255
    1f26:	8f 4f       	sbci	r24, 0xFF	; 255
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	af 4f       	sbci	r26, 0xFF	; 255
    1f2c:	b1 e0       	ldi	r27, 0x01	; 1
    1f2e:	3e d0       	rcall	.+124    	; 0x1fac <__ultoa_invert+0x9c>
    1f30:	b4 e0       	ldi	r27, 0x04	; 4
    1f32:	3c d0       	rcall	.+120    	; 0x1fac <__ultoa_invert+0x9c>
    1f34:	67 0f       	add	r22, r23
    1f36:	78 1f       	adc	r23, r24
    1f38:	89 1f       	adc	r24, r25
    1f3a:	9a 1f       	adc	r25, r26
    1f3c:	a1 1d       	adc	r26, r1
    1f3e:	68 0f       	add	r22, r24
    1f40:	79 1f       	adc	r23, r25
    1f42:	8a 1f       	adc	r24, r26
    1f44:	91 1d       	adc	r25, r1
    1f46:	a1 1d       	adc	r26, r1
    1f48:	6a 0f       	add	r22, r26
    1f4a:	71 1d       	adc	r23, r1
    1f4c:	81 1d       	adc	r24, r1
    1f4e:	91 1d       	adc	r25, r1
    1f50:	a1 1d       	adc	r26, r1
    1f52:	20 d0       	rcall	.+64     	; 0x1f94 <__ultoa_invert+0x84>
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <__ultoa_invert+0x48>
    1f56:	68 94       	set
    1f58:	3f 91       	pop	r19
    1f5a:	2a e0       	ldi	r18, 0x0A	; 10
    1f5c:	26 9f       	mul	r18, r22
    1f5e:	11 24       	eor	r1, r1
    1f60:	30 19       	sub	r19, r0
    1f62:	30 5d       	subi	r19, 0xD0	; 208
    1f64:	31 93       	st	Z+, r19
    1f66:	de f6       	brtc	.-74     	; 0x1f1e <__ultoa_invert+0xe>
    1f68:	cf 01       	movw	r24, r30
    1f6a:	08 95       	ret
    1f6c:	46 2f       	mov	r20, r22
    1f6e:	47 70       	andi	r20, 0x07	; 7
    1f70:	40 5d       	subi	r20, 0xD0	; 208
    1f72:	41 93       	st	Z+, r20
    1f74:	b3 e0       	ldi	r27, 0x03	; 3
    1f76:	0f d0       	rcall	.+30     	; 0x1f96 <__ultoa_invert+0x86>
    1f78:	c9 f7       	brne	.-14     	; 0x1f6c <__ultoa_invert+0x5c>
    1f7a:	f6 cf       	rjmp	.-20     	; 0x1f68 <__ultoa_invert+0x58>
    1f7c:	46 2f       	mov	r20, r22
    1f7e:	4f 70       	andi	r20, 0x0F	; 15
    1f80:	40 5d       	subi	r20, 0xD0	; 208
    1f82:	4a 33       	cpi	r20, 0x3A	; 58
    1f84:	18 f0       	brcs	.+6      	; 0x1f8c <__ultoa_invert+0x7c>
    1f86:	49 5d       	subi	r20, 0xD9	; 217
    1f88:	31 fd       	sbrc	r19, 1
    1f8a:	40 52       	subi	r20, 0x20	; 32
    1f8c:	41 93       	st	Z+, r20
    1f8e:	02 d0       	rcall	.+4      	; 0x1f94 <__ultoa_invert+0x84>
    1f90:	a9 f7       	brne	.-22     	; 0x1f7c <__ultoa_invert+0x6c>
    1f92:	ea cf       	rjmp	.-44     	; 0x1f68 <__ultoa_invert+0x58>
    1f94:	b4 e0       	ldi	r27, 0x04	; 4
    1f96:	a6 95       	lsr	r26
    1f98:	97 95       	ror	r25
    1f9a:	87 95       	ror	r24
    1f9c:	77 95       	ror	r23
    1f9e:	67 95       	ror	r22
    1fa0:	ba 95       	dec	r27
    1fa2:	c9 f7       	brne	.-14     	; 0x1f96 <__ultoa_invert+0x86>
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	61 05       	cpc	r22, r1
    1fa8:	71 05       	cpc	r23, r1
    1faa:	08 95       	ret
    1fac:	9b 01       	movw	r18, r22
    1fae:	ac 01       	movw	r20, r24
    1fb0:	0a 2e       	mov	r0, r26
    1fb2:	06 94       	lsr	r0
    1fb4:	57 95       	ror	r21
    1fb6:	47 95       	ror	r20
    1fb8:	37 95       	ror	r19
    1fba:	27 95       	ror	r18
    1fbc:	ba 95       	dec	r27
    1fbe:	c9 f7       	brne	.-14     	; 0x1fb2 <__ultoa_invert+0xa2>
    1fc0:	62 0f       	add	r22, r18
    1fc2:	73 1f       	adc	r23, r19
    1fc4:	84 1f       	adc	r24, r20
    1fc6:	95 1f       	adc	r25, r21
    1fc8:	a0 1d       	adc	r26, r0
    1fca:	08 95       	ret

00001fcc <_exit>:
    1fcc:	f8 94       	cli

00001fce <__stop_program>:
    1fce:	ff cf       	rjmp	.-2      	; 0x1fce <__stop_program>
